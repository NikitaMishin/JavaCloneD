Method public static T or(T first, T second)  (AdditionalMatchers.java)
     Method public static T and(T first, T second)  (AdditionalMatchers.java)
          Method public static int and(int first, int second)  (AdditionalMatchers.java)
               Method public static boolean and(boolean first, boolean second)  (AdditionalMatchers.java)
                    Method public static boolean not(boolean first)  (AdditionalMatchers.java)
                         Method public static int not(int first)  (AdditionalMatchers.java)
          Method public static T not(T first)  (AdditionalMatchers.java)
               Method public static int not(int first)  (AdditionalMatchers.java)

Method public static T or(T first, T second)    (AdditionalMatchers.java)


     * Object argument that matches any of the given argument matchers.
     * <p>
     * See examples in javadoc for {@link AdditionalMatchers} class
     * 
     * @param <T>
     *            the type of the object, it is passed through to prevent casts.
     * @param first
     *            placeholder for the first argument matcher.
     * @param second
     *            placeholder for the second argument matcher.
     * @return <code>null</code>.
     

----------------------


     Method public static T and(T first, T second)    (AdditionalMatchers.java)

     
          * Object argument that matches both given argument matchers.
          * <p>
          * See examples in javadoc for {@link AdditionalMatchers} class
          * 
          * @param <T>
          *            the type of the object, it is passed through to prevent casts.
          * @param first
          *            placeholder for the first argument matcher.
          * @param second
          *            placeholder for the second argument matcher.
          * @return <code>null</code>.
          

     ----------------------


          Method public static int and(int first, int second)    (AdditionalMatchers.java)

          
               * int argument that matches both given argument matchers.
               * <p>
               * See examples in javadoc for {@link AdditionalMatchers} class
               * 
               * @param first
               *            placeholder for the first argument matcher.
               * @param second
               *            placeholder for the second argument matcher.
               * @return <code>0</code>.
               

          ----------------------


               Method public static boolean and(boolean first, boolean second)    (AdditionalMatchers.java)

               
                    * boolean argument that matches both given matchers.
                    * <p>
                    * See examples in javadoc for {@link AdditionalMatchers} class
                    * 
                    * @param first
                    *            placeholder for the first argument matcher.
                    * @param second
                    *            placeholder for the second argument matcher.
                    * @return <code>false</code>.
                    

               ----------------------


                    Method public static boolean not(boolean first)    (AdditionalMatchers.java)

                    
                         * boolean argument that does not match the given argument matcher.
                         * <p>
                         * See examples in javadoc for {@link AdditionalMatchers} class
                         * 
                         * @param first
                         *            placeholder for the argument matcher.
                         * @return <code>false</code>.
                         

                    ----------------------


                         Method public static int not(int first)    (AdditionalMatchers.java)

                         
                              * int argument that does not match the given argument matcher.
                              * <p>
                              * See examples in javadoc for {@link AdditionalMatchers} class
                              * 
                              * @param first
                              *            placeholder for the argument matcher.
                              * @return <code>0</code>.
                              

                         ----------------------


          Method public static T not(T first)    (AdditionalMatchers.java)

          
               * Object argument that does not match the given argument matcher.
               * <p>
               * See examples in javadoc for {@link AdditionalMatchers} class
               * 
               * @param <T>
               *            the type of the object, it is passed through to prevent casts.
               * @param first
               *            placeholder for the argument matcher.
               * @return <code>null</code>.
               

          ----------------------


               Method public static int not(int first)    (AdditionalMatchers.java)

               
                    * int argument that does not match the given argument matcher.
                    * <p>
                    * See examples in javadoc for {@link AdditionalMatchers} class
                    * 
                    * @param first
                    *            placeholder for the argument matcher.
                    * @return <code>0</code>.
                    

               ----------------------




Method public static double or(double first, double second)  (AdditionalMatchers.java)
     Method public static double and(double first, double second)  (AdditionalMatchers.java)
          Method public static int and(int first, int second)  (AdditionalMatchers.java)
               Method public static boolean and(boolean first, boolean second)  (AdditionalMatchers.java)
                    Method public static boolean not(boolean first)  (AdditionalMatchers.java)
                         Method public static int not(int first)  (AdditionalMatchers.java)

Method public static double or(double first, double second)    (AdditionalMatchers.java)


     * double argument that matches any of the given argument matchers.
     * <p>
     * See examples in javadoc for {@link AdditionalMatchers} class
     * 
     * @param first
     *            placeholder for the first argument matcher.
     * @param second
     *            placeholder for the second argument matcher.
     * @return <code>0</code>.
     

----------------------


     Method public static double and(double first, double second)    (AdditionalMatchers.java)

     
          * double argument that matches both given argument matchers.
          * <p>
          * See examples in javadoc for {@link AdditionalMatchers} class
          * 
          * @param first
          *            placeholder for the first argument matcher.
          * @param second
          *            placeholder for the second argument matcher.
          * @return <code>0</code>.
          

     ----------------------


          Method public static int and(int first, int second)    (AdditionalMatchers.java)

          
               * int argument that matches both given argument matchers.
               * <p>
               * See examples in javadoc for {@link AdditionalMatchers} class
               * 
               * @param first
               *            placeholder for the first argument matcher.
               * @param second
               *            placeholder for the second argument matcher.
               * @return <code>0</code>.
               

          ----------------------


               Method public static boolean and(boolean first, boolean second)    (AdditionalMatchers.java)

               
                    * boolean argument that matches both given matchers.
                    * <p>
                    * See examples in javadoc for {@link AdditionalMatchers} class
                    * 
                    * @param first
                    *            placeholder for the first argument matcher.
                    * @param second
                    *            placeholder for the second argument matcher.
                    * @return <code>false</code>.
                    

               ----------------------


                    Method public static boolean not(boolean first)    (AdditionalMatchers.java)

                    
                         * boolean argument that does not match the given argument matcher.
                         * <p>
                         * See examples in javadoc for {@link AdditionalMatchers} class
                         * 
                         * @param first
                         *            placeholder for the argument matcher.
                         * @return <code>false</code>.
                         

                    ----------------------


                         Method public static int not(int first)    (AdditionalMatchers.java)

                         
                              * int argument that does not match the given argument matcher.
                              * <p>
                              * See examples in javadoc for {@link AdditionalMatchers} class
                              * 
                              * @param first
                              *            placeholder for the argument matcher.
                              * @return <code>0</code>.
                              

                         ----------------------




Method public static short or(short first, short second)  (AdditionalMatchers.java)
     Method public static short and(short first, short second)  (AdditionalMatchers.java)
          Method public static int and(int first, int second)  (AdditionalMatchers.java)
               Method public static boolean and(boolean first, boolean second)  (AdditionalMatchers.java)
                    Method public static boolean not(boolean first)  (AdditionalMatchers.java)
                         Method public static int not(int first)  (AdditionalMatchers.java)

Method public static short or(short first, short second)    (AdditionalMatchers.java)


     * short argument that matches any of the given argument matchers.
     * <p>
     * See examples in javadoc for {@link AdditionalMatchers} class
     * 
     * @param first
     *            placeholder for the first argument matcher.
     * @param second
     *            placeholder for the second argument matcher.
     * @return <code>0</code>.
     

----------------------


     Method public static short and(short first, short second)    (AdditionalMatchers.java)

     
          * short argument that matches both given argument matchers.
          * <p>
          * See examples in javadoc for {@link AdditionalMatchers} class
          * 
          * @param first
          *            placeholder for the first argument matcher.
          * @param second
          *            placeholder for the second argument matcher.
          * @return <code>0</code>.
          

     ----------------------


          Method public static int and(int first, int second)    (AdditionalMatchers.java)

          
               * int argument that matches both given argument matchers.
               * <p>
               * See examples in javadoc for {@link AdditionalMatchers} class
               * 
               * @param first
               *            placeholder for the first argument matcher.
               * @param second
               *            placeholder for the second argument matcher.
               * @return <code>0</code>.
               

          ----------------------


               Method public static boolean and(boolean first, boolean second)    (AdditionalMatchers.java)

               
                    * boolean argument that matches both given matchers.
                    * <p>
                    * See examples in javadoc for {@link AdditionalMatchers} class
                    * 
                    * @param first
                    *            placeholder for the first argument matcher.
                    * @param second
                    *            placeholder for the second argument matcher.
                    * @return <code>false</code>.
                    

               ----------------------


                    Method public static boolean not(boolean first)    (AdditionalMatchers.java)

                    
                         * boolean argument that does not match the given argument matcher.
                         * <p>
                         * See examples in javadoc for {@link AdditionalMatchers} class
                         * 
                         * @param first
                         *            placeholder for the argument matcher.
                         * @return <code>false</code>.
                         

                    ----------------------


                         Method public static int not(int first)    (AdditionalMatchers.java)

                         
                              * int argument that does not match the given argument matcher.
                              * <p>
                              * See examples in javadoc for {@link AdditionalMatchers} class
                              * 
                              * @param first
                              *            placeholder for the argument matcher.
                              * @return <code>0</code>.
                              

                         ----------------------




Method public static float or(float first, float second)  (AdditionalMatchers.java)
     Method public static float and(float first, float second)  (AdditionalMatchers.java)
          Method public static int and(int first, int second)  (AdditionalMatchers.java)
               Method public static boolean and(boolean first, boolean second)  (AdditionalMatchers.java)
                    Method public static boolean not(boolean first)  (AdditionalMatchers.java)
                         Method public static int not(int first)  (AdditionalMatchers.java)

Method public static float or(float first, float second)    (AdditionalMatchers.java)


     * float argument that matches any of the given argument matchers.
     * <p>
     * See examples in javadoc for {@link AdditionalMatchers} class
     * 
     * @param first
     *            placeholder for the first argument matcher.
     * @param second
     *            placeholder for the second argument matcher.
     * @return <code>0</code>.
     

----------------------


     Method public static float and(float first, float second)    (AdditionalMatchers.java)

     
          * float argument that matches both given argument matchers.
          * <p>
          * See examples in javadoc for {@link AdditionalMatchers} class
          * 
          * @param first
          *            placeholder for the first argument matcher.
          * @param second
          *            placeholder for the second argument matcher.
          * @return <code>0</code>.
          

     ----------------------


          Method public static int and(int first, int second)    (AdditionalMatchers.java)

          
               * int argument that matches both given argument matchers.
               * <p>
               * See examples in javadoc for {@link AdditionalMatchers} class
               * 
               * @param first
               *            placeholder for the first argument matcher.
               * @param second
               *            placeholder for the second argument matcher.
               * @return <code>0</code>.
               

          ----------------------


               Method public static boolean and(boolean first, boolean second)    (AdditionalMatchers.java)

               
                    * boolean argument that matches both given matchers.
                    * <p>
                    * See examples in javadoc for {@link AdditionalMatchers} class
                    * 
                    * @param first
                    *            placeholder for the first argument matcher.
                    * @param second
                    *            placeholder for the second argument matcher.
                    * @return <code>false</code>.
                    

               ----------------------


                    Method public static boolean not(boolean first)    (AdditionalMatchers.java)

                    
                         * boolean argument that does not match the given argument matcher.
                         * <p>
                         * See examples in javadoc for {@link AdditionalMatchers} class
                         * 
                         * @param first
                         *            placeholder for the argument matcher.
                         * @return <code>false</code>.
                         

                    ----------------------


                         Method public static int not(int first)    (AdditionalMatchers.java)

                         
                              * int argument that does not match the given argument matcher.
                              * <p>
                              * See examples in javadoc for {@link AdditionalMatchers} class
                              * 
                              * @param first
                              *            placeholder for the argument matcher.
                              * @return <code>0</code>.
                              

                         ----------------------




Method public static long or(long first, long second)  (AdditionalMatchers.java)
     Method public static long and(long first, long second)  (AdditionalMatchers.java)
          Method public static int and(int first, int second)  (AdditionalMatchers.java)
               Method public static boolean and(boolean first, boolean second)  (AdditionalMatchers.java)
                    Method public static boolean not(boolean first)  (AdditionalMatchers.java)
                         Method public static int not(int first)  (AdditionalMatchers.java)

Method public static long or(long first, long second)    (AdditionalMatchers.java)


     * long argument that matches any of the given argument matchers.
     * <p>
     * See examples in javadoc for {@link AdditionalMatchers} class
     * 
     * @param first
     *            placeholder for the first argument matcher.
     * @param second
     *            placeholder for the second argument matcher.
     * @return <code>0</code>.
     

----------------------


     Method public static long and(long first, long second)    (AdditionalMatchers.java)

     
          * long argument that matches both given argument matchers.
          * <p>
          * See examples in javadoc for {@link AdditionalMatchers} class
          * 
          * @param first
          *            placeholder for the first argument matcher.
          * @param second
          *            placeholder for the second argument matcher.
          * @return <code>0</code>.
          

     ----------------------


          Method public static int and(int first, int second)    (AdditionalMatchers.java)

          
               * int argument that matches both given argument matchers.
               * <p>
               * See examples in javadoc for {@link AdditionalMatchers} class
               * 
               * @param first
               *            placeholder for the first argument matcher.
               * @param second
               *            placeholder for the second argument matcher.
               * @return <code>0</code>.
               

          ----------------------


               Method public static boolean and(boolean first, boolean second)    (AdditionalMatchers.java)

               
                    * boolean argument that matches both given matchers.
                    * <p>
                    * See examples in javadoc for {@link AdditionalMatchers} class
                    * 
                    * @param first
                    *            placeholder for the first argument matcher.
                    * @param second
                    *            placeholder for the second argument matcher.
                    * @return <code>false</code>.
                    

               ----------------------


                    Method public static boolean not(boolean first)    (AdditionalMatchers.java)

                    
                         * boolean argument that does not match the given argument matcher.
                         * <p>
                         * See examples in javadoc for {@link AdditionalMatchers} class
                         * 
                         * @param first
                         *            placeholder for the argument matcher.
                         * @return <code>false</code>.
                         

                    ----------------------


                         Method public static int not(int first)    (AdditionalMatchers.java)

                         
                              * int argument that does not match the given argument matcher.
                              * <p>
                              * See examples in javadoc for {@link AdditionalMatchers} class
                              * 
                              * @param first
                              *            placeholder for the argument matcher.
                              * @return <code>0</code>.
                              

                         ----------------------




Method public static char or(char first, char second)  (AdditionalMatchers.java)
     Method public static char and(char first, char second)  (AdditionalMatchers.java)
          Method public static int and(int first, int second)  (AdditionalMatchers.java)
               Method public static boolean and(boolean first, boolean second)  (AdditionalMatchers.java)
                    Method public static boolean not(boolean first)  (AdditionalMatchers.java)
                         Method public static int not(int first)  (AdditionalMatchers.java)

Method public static char or(char first, char second)    (AdditionalMatchers.java)


     * char argument that matches any of the given argument matchers.
     * <p>
     * See examples in javadoc for {@link AdditionalMatchers} class
     * 
     * @param first
     *            placeholder for the first argument matcher.
     * @param second
     *            placeholder for the second argument matcher.
     * @return <code>0</code>.
     

----------------------


     Method public static char and(char first, char second)    (AdditionalMatchers.java)

     
          * char argument that matches both given argument matchers.
          * <p>
          * See examples in javadoc for {@link AdditionalMatchers} class
          * 
          * @param first
          *            placeholder for the first argument matcher.
          * @param second
          *            placeholder for the second argument matcher.
          * @return <code>0</code>.
          

     ----------------------


          Method public static int and(int first, int second)    (AdditionalMatchers.java)

          
               * int argument that matches both given argument matchers.
               * <p>
               * See examples in javadoc for {@link AdditionalMatchers} class
               * 
               * @param first
               *            placeholder for the first argument matcher.
               * @param second
               *            placeholder for the second argument matcher.
               * @return <code>0</code>.
               

          ----------------------


               Method public static boolean and(boolean first, boolean second)    (AdditionalMatchers.java)

               
                    * boolean argument that matches both given matchers.
                    * <p>
                    * See examples in javadoc for {@link AdditionalMatchers} class
                    * 
                    * @param first
                    *            placeholder for the first argument matcher.
                    * @param second
                    *            placeholder for the second argument matcher.
                    * @return <code>false</code>.
                    

               ----------------------


                    Method public static boolean not(boolean first)    (AdditionalMatchers.java)

                    
                         * boolean argument that does not match the given argument matcher.
                         * <p>
                         * See examples in javadoc for {@link AdditionalMatchers} class
                         * 
                         * @param first
                         *            placeholder for the argument matcher.
                         * @return <code>false</code>.
                         

                    ----------------------


                         Method public static int not(int first)    (AdditionalMatchers.java)

                         
                              * int argument that does not match the given argument matcher.
                              * <p>
                              * See examples in javadoc for {@link AdditionalMatchers} class
                              * 
                              * @param first
                              *            placeholder for the argument matcher.
                              * @return <code>0</code>.
                              

                         ----------------------




Method public static byte or(byte first, byte second)  (AdditionalMatchers.java)
     Method public static byte and(byte first, byte second)  (AdditionalMatchers.java)
          Method public static int and(int first, int second)  (AdditionalMatchers.java)
               Method public static boolean and(boolean first, boolean second)  (AdditionalMatchers.java)
                    Method public static boolean not(boolean first)  (AdditionalMatchers.java)
                         Method public static int not(int first)  (AdditionalMatchers.java)

Method public static byte or(byte first, byte second)    (AdditionalMatchers.java)


     * byte argument that matches any of the given argument matchers.
     * <p>
     * See examples in javadoc for {@link AdditionalMatchers} class
     * 
     * @param first
     *            placeholder for the first argument matcher.
     * @param second
     *            placeholder for the second argument matcher.
     * @return <code>0</code>.
     

----------------------


     Method public static byte and(byte first, byte second)    (AdditionalMatchers.java)

     
          * byte argument that matches both given argument matchers.
          * <p>
          * See examples in javadoc for {@link AdditionalMatchers} class
          * 
          * @param first
          *            placeholder for the first argument matcher.
          * @param second
          *            placeholder for the second argument matcher.
          * @return <code>0</code>.
          

     ----------------------


          Method public static int and(int first, int second)    (AdditionalMatchers.java)

          
               * int argument that matches both given argument matchers.
               * <p>
               * See examples in javadoc for {@link AdditionalMatchers} class
               * 
               * @param first
               *            placeholder for the first argument matcher.
               * @param second
               *            placeholder for the second argument matcher.
               * @return <code>0</code>.
               

          ----------------------


               Method public static boolean and(boolean first, boolean second)    (AdditionalMatchers.java)

               
                    * boolean argument that matches both given matchers.
                    * <p>
                    * See examples in javadoc for {@link AdditionalMatchers} class
                    * 
                    * @param first
                    *            placeholder for the first argument matcher.
                    * @param second
                    *            placeholder for the second argument matcher.
                    * @return <code>false</code>.
                    

               ----------------------


                    Method public static boolean not(boolean first)    (AdditionalMatchers.java)

                    
                         * boolean argument that does not match the given argument matcher.
                         * <p>
                         * See examples in javadoc for {@link AdditionalMatchers} class
                         * 
                         * @param first
                         *            placeholder for the argument matcher.
                         * @return <code>false</code>.
                         

                    ----------------------


                         Method public static int not(int first)    (AdditionalMatchers.java)

                         
                              * int argument that does not match the given argument matcher.
                              * <p>
                              * See examples in javadoc for {@link AdditionalMatchers} class
                              * 
                              * @param first
                              *            placeholder for the argument matcher.
                              * @return <code>0</code>.
                              

                         ----------------------




Method public static T spy(T object)  (Mockito.java)
     Method MockSettings spiedInstance(Object instance)  (MockSettings.java)
          Method public static Stubber doCallRealMethod()  (Mockito.java)
               Field CALLS_REAL_METHODS  (Mockito.java)
                    Class CallsRealMethods  (CallsRealMethods.java)
          Method public static Stubber doReturn(Object toBeReturned)  (Mockito.java)

Method public static T spy(T object)    (Mockito.java)


     * Creates a spy of the real object. The spy calls <b>real</b> methods unless they are stubbed.
     * <p>
     * Real spies should be used <b>carefully and occasionally</b>, for example when dealing with legacy code.
     * <p>
     * As usual you are going to read <b>the partial mock warning</b>:
     * Object oriented programming tackles complexity by dividing the complexity into separate, specific, SRPy objects.
     * How does partial mock fit into this paradigm? Well, it just doesn't...
     * Partial mock usually means that the complexity has been moved to a different method on the same object.
     * In most cases, this is not the way you want to design your application.
     * <p>
     * However, there are rare cases when partial mocks come handy:
     * dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
     * However, I wouldn't use partial mocks for new, test-driven & well-designed code.
     * <p>
     * Example:
     *
     * <pre class="code"><code class="java">
     *   List list = new LinkedList();
     *   List spy = spy(list);
     *
     *   //optionally, you can stub out some methods:
     *   when(spy.size()).thenReturn(100);
     *
     *   //using the spy calls <b>real</b> methods
     *   spy.add("one");
     *   spy.add("two");
     *
     *   //prints "one" - the first element of a list
     *   System.out.println(spy.get(0));
     *
     *   //size() method was stubbed - 100 is printed
     *   System.out.println(spy.size());
     *
     *   //optionally, you can verify
     *   verify(spy).add("one");
     *   verify(spy).add("two");
     * </code></pre>
     *
     * <h4>Important gotcha on spying real objects!</h4>
     * <ol>
     * <li>Sometimes it's impossible or impractical to use {@link Mockito#when(Object)} for stubbing spies.
     * Therefore for spies it is recommended to always use <code>doReturn</code>|<code>Answer</code>|<code>Throw()</code>|<code>CallRealMethod</code>
     * family of methods for stubbing. Example:
     *
     * <pre class="code"><code class="java">
     *   List list = new LinkedList();
     *   List spy = spy(list);
     *
     *   //Impossible: real method is called so spy.get(0) throws IndexOutOfBoundsException (the list is yet empty)
     *   when(spy.get(0)).thenReturn("foo");
     *
     *   //You have to use doReturn() for stubbing
     *   doReturn("foo").when(spy).get(0);
     * </code></pre>
     * </li>
     *
     * <li>Mockito <b>*does not*</b> delegate calls to the passed real instance, instead it actually creates a copy of it.
     * So if you keep the real instance and interact with it, don't expect the spied to be aware of those interaction
     * and their effect on real instance state.
     * The corollary is that when an <b>*unstubbed*</b> method is called <b>*on the spy*</b> but <b>*not on the real instance*</b>,
     * you won't see any effects on the real instance.</li>
     *
     * <li>Watch out for final methods.
     * Mockito doesn't mock final methods so the bottom line is: when you spy on real objects + you try to stub a final method = trouble.
     * Also you won't be able to verify those method as well.
     * </li>
     * </ol>
     * <p>
     * See examples in javadoc for {@link Mockito} class
     *
     * <p>Note that the spy won't have any annotations of the spied type, because CGLIB won't rewrite them.
     * It may troublesome for code that rely on the spy to have these annotations.</p>
     *
     *
     * @param object
     *            to spy on
     * @return a spy of the real object
     

----------------------


     Method MockSettings spiedInstance(Object instance)    (MockSettings.java)

     
          * Specifies the instance to spy on. Makes sense only for spies/partial mocks.
          *
          * Sets the instance that will be spied. Actually copies the internal fields of the passed instance to the mock.
          * <p>
          * As usual you are going to read <b>the partial mock warning</b>:
          * Object oriented programming is more or less about tackling complexity by dividing the complexity into separate, specific, SRPy objects.
          * How does partial mock fit into this paradigm? Well, it just doesn't...
          * Partial mock usually means that the complexity has been moved to a different method on the same object.
          * In most cases, this is not the way you want to design your application.
          * <p>
          * However, there are rare cases when partial mocks come handy:
          * dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
          * However, I wouldn't use partial mocks for new, test-driven & well-designed code.
          * <p>
          * Enough warnings about partial mocks, see an example how spiedInstance() works:
          * <pre class="code"><code class="java">
          *   Foo foo = mock(Foo.class, withSettings().spiedInstance(fooInstance));
          *
          *   //Below does exactly the same:
          *   Foo foo = spy(fooInstance);
          * </code></pre>
          *
          * About stubbing for a partial mock, as it is a spy it will always call the real method, unless you use the
          * <code>doReturn</code>|<code>Throw</code>|<code>Answer</code>|<code>CallRealMethod</code> stubbing style. Example:
          *
          * <pre class="code"><code class="java">
          *   List list = new LinkedList();
          *   List spy = spy(list);
          *
          *   //Impossible: real method is called so spy.get(0) throws IndexOutOfBoundsException (the list is yet empty)
          *   when(spy.get(0)).thenReturn("foo");
          *
          *   //You have to use doReturn() for stubbing
          *   doReturn("foo").when(spy).get(0);
          * </code>
          *
          * @param instance to spy on
          * @return settings instance so that you can fluently specify other settings
          

     ----------------------


          Method public static Stubber doCallRealMethod()    (Mockito.java)

          
               * Use <code>doCallRealMethod()</code> when you want to call the real implementation of a method.
               * <p>
               * As usual you are going to read <b>the partial mock warning</b>:
               * Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
               * How does partial mock fit into this paradigm? Well, it just doesn't...
               * Partial mock usually means that the complexity has been moved to a different method on the same object.
               * In most cases, this is not the way you want to design your application.
               * <p>
               * However, there are rare cases when partial mocks come handy:
               * dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
               * However, I wouldn't use partial mocks for new, test-driven & well-designed code.
               * <p>
               * See also javadoc {@link Mockito#spy(Object)} to find out more about partial mocks.
               * <b>Mockito.spy() is a recommended way of creating partial mocks.</b>
               * The reason is it guarantees real methods are called against correctly constructed object because you're responsible for constructing the object passed to spy() method.
               * <p>
               * Example:
               * <pre class="code"><code class="java">
               *   Foo mock = mock(Foo.class);
               *   doCallRealMethod().when(mock).someVoidMethod();
               *
               *   // this will call the real implementation of Foo.someVoidMethod()
               *   mock.someVoidMethod();
               * </code></pre>
               * <p>
               * See examples in javadoc for {@link Mockito} class
               *
               * @return stubber - to select a method for stubbing
               * @since 1.9.5
               

          ----------------------


               Field CALLS_REAL_METHODS    (Mockito.java)

               
                    * Optional <code>Answer</code> to be used with {@link Mockito#mock(Class, Answer)}
                    * <p>
                    * {@link Answer} can be used to define the return values of unstubbed invocations.
                    * <p>
                    * This implementation can be helpful when working with legacy code.
                    * When this implementation is used, unstubbed methods will delegate to the real implementation.
                    * This is a way to create a partial mock object that calls real methods by default.
                    * <p>
                    * As usual you are going to read <b>the partial mock warning</b>:
                    * Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
                    * How does partial mock fit into this paradigm? Well, it just doesn't...
                    * Partial mock usually means that the complexity has been moved to a different method on the same object.
                    * In most cases, this is not the way you want to design your application.
                    * <p>
                    * However, there are rare cases when partial mocks come handy:
                    * dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
                    * However, I wouldn't use partial mocks for new, test-driven & well-designed code.
                    * <p>
                    * Example:
                    * <pre class="code"><code class="java">
                    * Foo mock = mock(Foo.class, CALLS_REAL_METHODS);
                    *
                    * // this calls the real implementation of Foo.getSomething()
                    * value = mock.getSomething();
                    *
                    * when(mock.getSomething()).thenReturn(fakeValue);
                    *
                    * // now fakeValue is returned
                    * value = mock.getSomething();
                    * </code></pre>
                    

               ----------------------


                    Class CallsRealMethods    (CallsRealMethods.java)

                    
                     * Optional Answer that adds partial mocking support
                     * <p>
                     * {@link Answer} can be used to define the return values of unstubbed invocations.
                     * <p>
                     * This implementation can be helpful when working with legacy code.
                     * When this implementation is used, unstubbed methods will delegate to the real implementation.
                     * This is a way to create a partial mock object that calls real methods by default.
                     * <p>
                     * As usual you are going to read <b>the partial mock warning</b>:
                     * Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
                     * How does partial mock fit into this paradigm? Well, it just doesn't... 
                     * Partial mock usually means that the complexity has been moved to a different method on the same object.
                     * In most cases, this is not the way you want to design your application.
                     * <p>
                     * However, there are rare cases when partial mocks come handy: 
                     * dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
                     * However, I wouldn't use partial mocks for new, test-driven & well-designed code.
                     * <p>
                     

                    ----------------------


          Method public static Stubber doReturn(Object toBeReturned)    (Mockito.java)

          
               * Use <code>doReturn()</code> in those rare occasions when you cannot use {@link Mockito#when(Object)}.
               * <p>
               * <b>Beware that {@link Mockito#when(Object)} is always recommended for stubbing because it is argument type-safe
               * and more readable</b> (especially when stubbing consecutive calls).
               * <p>
               * Here are those rare occasions when doReturn() comes handy:
               * <p>
               *
               * <ol>
               * <li>When spying real objects and calling real methods on a spy brings side effects
               *
               * <pre class="code"><code class="java">
               *   List list = new LinkedList();
               *   List spy = spy(list);
               *
               *   //Impossible: real method is called so spy.get(0) throws IndexOutOfBoundsException (the list is yet empty)
               *   when(spy.get(0)).thenReturn("foo");
               *
               *   //You have to use doReturn() for stubbing:
               *   doReturn("foo").when(spy).get(0);
               * </code></pre>
               * </li>
               *
               * <li>Overriding a previous exception-stubbing:
               * <pre class="code"><code class="java">
               *   when(mock.foo()).thenThrow(new RuntimeException());
               *
               *   //Impossible: the exception-stubbed foo() method is called so RuntimeException is thrown.
               *   when(mock.foo()).thenReturn("bar");
               *
               *   //You have to use doReturn() for stubbing:
               *   doReturn("bar").when(mock).foo();
               * </code></pre>
               * </li>
               * </ol>
               *
               * Above scenarios shows a tradeoff of Mockito's elegant syntax. Note that the scenarios are very rare, though.
               * Spying should be sporadic and overriding exception-stubbing is very rare. Not to mention that in general
               * overridding stubbing is a potential code smell that points out too much stubbing.
               * <p>
               * See examples in javadoc for {@link Mockito} class
               *
               * @param toBeReturned to be returned when the stubbed method is called
               * @return stubber - to select a method for stubbing
               

          ----------------------




Method public static Stubber doAnswer(Answer answer)  (Mockito.java)
     Method public static Stubber doThrow(Throwable... toBeThrown)  (Mockito.java)
          Method Stubber doThrow(Throwable... toBeThrown)  (Stubber.java)
               Method Stubber doReturn(Object toBeReturned)  (Stubber.java)
               Method Stubber doNothing()  (Stubber.java)
                    Method Stubber doCallRealMethod()  (Stubber.java)
               Method Stubber doAnswer(Answer answer)  (Stubber.java)

Method public static Stubber doAnswer(Answer answer)    (Mockito.java)


     * Use <code>doAnswer()</code> when you want to stub a void method with generic {@link Answer}.
     * <p>
     * Stubbing voids requires different approach from {@link Mockito#when(Object)} because the compiler does not like void methods inside brackets...
     * <p>
     * Example:
     *
     * <pre class="code"><code class="java">
     *  doAnswer(new Answer() {
     *      public Object answer(InvocationOnMock invocation) {
     *          Object[] args = invocation.getArguments();
     *          Mock mock = invocation.getMock();
     *          return null;
     *      }})
     *  .when(mock).someMethod();
     * </code></pre>
     * <p>
     * See examples in javadoc for {@link Mockito} class
     *
     * @param answer to answer when the stubbed method is called
     * @return stubber - to select a method for stubbing
     

----------------------


     Method public static Stubber doThrow(Throwable... toBeThrown)    (Mockito.java)

     
          * Use <code>doThrow()</code> when you want to stub the void method with an exception.
          * <p>
          * Stubbing voids requires different approach from {@link Mockito#when(Object)} because the compiler
          * does not like void methods inside brackets...
          * <p>
          * Example:
          *
          * <pre class="code"><code class="java">
          *   doThrow(new RuntimeException()).when(mock).someVoidMethod();
          * </code></pre>
          *
          * @param toBeThrown to be thrown when the stubbed method is called
          * @return stubber - to select a method for stubbing
          

     ----------------------


          Method Stubber doThrow(Throwable... toBeThrown)    (Stubber.java)

          
               * Use it for stubbing consecutive calls in {@link Mockito#doThrow(Throwable[])} style:
               * <pre class="code"><code class="java">
               *   doThrow(new RuntimeException("one")).
               *   doThrow(new RuntimeException("two"))
               *       .when(mock).someVoidMethod();
               * </code></pre>
               * See javadoc for {@link Mockito#doThrow(Throwable[])}
               * 
               * @param toBeThrown to be thrown when the stubbed method is called
               * @return stubber - to select a method for stubbing
               

          ----------------------


               Method Stubber doReturn(Object toBeReturned)    (Stubber.java)

               
                    * Use it for stubbing consecutive calls in {@link Mockito#doReturn(Object)} style.
                    * <p>
                    * See javadoc for {@link Mockito#doReturn(Object)}
                    * 
                    * @param toBeReturned to be returned when the stubbed method is called
                    * @return stubber - to select a method for stubbing
                    

               ----------------------


               Method Stubber doNothing()    (Stubber.java)

               
                    * Use it for stubbing consecutive calls in {@link Mockito#doNothing()} style:
                    * <pre class="code"><code class="java">
                    *   doNothing().
                    *   doThrow(new RuntimeException("two"))
                    *       .when(mock).someVoidMethod();
                    * </code></pre>
                    * See javadoc for {@link Mockito#doNothing()}
                    * 
                    * @return stubber - to select a method for stubbing
                    

               ----------------------


                    Method Stubber doCallRealMethod()    (Stubber.java)

                    
                         * Use it for stubbing consecutive calls in {@link Mockito#doCallRealMethod()} style.
                         * <p>
                         * See javadoc for {@link Mockito#doCallRealMethod()}
                         *
                         * @return stubber - to select a method for stubbing
                         

                    ----------------------


               Method Stubber doAnswer(Answer answer)    (Stubber.java)

               
                    * Use it for stubbing consecutive calls in {@link Mockito#doAnswer(Answer)} style:
                    * <pre class="code"><code class="java">
                    *   doAnswer(answerOne).
                    *   doAnswer(answerTwo)
                    *       .when(mock).someVoidMethod();
                    * </code></pre>
                    * See javadoc for {@link Mockito#doAnswer(Answer)}
                    * 
                    * @param answer to answer when the stubbed method is called
                    * @return stubber - to select a method for stubbing
                    

               ----------------------




Method public static Stubber doThrow(Class<? extends Throwable> toBeThrown)  (Mockito.java)
     Method public static Stubber doThrow(Throwable... toBeThrown)  (Mockito.java)
          Method Stubber doThrow(Throwable... toBeThrown)  (Stubber.java)
               Method Stubber doReturn(Object toBeReturned)  (Stubber.java)
               Method Stubber doNothing()  (Stubber.java)
                    Method Stubber doCallRealMethod()  (Stubber.java)
               Method Stubber doAnswer(Answer answer)  (Stubber.java)

Method public static Stubber doThrow(Class<? extends Throwable> toBeThrown)    (Mockito.java)


     * Use <code>doThrow()</code> when you want to stub the void method with an exception.
     * <p>
     * A new exception instance will be created for each method invocation.
     * <p>
     * Stubbing voids requires different approach from {@link Mockito#when(Object)} because the compiler
     * does not like void methods inside brackets...
     * <p>
     * Example:
     *
     * <pre class="code"><code class="java">
     *   doThrow(RuntimeException.class).when(mock).someVoidMethod();
     * </code></pre>
     *
     * @param toBeThrown to be thrown when the stubbed method is called
     * @return stubber - to select a method for stubbing
     * @since 2.0.0
     

----------------------


     Method public static Stubber doThrow(Throwable... toBeThrown)    (Mockito.java)

     
          * Use <code>doThrow()</code> when you want to stub the void method with an exception.
          * <p>
          * Stubbing voids requires different approach from {@link Mockito#when(Object)} because the compiler
          * does not like void methods inside brackets...
          * <p>
          * Example:
          *
          * <pre class="code"><code class="java">
          *   doThrow(new RuntimeException()).when(mock).someVoidMethod();
          * </code></pre>
          *
          * @param toBeThrown to be thrown when the stubbed method is called
          * @return stubber - to select a method for stubbing
          

     ----------------------


          Method Stubber doThrow(Throwable... toBeThrown)    (Stubber.java)

          
               * Use it for stubbing consecutive calls in {@link Mockito#doThrow(Throwable[])} style:
               * <pre class="code"><code class="java">
               *   doThrow(new RuntimeException("one")).
               *   doThrow(new RuntimeException("two"))
               *       .when(mock).someVoidMethod();
               * </code></pre>
               * See javadoc for {@link Mockito#doThrow(Throwable[])}
               * 
               * @param toBeThrown to be thrown when the stubbed method is called
               * @return stubber - to select a method for stubbing
               

          ----------------------


               Method Stubber doReturn(Object toBeReturned)    (Stubber.java)

               
                    * Use it for stubbing consecutive calls in {@link Mockito#doReturn(Object)} style.
                    * <p>
                    * See javadoc for {@link Mockito#doReturn(Object)}
                    * 
                    * @param toBeReturned to be returned when the stubbed method is called
                    * @return stubber - to select a method for stubbing
                    

               ----------------------


               Method Stubber doNothing()    (Stubber.java)

               
                    * Use it for stubbing consecutive calls in {@link Mockito#doNothing()} style:
                    * <pre class="code"><code class="java">
                    *   doNothing().
                    *   doThrow(new RuntimeException("two"))
                    *       .when(mock).someVoidMethod();
                    * </code></pre>
                    * See javadoc for {@link Mockito#doNothing()}
                    * 
                    * @return stubber - to select a method for stubbing
                    

               ----------------------


                    Method Stubber doCallRealMethod()    (Stubber.java)

                    
                         * Use it for stubbing consecutive calls in {@link Mockito#doCallRealMethod()} style.
                         * <p>
                         * See javadoc for {@link Mockito#doCallRealMethod()}
                         *
                         * @return stubber - to select a method for stubbing
                         

                    ----------------------


               Method Stubber doAnswer(Answer answer)    (Stubber.java)

               
                    * Use it for stubbing consecutive calls in {@link Mockito#doAnswer(Answer)} style:
                    * <pre class="code"><code class="java">
                    *   doAnswer(answerOne).
                    *   doAnswer(answerTwo)
                    *       .when(mock).someVoidMethod();
                    * </code></pre>
                    * See javadoc for {@link Mockito#doAnswer(Answer)}
                    * 
                    * @param answer to answer when the stubbed method is called
                    * @return stubber - to select a method for stubbing
                    

               ----------------------




Method public static T and(T first, T second)  (AdditionalMatchers.java)
     Method public static int and(int first, int second)  (AdditionalMatchers.java)
          Method public static boolean and(boolean first, boolean second)  (AdditionalMatchers.java)
               Method public static boolean not(boolean first)  (AdditionalMatchers.java)
                    Method public static int not(int first)  (AdditionalMatchers.java)
     Method public static T not(T first)  (AdditionalMatchers.java)
          Method public static int not(int first)  (AdditionalMatchers.java)

Method public static T and(T first, T second)    (AdditionalMatchers.java)


     * Object argument that matches both given argument matchers.
     * <p>
     * See examples in javadoc for {@link AdditionalMatchers} class
     * 
     * @param <T>
     *            the type of the object, it is passed through to prevent casts.
     * @param first
     *            placeholder for the first argument matcher.
     * @param second
     *            placeholder for the second argument matcher.
     * @return <code>null</code>.
     

----------------------


     Method public static int and(int first, int second)    (AdditionalMatchers.java)

     
          * int argument that matches both given argument matchers.
          * <p>
          * See examples in javadoc for {@link AdditionalMatchers} class
          * 
          * @param first
          *            placeholder for the first argument matcher.
          * @param second
          *            placeholder for the second argument matcher.
          * @return <code>0</code>.
          

     ----------------------


          Method public static boolean and(boolean first, boolean second)    (AdditionalMatchers.java)

          
               * boolean argument that matches both given matchers.
               * <p>
               * See examples in javadoc for {@link AdditionalMatchers} class
               * 
               * @param first
               *            placeholder for the first argument matcher.
               * @param second
               *            placeholder for the second argument matcher.
               * @return <code>false</code>.
               

          ----------------------


               Method public static boolean not(boolean first)    (AdditionalMatchers.java)

               
                    * boolean argument that does not match the given argument matcher.
                    * <p>
                    * See examples in javadoc for {@link AdditionalMatchers} class
                    * 
                    * @param first
                    *            placeholder for the argument matcher.
                    * @return <code>false</code>.
                    

               ----------------------


                    Method public static int not(int first)    (AdditionalMatchers.java)

                    
                         * int argument that does not match the given argument matcher.
                         * <p>
                         * See examples in javadoc for {@link AdditionalMatchers} class
                         * 
                         * @param first
                         *            placeholder for the argument matcher.
                         * @return <code>0</code>.
                         

                    ----------------------


     Method public static T not(T first)    (AdditionalMatchers.java)

     
          * Object argument that does not match the given argument matcher.
          * <p>
          * See examples in javadoc for {@link AdditionalMatchers} class
          * 
          * @param <T>
          *            the type of the object, it is passed through to prevent casts.
          * @param first
          *            placeholder for the argument matcher.
          * @return <code>null</code>.
          

     ----------------------


          Method public static int not(int first)    (AdditionalMatchers.java)

          
               * int argument that does not match the given argument matcher.
               * <p>
               * See examples in javadoc for {@link AdditionalMatchers} class
               * 
               * @param first
               *            placeholder for the argument matcher.
               * @return <code>0</code>.
               

          ----------------------




Method public static boolean or(boolean first, boolean second)  (AdditionalMatchers.java)
     Method public static int and(int first, int second)  (AdditionalMatchers.java)
          Method public static boolean and(boolean first, boolean second)  (AdditionalMatchers.java)
               Method public static boolean not(boolean first)  (AdditionalMatchers.java)
                    Method public static int not(int first)  (AdditionalMatchers.java)

Method public static boolean or(boolean first, boolean second)    (AdditionalMatchers.java)


     * boolean argument that matches any of the given argument matchers.
     * <p>
     * See examples in javadoc for {@link AdditionalMatchers} class
     * 
     * @param first
     *            placeholder for the first argument matcher.
     * @param second
     *            placeholder for the second argument matcher.
     * @return <code>false</code>.
     

----------------------


     Method public static int and(int first, int second)    (AdditionalMatchers.java)

     
          * int argument that matches both given argument matchers.
          * <p>
          * See examples in javadoc for {@link AdditionalMatchers} class
          * 
          * @param first
          *            placeholder for the first argument matcher.
          * @param second
          *            placeholder for the second argument matcher.
          * @return <code>0</code>.
          

     ----------------------


          Method public static boolean and(boolean first, boolean second)    (AdditionalMatchers.java)

          
               * boolean argument that matches both given matchers.
               * <p>
               * See examples in javadoc for {@link AdditionalMatchers} class
               * 
               * @param first
               *            placeholder for the first argument matcher.
               * @param second
               *            placeholder for the second argument matcher.
               * @return <code>false</code>.
               

          ----------------------


               Method public static boolean not(boolean first)    (AdditionalMatchers.java)

               
                    * boolean argument that does not match the given argument matcher.
                    * <p>
                    * See examples in javadoc for {@link AdditionalMatchers} class
                    * 
                    * @param first
                    *            placeholder for the argument matcher.
                    * @return <code>false</code>.
                    

               ----------------------


                    Method public static int not(int first)    (AdditionalMatchers.java)

                    
                         * int argument that does not match the given argument matcher.
                         * <p>
                         * See examples in javadoc for {@link AdditionalMatchers} class
                         * 
                         * @param first
                         *            placeholder for the argument matcher.
                         * @return <code>0</code>.
                         

                    ----------------------




Method public static int or(int first, int second)  (AdditionalMatchers.java)
     Method public static int and(int first, int second)  (AdditionalMatchers.java)
          Method public static boolean and(boolean first, boolean second)  (AdditionalMatchers.java)
               Method public static boolean not(boolean first)  (AdditionalMatchers.java)
                    Method public static int not(int first)  (AdditionalMatchers.java)

Method public static int or(int first, int second)    (AdditionalMatchers.java)


     * int argument that matches any of the given argument matchers.
     * <p>
     * See examples in javadoc for {@link AdditionalMatchers} class
     * 
     * @param first
     *            placeholder for the first argument matcher.
     * @param second
     *            placeholder for the second argument matcher.
     * @return <code>0</code>.
     

----------------------


     Method public static int and(int first, int second)    (AdditionalMatchers.java)

     
          * int argument that matches both given argument matchers.
          * <p>
          * See examples in javadoc for {@link AdditionalMatchers} class
          * 
          * @param first
          *            placeholder for the first argument matcher.
          * @param second
          *            placeholder for the second argument matcher.
          * @return <code>0</code>.
          

     ----------------------


          Method public static boolean and(boolean first, boolean second)    (AdditionalMatchers.java)

          
               * boolean argument that matches both given matchers.
               * <p>
               * See examples in javadoc for {@link AdditionalMatchers} class
               * 
               * @param first
               *            placeholder for the first argument matcher.
               * @param second
               *            placeholder for the second argument matcher.
               * @return <code>false</code>.
               

          ----------------------


               Method public static boolean not(boolean first)    (AdditionalMatchers.java)

               
                    * boolean argument that does not match the given argument matcher.
                    * <p>
                    * See examples in javadoc for {@link AdditionalMatchers} class
                    * 
                    * @param first
                    *            placeholder for the argument matcher.
                    * @return <code>false</code>.
                    

               ----------------------


                    Method public static int not(int first)    (AdditionalMatchers.java)

                    
                         * int argument that does not match the given argument matcher.
                         * <p>
                         * See examples in javadoc for {@link AdditionalMatchers} class
                         * 
                         * @param first
                         *            placeholder for the argument matcher.
                         * @return <code>0</code>.
                         

                    ----------------------




Method public static double and(double first, double second)  (AdditionalMatchers.java)
     Method public static int and(int first, int second)  (AdditionalMatchers.java)
          Method public static boolean and(boolean first, boolean second)  (AdditionalMatchers.java)
               Method public static boolean not(boolean first)  (AdditionalMatchers.java)
                    Method public static int not(int first)  (AdditionalMatchers.java)

Method public static double and(double first, double second)    (AdditionalMatchers.java)


     * double argument that matches both given argument matchers.
     * <p>
     * See examples in javadoc for {@link AdditionalMatchers} class
     * 
     * @param first
     *            placeholder for the first argument matcher.
     * @param second
     *            placeholder for the second argument matcher.
     * @return <code>0</code>.
     

----------------------


     Method public static int and(int first, int second)    (AdditionalMatchers.java)

     
          * int argument that matches both given argument matchers.
          * <p>
          * See examples in javadoc for {@link AdditionalMatchers} class
          * 
          * @param first
          *            placeholder for the first argument matcher.
          * @param second
          *            placeholder for the second argument matcher.
          * @return <code>0</code>.
          

     ----------------------


          Method public static boolean and(boolean first, boolean second)    (AdditionalMatchers.java)

          
               * boolean argument that matches both given matchers.
               * <p>
               * See examples in javadoc for {@link AdditionalMatchers} class
               * 
               * @param first
               *            placeholder for the first argument matcher.
               * @param second
               *            placeholder for the second argument matcher.
               * @return <code>false</code>.
               

          ----------------------


               Method public static boolean not(boolean first)    (AdditionalMatchers.java)

               
                    * boolean argument that does not match the given argument matcher.
                    * <p>
                    * See examples in javadoc for {@link AdditionalMatchers} class
                    * 
                    * @param first
                    *            placeholder for the argument matcher.
                    * @return <code>false</code>.
                    

               ----------------------


                    Method public static int not(int first)    (AdditionalMatchers.java)

                    
                         * int argument that does not match the given argument matcher.
                         * <p>
                         * See examples in javadoc for {@link AdditionalMatchers} class
                         * 
                         * @param first
                         *            placeholder for the argument matcher.
                         * @return <code>0</code>.
                         

                    ----------------------




Method public static float and(float first, float second)  (AdditionalMatchers.java)
     Method public static int and(int first, int second)  (AdditionalMatchers.java)
          Method public static boolean and(boolean first, boolean second)  (AdditionalMatchers.java)
               Method public static boolean not(boolean first)  (AdditionalMatchers.java)
                    Method public static int not(int first)  (AdditionalMatchers.java)

Method public static float and(float first, float second)    (AdditionalMatchers.java)


     * float argument that matches both given argument matchers.
     * <p>
     * See examples in javadoc for {@link AdditionalMatchers} class
     * 
     * @param first
     *            placeholder for the first argument matcher.
     * @param second
     *            placeholder for the second argument matcher.
     * @return <code>0</code>.
     

----------------------


     Method public static int and(int first, int second)    (AdditionalMatchers.java)

     
          * int argument that matches both given argument matchers.
          * <p>
          * See examples in javadoc for {@link AdditionalMatchers} class
          * 
          * @param first
          *            placeholder for the first argument matcher.
          * @param second
          *            placeholder for the second argument matcher.
          * @return <code>0</code>.
          

     ----------------------


          Method public static boolean and(boolean first, boolean second)    (AdditionalMatchers.java)

          
               * boolean argument that matches both given matchers.
               * <p>
               * See examples in javadoc for {@link AdditionalMatchers} class
               * 
               * @param first
               *            placeholder for the first argument matcher.
               * @param second
               *            placeholder for the second argument matcher.
               * @return <code>false</code>.
               

          ----------------------


               Method public static boolean not(boolean first)    (AdditionalMatchers.java)

               
                    * boolean argument that does not match the given argument matcher.
                    * <p>
                    * See examples in javadoc for {@link AdditionalMatchers} class
                    * 
                    * @param first
                    *            placeholder for the argument matcher.
                    * @return <code>false</code>.
                    

               ----------------------


                    Method public static int not(int first)    (AdditionalMatchers.java)

                    
                         * int argument that does not match the given argument matcher.
                         * <p>
                         * See examples in javadoc for {@link AdditionalMatchers} class
                         * 
                         * @param first
                         *            placeholder for the argument matcher.
                         * @return <code>0</code>.
                         

                    ----------------------




Method public static short and(short first, short second)  (AdditionalMatchers.java)
     Method public static int and(int first, int second)  (AdditionalMatchers.java)
          Method public static boolean and(boolean first, boolean second)  (AdditionalMatchers.java)
               Method public static boolean not(boolean first)  (AdditionalMatchers.java)
                    Method public static int not(int first)  (AdditionalMatchers.java)

Method public static short and(short first, short second)    (AdditionalMatchers.java)


     * short argument that matches both given argument matchers.
     * <p>
     * See examples in javadoc for {@link AdditionalMatchers} class
     * 
     * @param first
     *            placeholder for the first argument matcher.
     * @param second
     *            placeholder for the second argument matcher.
     * @return <code>0</code>.
     

----------------------


     Method public static int and(int first, int second)    (AdditionalMatchers.java)

     
          * int argument that matches both given argument matchers.
          * <p>
          * See examples in javadoc for {@link AdditionalMatchers} class
          * 
          * @param first
          *            placeholder for the first argument matcher.
          * @param second
          *            placeholder for the second argument matcher.
          * @return <code>0</code>.
          

     ----------------------


          Method public static boolean and(boolean first, boolean second)    (AdditionalMatchers.java)

          
               * boolean argument that matches both given matchers.
               * <p>
               * See examples in javadoc for {@link AdditionalMatchers} class
               * 
               * @param first
               *            placeholder for the first argument matcher.
               * @param second
               *            placeholder for the second argument matcher.
               * @return <code>false</code>.
               

          ----------------------


               Method public static boolean not(boolean first)    (AdditionalMatchers.java)

               
                    * boolean argument that does not match the given argument matcher.
                    * <p>
                    * See examples in javadoc for {@link AdditionalMatchers} class
                    * 
                    * @param first
                    *            placeholder for the argument matcher.
                    * @return <code>false</code>.
                    

               ----------------------


                    Method public static int not(int first)    (AdditionalMatchers.java)

                    
                         * int argument that does not match the given argument matcher.
                         * <p>
                         * See examples in javadoc for {@link AdditionalMatchers} class
                         * 
                         * @param first
                         *            placeholder for the argument matcher.
                         * @return <code>0</code>.
                         

                    ----------------------




Method public static byte and(byte first, byte second)  (AdditionalMatchers.java)
     Method public static int and(int first, int second)  (AdditionalMatchers.java)
          Method public static boolean and(boolean first, boolean second)  (AdditionalMatchers.java)
               Method public static boolean not(boolean first)  (AdditionalMatchers.java)
                    Method public static int not(int first)  (AdditionalMatchers.java)

Method public static byte and(byte first, byte second)    (AdditionalMatchers.java)


     * byte argument that matches both given argument matchers.
     * <p>
     * See examples in javadoc for {@link AdditionalMatchers} class
     * 
     * @param first
     *            placeholder for the first argument matcher.
     * @param second
     *            placeholder for the second argument matcher.
     * @return <code>0</code>.
     

----------------------


     Method public static int and(int first, int second)    (AdditionalMatchers.java)

     
          * int argument that matches both given argument matchers.
          * <p>
          * See examples in javadoc for {@link AdditionalMatchers} class
          * 
          * @param first
          *            placeholder for the first argument matcher.
          * @param second
          *            placeholder for the second argument matcher.
          * @return <code>0</code>.
          

     ----------------------


          Method public static boolean and(boolean first, boolean second)    (AdditionalMatchers.java)

          
               * boolean argument that matches both given matchers.
               * <p>
               * See examples in javadoc for {@link AdditionalMatchers} class
               * 
               * @param first
               *            placeholder for the first argument matcher.
               * @param second
               *            placeholder for the second argument matcher.
               * @return <code>false</code>.
               

          ----------------------


               Method public static boolean not(boolean first)    (AdditionalMatchers.java)

               
                    * boolean argument that does not match the given argument matcher.
                    * <p>
                    * See examples in javadoc for {@link AdditionalMatchers} class
                    * 
                    * @param first
                    *            placeholder for the argument matcher.
                    * @return <code>false</code>.
                    

               ----------------------


                    Method public static int not(int first)    (AdditionalMatchers.java)

                    
                         * int argument that does not match the given argument matcher.
                         * <p>
                         * See examples in javadoc for {@link AdditionalMatchers} class
                         * 
                         * @param first
                         *            placeholder for the argument matcher.
                         * @return <code>0</code>.
                         

                    ----------------------




Method public static char and(char first, char second)  (AdditionalMatchers.java)
     Method public static int and(int first, int second)  (AdditionalMatchers.java)
          Method public static boolean and(boolean first, boolean second)  (AdditionalMatchers.java)
               Method public static boolean not(boolean first)  (AdditionalMatchers.java)
                    Method public static int not(int first)  (AdditionalMatchers.java)

Method public static char and(char first, char second)    (AdditionalMatchers.java)


     * char argument that matches both given argument matchers.
     * <p>
     * See examples in javadoc for {@link AdditionalMatchers} class
     * 
     * @param first
     *            placeholder for the first argument matcher.
     * @param second
     *            placeholder for the second argument matcher.
     * @return <code>0</code>.
     

----------------------


     Method public static int and(int first, int second)    (AdditionalMatchers.java)

     
          * int argument that matches both given argument matchers.
          * <p>
          * See examples in javadoc for {@link AdditionalMatchers} class
          * 
          * @param first
          *            placeholder for the first argument matcher.
          * @param second
          *            placeholder for the second argument matcher.
          * @return <code>0</code>.
          

     ----------------------


          Method public static boolean and(boolean first, boolean second)    (AdditionalMatchers.java)

          
               * boolean argument that matches both given matchers.
               * <p>
               * See examples in javadoc for {@link AdditionalMatchers} class
               * 
               * @param first
               *            placeholder for the first argument matcher.
               * @param second
               *            placeholder for the second argument matcher.
               * @return <code>false</code>.
               

          ----------------------


               Method public static boolean not(boolean first)    (AdditionalMatchers.java)

               
                    * boolean argument that does not match the given argument matcher.
                    * <p>
                    * See examples in javadoc for {@link AdditionalMatchers} class
                    * 
                    * @param first
                    *            placeholder for the argument matcher.
                    * @return <code>false</code>.
                    

               ----------------------


                    Method public static int not(int first)    (AdditionalMatchers.java)

                    
                         * int argument that does not match the given argument matcher.
                         * <p>
                         * See examples in javadoc for {@link AdditionalMatchers} class
                         * 
                         * @param first
                         *            placeholder for the argument matcher.
                         * @return <code>0</code>.
                         

                    ----------------------




Method public static long and(long first, long second)  (AdditionalMatchers.java)
     Method public static int and(int first, int second)  (AdditionalMatchers.java)
          Method public static boolean and(boolean first, boolean second)  (AdditionalMatchers.java)
               Method public static boolean not(boolean first)  (AdditionalMatchers.java)
                    Method public static int not(int first)  (AdditionalMatchers.java)

Method public static long and(long first, long second)    (AdditionalMatchers.java)


     * long argument that matches both given argument matchers.
     * <p>
     * See examples in javadoc for {@link AdditionalMatchers} class
     * 
     * @param first
     *            placeholder for the first argument matcher.
     * @param second
     *            placeholder for the second argument matcher.
     * @return <code>0</code>.
     

----------------------


     Method public static int and(int first, int second)    (AdditionalMatchers.java)

     
          * int argument that matches both given argument matchers.
          * <p>
          * See examples in javadoc for {@link AdditionalMatchers} class
          * 
          * @param first
          *            placeholder for the first argument matcher.
          * @param second
          *            placeholder for the second argument matcher.
          * @return <code>0</code>.
          

     ----------------------


          Method public static boolean and(boolean first, boolean second)    (AdditionalMatchers.java)

          
               * boolean argument that matches both given matchers.
               * <p>
               * See examples in javadoc for {@link AdditionalMatchers} class
               * 
               * @param first
               *            placeholder for the first argument matcher.
               * @param second
               *            placeholder for the second argument matcher.
               * @return <code>false</code>.
               

          ----------------------


               Method public static boolean not(boolean first)    (AdditionalMatchers.java)

               
                    * boolean argument that does not match the given argument matcher.
                    * <p>
                    * See examples in javadoc for {@link AdditionalMatchers} class
                    * 
                    * @param first
                    *            placeholder for the argument matcher.
                    * @return <code>false</code>.
                    

               ----------------------


                    Method public static int not(int first)    (AdditionalMatchers.java)

                    
                         * int argument that does not match the given argument matcher.
                         * <p>
                         * See examples in javadoc for {@link AdditionalMatchers} class
                         * 
                         * @param first
                         *            placeholder for the argument matcher.
                         * @return <code>0</code>.
                         

                    ----------------------




Method public static OngoingStubbing<T> when(T methodCall)  (Mockito.java)
     Method public static DeprecatedOngoingStubbing<T> stub(T methodCall)  (Mockito.java)
          Interface DeprecatedOngoingStubbing  (DeprecatedOngoingStubbing.java)
               Interface VoidMethodStubbable  (VoidMethodStubbable.java)

Method public static OngoingStubbing<T> when(T methodCall)    (Mockito.java)


     * Enables stubbing methods. Use it when you want the mock to return particular value when particular method is called.
     * <p>
     * Simply put: "<b>When</b> the x method is called <b>then</b> return y".
     * <p>
     * <b>when() is a successor of deprecated {@link Mockito#stub(Object)}</b>
     * <p>
     * Examples:
     *
     * <pre class="code"><code class="java">
     * <b>when</b>(mock.someMethod()).<b>thenReturn</b>(10);
     *
     * //you can use flexible argument matchers, e.g:
     * when(mock.someMethod(<b>anyString()</b>)).thenReturn(10);
     *
     * //setting exception to be thrown:
     * when(mock.someMethod("some arg")).thenThrow(new RuntimeException());
     *
     * //you can set different behavior for consecutive method calls.
     * //Last stubbing (e.g: thenReturn("foo")) determines the behavior of further consecutive calls.
     * when(mock.someMethod("some arg"))
     *  .thenThrow(new RuntimeException())
     *  .thenReturn("foo");
     *
     * //Alternative, shorter version for consecutive stubbing:
     * when(mock.someMethod("some arg"))
     *  .thenReturn("one", "two");
     * //is the same as:
     * when(mock.someMethod("some arg"))
     *  .thenReturn("one")
     *  .thenReturn("two");
     *
     * //shorter version for consecutive method calls throwing exceptions:
     * when(mock.someMethod("some arg"))
     *  .thenThrow(new RuntimeException(), new NullPointerException();
     *
     * </code></pre>
     *
     * For stubbing void methods with throwables see: {@link Mockito#doThrow(Throwable...)}
     * <p>
     * Stubbing can be overridden: for example common stubbing can go to fixture
     * setup but the test methods can override it.
     * Please note that overridding stubbing is a potential code smell that points out too much stubbing.
     * <p>
     * Once stubbed, the method will always return stubbed value regardless
     * of how many times it is called.
     * <p>
     * Last stubbing is more important - when you stubbed the same method with
     * the same arguments many times.
     * <p>
     * Although it is possible to verify a stubbed invocation, usually <b>it's just redundant</b>.
     * Let's say you've stubbed <code>foo.bar()</code>.
     * If your code cares what <code>foo.bar()</code> returns then something else breaks(often before even <code>verify()</code> gets executed).
     * If your code doesn't care what <code>get(0)</code> returns then it should not be stubbed.
     * Not convinced? See <a href="http://monkeyisland.pl/2008/04/26/asking-and-telling">here</a>.
     *
     * <p>
     * See examples in javadoc for {@link Mockito} class
     * @param methodCall method to be stubbed
     * @return OngoingStubbing object used to stub fluently.
     *         <strong>Do not</strong> create a reference to this returned object.
     

----------------------


     Method public static DeprecatedOngoingStubbing<T> stub(T methodCall)    (Mockito.java)

     
          * Stubs a method call with return value or an exception. E.g:
          *
          * <pre class="code"><code class="java">
          * stub(mock.someMethod()).toReturn(10);
          *
          * //you can use flexible argument matchers, e.g:
          * stub(mock.someMethod(<b>anyString()</b>)).toReturn(10);
          *
          * //setting exception to be thrown:
          * stub(mock.someMethod("some arg")).toThrow(new RuntimeException());
          *
          * //you can stub with different behavior for consecutive method calls.
          * //Last stubbing (e.g: toReturn("foo")) determines the behavior for further consecutive calls.
          * stub(mock.someMethod("some arg"))
          *  .toThrow(new RuntimeException())
          *  .toReturn("foo");
          * </code></pre>
          * <p>
          * Some users find stub() confusing therefore {@link Mockito#when(Object)} is recommended over stub()
          * <pre class="code"><code class="java">
          *   //Instead of:
          *   stub(mock.count()).toReturn(10);
          *
          *   //You can do:
          *   when(mock.count()).thenReturn(10);
          * </code></pre>
          * For stubbing void methods with throwables see: {@link Mockito#doThrow(Throwable...)}
          * <p>
          * Stubbing can be overridden: for example common stubbing can go to fixture
          * setup but the test methods can override it.
          * Please note that overridding stubbing is a potential code smell that points out too much stubbing.
          * <p>
          * Once stubbed, the method will always return stubbed value regardless
          * of how many times it is called.
          * <p>
          * Last stubbing is more important - when you stubbed the same method with
          * the same arguments many times.
          * <p>
          * Although it is possible to verify a stubbed invocation, usually <b>it's just redundant</b>.
          * Let's say you've stubbed foo.bar().
          * If your code cares what foo.bar() returns then something else breaks(often before even verify() gets executed).
          * If your code doesn't care what get(0) returns then it should not be stubbed.
          * Not convinced? See <a href="http://monkeyisland.pl/2008/04/26/asking-and-telling">here</a>.
          *
          * @param methodCall
          *            method call
          * @return DeprecatedOngoingStubbing object to set stubbed value/exception
          

     ----------------------


          Interface DeprecatedOngoingStubbing    (DeprecatedOngoingStubbing.java)

          
           * Stubs a method call with return value or an exception. E.g:
           *
           * <pre class="code"><code class="java">
           * stub(mock.someMethod()).toReturn(10);
           *
           * //you can use flexible argument matchers, e.g:
           * stub(mock.someMethod(<b>anyString()</b>)).toReturn(10);
           *
           * //setting exception to be thrown:
           * stub(mock.someMethod("some arg")).toThrow(new RuntimeException());
           *
           * //you can stub with different behavior for consecutive method calls.
           * //Last stubbing (e.g: toReturn("foo")) determines the behavior for further consecutive calls.
           * stub(mock.someMethod("some arg"))
           *  .toThrow(new RuntimeException())
           *  .toReturn("foo");
           *
           * </code></pre>
           *
           * See examples in javadoc for {@link Mockito#stub}
           

          ----------------------


               Interface VoidMethodStubbable    (VoidMethodStubbable.java)

               
                * Stubs void method with an exception. E.g:
                *
                * <pre class="code"><code class="java">
                * stubVoid(mock).toThrow(new RuntimeException()).on().someMethod();
                *
                * //you can stub with different behavior for consecutive method calls.
                * //Last stubbing (e.g: toReturn()) determines the behavior for further consecutive calls.
                * stubVoid(mock)
                *  .toThrow(new RuntimeException())
                *  .toReturn()
                *  .on().someMethod();
                * </code></pre>
                *
                * See examples in javadoc for {@link Mockito#stubVoid}
                

               ----------------------




Method MockSettings spiedInstance(Object instance)  (MockSettings.java)
     Method public static Stubber doCallRealMethod()  (Mockito.java)
          Field CALLS_REAL_METHODS  (Mockito.java)
               Class CallsRealMethods  (CallsRealMethods.java)
     Method public static Stubber doReturn(Object toBeReturned)  (Mockito.java)

Method MockSettings spiedInstance(Object instance)    (MockSettings.java)


     * Specifies the instance to spy on. Makes sense only for spies/partial mocks.
     *
     * Sets the instance that will be spied. Actually copies the internal fields of the passed instance to the mock.
     * <p>
     * As usual you are going to read <b>the partial mock warning</b>:
     * Object oriented programming is more or less about tackling complexity by dividing the complexity into separate, specific, SRPy objects.
     * How does partial mock fit into this paradigm? Well, it just doesn't...
     * Partial mock usually means that the complexity has been moved to a different method on the same object.
     * In most cases, this is not the way you want to design your application.
     * <p>
     * However, there are rare cases when partial mocks come handy:
     * dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
     * However, I wouldn't use partial mocks for new, test-driven & well-designed code.
     * <p>
     * Enough warnings about partial mocks, see an example how spiedInstance() works:
     * <pre class="code"><code class="java">
     *   Foo foo = mock(Foo.class, withSettings().spiedInstance(fooInstance));
     *
     *   //Below does exactly the same:
     *   Foo foo = spy(fooInstance);
     * </code></pre>
     *
     * About stubbing for a partial mock, as it is a spy it will always call the real method, unless you use the
     * <code>doReturn</code>|<code>Throw</code>|<code>Answer</code>|<code>CallRealMethod</code> stubbing style. Example:
     *
     * <pre class="code"><code class="java">
     *   List list = new LinkedList();
     *   List spy = spy(list);
     *
     *   //Impossible: real method is called so spy.get(0) throws IndexOutOfBoundsException (the list is yet empty)
     *   when(spy.get(0)).thenReturn("foo");
     *
     *   //You have to use doReturn() for stubbing
     *   doReturn("foo").when(spy).get(0);
     * </code>
     *
     * @param instance to spy on
     * @return settings instance so that you can fluently specify other settings
     

----------------------


     Method public static Stubber doCallRealMethod()    (Mockito.java)

     
          * Use <code>doCallRealMethod()</code> when you want to call the real implementation of a method.
          * <p>
          * As usual you are going to read <b>the partial mock warning</b>:
          * Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
          * How does partial mock fit into this paradigm? Well, it just doesn't...
          * Partial mock usually means that the complexity has been moved to a different method on the same object.
          * In most cases, this is not the way you want to design your application.
          * <p>
          * However, there are rare cases when partial mocks come handy:
          * dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
          * However, I wouldn't use partial mocks for new, test-driven & well-designed code.
          * <p>
          * See also javadoc {@link Mockito#spy(Object)} to find out more about partial mocks.
          * <b>Mockito.spy() is a recommended way of creating partial mocks.</b>
          * The reason is it guarantees real methods are called against correctly constructed object because you're responsible for constructing the object passed to spy() method.
          * <p>
          * Example:
          * <pre class="code"><code class="java">
          *   Foo mock = mock(Foo.class);
          *   doCallRealMethod().when(mock).someVoidMethod();
          *
          *   // this will call the real implementation of Foo.someVoidMethod()
          *   mock.someVoidMethod();
          * </code></pre>
          * <p>
          * See examples in javadoc for {@link Mockito} class
          *
          * @return stubber - to select a method for stubbing
          * @since 1.9.5
          

     ----------------------


          Field CALLS_REAL_METHODS    (Mockito.java)

          
               * Optional <code>Answer</code> to be used with {@link Mockito#mock(Class, Answer)}
               * <p>
               * {@link Answer} can be used to define the return values of unstubbed invocations.
               * <p>
               * This implementation can be helpful when working with legacy code.
               * When this implementation is used, unstubbed methods will delegate to the real implementation.
               * This is a way to create a partial mock object that calls real methods by default.
               * <p>
               * As usual you are going to read <b>the partial mock warning</b>:
               * Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
               * How does partial mock fit into this paradigm? Well, it just doesn't...
               * Partial mock usually means that the complexity has been moved to a different method on the same object.
               * In most cases, this is not the way you want to design your application.
               * <p>
               * However, there are rare cases when partial mocks come handy:
               * dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
               * However, I wouldn't use partial mocks for new, test-driven & well-designed code.
               * <p>
               * Example:
               * <pre class="code"><code class="java">
               * Foo mock = mock(Foo.class, CALLS_REAL_METHODS);
               *
               * // this calls the real implementation of Foo.getSomething()
               * value = mock.getSomething();
               *
               * when(mock.getSomething()).thenReturn(fakeValue);
               *
               * // now fakeValue is returned
               * value = mock.getSomething();
               * </code></pre>
               

          ----------------------


               Class CallsRealMethods    (CallsRealMethods.java)

               
                * Optional Answer that adds partial mocking support
                * <p>
                * {@link Answer} can be used to define the return values of unstubbed invocations.
                * <p>
                * This implementation can be helpful when working with legacy code.
                * When this implementation is used, unstubbed methods will delegate to the real implementation.
                * This is a way to create a partial mock object that calls real methods by default.
                * <p>
                * As usual you are going to read <b>the partial mock warning</b>:
                * Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
                * How does partial mock fit into this paradigm? Well, it just doesn't... 
                * Partial mock usually means that the complexity has been moved to a different method on the same object.
                * In most cases, this is not the way you want to design your application.
                * <p>
                * However, there are rare cases when partial mocks come handy: 
                * dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
                * However, I wouldn't use partial mocks for new, test-driven & well-designed code.
                * <p>
                

               ----------------------


     Method public static Stubber doReturn(Object toBeReturned)    (Mockito.java)

     
          * Use <code>doReturn()</code> in those rare occasions when you cannot use {@link Mockito#when(Object)}.
          * <p>
          * <b>Beware that {@link Mockito#when(Object)} is always recommended for stubbing because it is argument type-safe
          * and more readable</b> (especially when stubbing consecutive calls).
          * <p>
          * Here are those rare occasions when doReturn() comes handy:
          * <p>
          *
          * <ol>
          * <li>When spying real objects and calling real methods on a spy brings side effects
          *
          * <pre class="code"><code class="java">
          *   List list = new LinkedList();
          *   List spy = spy(list);
          *
          *   //Impossible: real method is called so spy.get(0) throws IndexOutOfBoundsException (the list is yet empty)
          *   when(spy.get(0)).thenReturn("foo");
          *
          *   //You have to use doReturn() for stubbing:
          *   doReturn("foo").when(spy).get(0);
          * </code></pre>
          * </li>
          *
          * <li>Overriding a previous exception-stubbing:
          * <pre class="code"><code class="java">
          *   when(mock.foo()).thenThrow(new RuntimeException());
          *
          *   //Impossible: the exception-stubbed foo() method is called so RuntimeException is thrown.
          *   when(mock.foo()).thenReturn("bar");
          *
          *   //You have to use doReturn() for stubbing:
          *   doReturn("bar").when(mock).foo();
          * </code></pre>
          * </li>
          * </ol>
          *
          * Above scenarios shows a tradeoff of Mockito's elegant syntax. Note that the scenarios are very rare, though.
          * Spying should be sporadic and overriding exception-stubbing is very rare. Not to mention that in general
          * overridding stubbing is a potential code smell that points out too much stubbing.
          * <p>
          * See examples in javadoc for {@link Mockito} class
          *
          * @param toBeReturned to be returned when the stubbed method is called
          * @return stubber - to select a method for stubbing
          

     ----------------------




Method OngoingStubbing<T> thenCallRealMethod()  (OngoingStubbing.java)
     Method public static Stubber doCallRealMethod()  (Mockito.java)
          Field CALLS_REAL_METHODS  (Mockito.java)
               Class CallsRealMethods  (CallsRealMethods.java)

Method OngoingStubbing<T> thenCallRealMethod()    (OngoingStubbing.java)

     
     * Sets the real implementation to be called when the method is called on a mock object.
     * <p>
     * As usual you are going to read <b>the partial mock warning</b>:
     * Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
     * How does partial mock fit into this paradigm? Well, it just doesn't... 
     * Partial mock usually means that the complexity has been moved to a different method on the same object.
     * In most cases, this is not the way you want to design your application.
     * <p>
     * However, there are rare cases when partial mocks come handy: 
     * dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
     * However, I wouldn't use partial mocks for new, test-driven & well-designed code.
     * <pre class="code"><code class="java">
     *   // someMethod() must be safe (e.g. doesn't throw, doesn't have dependencies to the object state, etc.)
     *   // if it isn't safe then you will have trouble stubbing it using this api. Use Mockito.doCallRealMethod() instead. 
     *   when(mock.someMethod()).thenCallRealMethod();
     *   
     *   // calls real method:
     *   mock.someMethod();
     *   
     * </code></pre>
     * See also javadoc {@link Mockito#spy(Object)} to find out more about partial mocks. 
     * <b>Mockito.spy() is a recommended way of creating partial mocks.</b> 
     * The reason is it guarantees real methods are called against correctly constructed object because you're responsible for constructing the object passed to spy() method.
     * <p>
     * See examples in javadoc for {@link Mockito#when}
     *
     * @return iOngoingStubbing object that allows stubbing consecutive calls
     

----------------------


     Method public static Stubber doCallRealMethod()    (Mockito.java)

     
          * Use <code>doCallRealMethod()</code> when you want to call the real implementation of a method.
          * <p>
          * As usual you are going to read <b>the partial mock warning</b>:
          * Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
          * How does partial mock fit into this paradigm? Well, it just doesn't...
          * Partial mock usually means that the complexity has been moved to a different method on the same object.
          * In most cases, this is not the way you want to design your application.
          * <p>
          * However, there are rare cases when partial mocks come handy:
          * dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
          * However, I wouldn't use partial mocks for new, test-driven & well-designed code.
          * <p>
          * See also javadoc {@link Mockito#spy(Object)} to find out more about partial mocks.
          * <b>Mockito.spy() is a recommended way of creating partial mocks.</b>
          * The reason is it guarantees real methods are called against correctly constructed object because you're responsible for constructing the object passed to spy() method.
          * <p>
          * Example:
          * <pre class="code"><code class="java">
          *   Foo mock = mock(Foo.class);
          *   doCallRealMethod().when(mock).someVoidMethod();
          *
          *   // this will call the real implementation of Foo.someVoidMethod()
          *   mock.someVoidMethod();
          * </code></pre>
          * <p>
          * See examples in javadoc for {@link Mockito} class
          *
          * @return stubber - to select a method for stubbing
          * @since 1.9.5
          

     ----------------------


          Field CALLS_REAL_METHODS    (Mockito.java)

          
               * Optional <code>Answer</code> to be used with {@link Mockito#mock(Class, Answer)}
               * <p>
               * {@link Answer} can be used to define the return values of unstubbed invocations.
               * <p>
               * This implementation can be helpful when working with legacy code.
               * When this implementation is used, unstubbed methods will delegate to the real implementation.
               * This is a way to create a partial mock object that calls real methods by default.
               * <p>
               * As usual you are going to read <b>the partial mock warning</b>:
               * Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
               * How does partial mock fit into this paradigm? Well, it just doesn't...
               * Partial mock usually means that the complexity has been moved to a different method on the same object.
               * In most cases, this is not the way you want to design your application.
               * <p>
               * However, there are rare cases when partial mocks come handy:
               * dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
               * However, I wouldn't use partial mocks for new, test-driven & well-designed code.
               * <p>
               * Example:
               * <pre class="code"><code class="java">
               * Foo mock = mock(Foo.class, CALLS_REAL_METHODS);
               *
               * // this calls the real implementation of Foo.getSomething()
               * value = mock.getSomething();
               *
               * when(mock.getSomething()).thenReturn(fakeValue);
               *
               * // now fakeValue is returned
               * value = mock.getSomething();
               * </code></pre>
               

          ----------------------


               Class CallsRealMethods    (CallsRealMethods.java)

               
                * Optional Answer that adds partial mocking support
                * <p>
                * {@link Answer} can be used to define the return values of unstubbed invocations.
                * <p>
                * This implementation can be helpful when working with legacy code.
                * When this implementation is used, unstubbed methods will delegate to the real implementation.
                * This is a way to create a partial mock object that calls real methods by default.
                * <p>
                * As usual you are going to read <b>the partial mock warning</b>:
                * Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
                * How does partial mock fit into this paradigm? Well, it just doesn't... 
                * Partial mock usually means that the complexity has been moved to a different method on the same object.
                * In most cases, this is not the way you want to design your application.
                * <p>
                * However, there are rare cases when partial mocks come handy: 
                * dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
                * However, I wouldn't use partial mocks for new, test-driven & well-designed code.
                * <p>
                

               ----------------------




Method public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass, String[] excludeFields)  (EqualsBuilder.java)
     Method public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass)  (EqualsBuilder.java)
          Method public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients)  (EqualsBuilder.java)
               Method public static boolean reflectionEquals(Object lhs, Object rhs)  (EqualsBuilder.java)

Method public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass, String[] excludeFields)    (EqualsBuilder.java)


     * <p>This method uses reflection to determine if the two <code>Object</code>s
     * are equal.</p>
     *
     * <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private
     * fields. This means that it will throw a security exception if run under
     * a security manager, if the permissions are not set up correctly. It is also
     * not as efficient as testing explicitly.</p>
     *
     * <p>If the testTransients parameter is set to <code>true</code>, transient
     * members will be tested, otherwise they are ignored, as they are likely
     * derived fields, and not part of the value of the <code>Object</code>.</p>
     *
     * <p>Static fields will not be included. Superclass fields will be appended
     * up to and including the specified superclass. A null superclass is treated
     * as java.lang.Object.</p>
     *
     * @param lhs  <code>this</code> object
     * @param rhs  the other object
     * @param testTransients  whether to include transient fields
     * @param reflectUpToClass  the superclass to reflect up to (inclusive),
     *  may be <code>null</code>
     * @param excludeFields  array of field names to exclude from testing
     * @return <code>true</code> if the two Objects have tested equals.
     * @since 2.0
     

----------------------


     Method public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass)    (EqualsBuilder.java)

     
          * <p>This method uses reflection to determine if the two <code>Object</code>s
          * are equal.</p>
          *
          * <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private
          * fields. This means that it will throw a security exception if run under
          * a security manager, if the permissions are not set up correctly. It is also
          * not as efficient as testing explicitly.</p>
          *
          * <p>If the testTransients parameter is set to <code>true</code>, transient
          * members will be tested, otherwise they are ignored, as they are likely
          * derived fields, and not part of the value of the <code>Object</code>.</p>
          *
          * <p>Static fields will not be included. Superclass fields will be appended
          * up to and including the specified superclass. A null superclass is treated
          * as java.lang.Object.</p>
          *
          * @param lhs  <code>this</code> object
          * @param rhs  the other object
          * @param testTransients  whether to include transient fields
          * @param reflectUpToClass  the superclass to reflect up to (inclusive),
          *  may be <code>null</code>
          * @return <code>true</code> if the two Objects have tested equals.
          * @since 2.0
          

     ----------------------


          Method public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients)    (EqualsBuilder.java)

          
               * <p>This method uses reflection to determine if the two <code>Object</code>s
               * are equal.</p>
               *
               * <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private
               * fields. This means that it will throw a security exception if run under
               * a security manager, if the permissions are not set up correctly. It is also
               * not as efficient as testing explicitly.</p>
               *
               * <p>If the TestTransients parameter is set to <code>true</code>, transient
               * members will be tested, otherwise they are ignored, as they are likely
               * derived fields, and not part of the value of the <code>Object</code>.</p>
               *
               * <p>Static fields will not be tested. Superclass fields will be included.</p>
               *
               * @param lhs  <code>this</code> object
               * @param rhs  the other object
               * @param testTransients  whether to include transient fields
               * @return <code>true</code> if the two Objects have tested equals.
               

          ----------------------


               Method public static boolean reflectionEquals(Object lhs, Object rhs)    (EqualsBuilder.java)

               
                    * <p>This method uses reflection to determine if the two <code>Object</code>s
                    * are equal.</p>
                    *
                    * <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private
                    * fields. This means that it will throw a security exception if run under
                    * a security manager, if the permissions are not set up correctly. It is also
                    * not as efficient as testing explicitly.</p>
                    *
                    * <p>Transient members will be not be tested, as they are likely derived
                    * fields, and not part of the value of the Object.</p>
                    *
                    * <p>Static fields will not be tested. Superclass fields will be included.</p>
                    *
                    * @param lhs  <code>this</code> object
                    * @param rhs  the other object
                    * @return <code>true</code> if the two Objects have tested equals.
                    

               ----------------------




Method public static Stubber doThrow(Throwable... toBeThrown)  (Mockito.java)
     Method Stubber doThrow(Throwable... toBeThrown)  (Stubber.java)
          Method Stubber doReturn(Object toBeReturned)  (Stubber.java)
          Method Stubber doNothing()  (Stubber.java)
               Method Stubber doCallRealMethod()  (Stubber.java)
          Method Stubber doAnswer(Answer answer)  (Stubber.java)

Method public static Stubber doThrow(Throwable... toBeThrown)    (Mockito.java)


     * Use <code>doThrow()</code> when you want to stub the void method with an exception.
     * <p>
     * Stubbing voids requires different approach from {@link Mockito#when(Object)} because the compiler
     * does not like void methods inside brackets...
     * <p>
     * Example:
     *
     * <pre class="code"><code class="java">
     *   doThrow(new RuntimeException()).when(mock).someVoidMethod();
     * </code></pre>
     *
     * @param toBeThrown to be thrown when the stubbed method is called
     * @return stubber - to select a method for stubbing
     

----------------------


     Method Stubber doThrow(Throwable... toBeThrown)    (Stubber.java)

     
          * Use it for stubbing consecutive calls in {@link Mockito#doThrow(Throwable[])} style:
          * <pre class="code"><code class="java">
          *   doThrow(new RuntimeException("one")).
          *   doThrow(new RuntimeException("two"))
          *       .when(mock).someVoidMethod();
          * </code></pre>
          * See javadoc for {@link Mockito#doThrow(Throwable[])}
          * 
          * @param toBeThrown to be thrown when the stubbed method is called
          * @return stubber - to select a method for stubbing
          

     ----------------------


          Method Stubber doReturn(Object toBeReturned)    (Stubber.java)

          
               * Use it for stubbing consecutive calls in {@link Mockito#doReturn(Object)} style.
               * <p>
               * See javadoc for {@link Mockito#doReturn(Object)}
               * 
               * @param toBeReturned to be returned when the stubbed method is called
               * @return stubber - to select a method for stubbing
               

          ----------------------


          Method Stubber doNothing()    (Stubber.java)

          
               * Use it for stubbing consecutive calls in {@link Mockito#doNothing()} style:
               * <pre class="code"><code class="java">
               *   doNothing().
               *   doThrow(new RuntimeException("two"))
               *       .when(mock).someVoidMethod();
               * </code></pre>
               * See javadoc for {@link Mockito#doNothing()}
               * 
               * @return stubber - to select a method for stubbing
               

          ----------------------


               Method Stubber doCallRealMethod()    (Stubber.java)

               
                    * Use it for stubbing consecutive calls in {@link Mockito#doCallRealMethod()} style.
                    * <p>
                    * See javadoc for {@link Mockito#doCallRealMethod()}
                    *
                    * @return stubber - to select a method for stubbing
                    

               ----------------------


          Method Stubber doAnswer(Answer answer)    (Stubber.java)

          
               * Use it for stubbing consecutive calls in {@link Mockito#doAnswer(Answer)} style:
               * <pre class="code"><code class="java">
               *   doAnswer(answerOne).
               *   doAnswer(answerTwo)
               *       .when(mock).someVoidMethod();
               * </code></pre>
               * See javadoc for {@link Mockito#doAnswer(Answer)}
               * 
               * @param answer to answer when the stubbed method is called
               * @return stubber - to select a method for stubbing
               

          ----------------------




Method Stubber doThrow(Class<? extends Throwable> toBeThrown)  (Stubber.java)
     Method Stubber doThrow(Throwable... toBeThrown)  (Stubber.java)
          Method Stubber doReturn(Object toBeReturned)  (Stubber.java)
          Method Stubber doNothing()  (Stubber.java)
               Method Stubber doCallRealMethod()  (Stubber.java)
          Method Stubber doAnswer(Answer answer)  (Stubber.java)

Method Stubber doThrow(Class<? extends Throwable> toBeThrown)    (Stubber.java)


     * Use it for stubbing consecutive calls in {@link Mockito#doThrow(Class)} style:
     * <pre class="code"><code class="java">
     *   doThrow(RuntimeException.class).
     *   doThrow(IllegalArgumentException.class)
     *       .when(mock).someVoidMethod();
     * </code></pre>
     * See javadoc for {@link Mockito#doThrow(Class)}
     *
     * @param toBeThrown exception class to be thrown when the stubbed method is called
     * @return stubber - to select a method for stubbing
     *
     * @since 2.0.0
     

----------------------


     Method Stubber doThrow(Throwable... toBeThrown)    (Stubber.java)

     
          * Use it for stubbing consecutive calls in {@link Mockito#doThrow(Throwable[])} style:
          * <pre class="code"><code class="java">
          *   doThrow(new RuntimeException("one")).
          *   doThrow(new RuntimeException("two"))
          *       .when(mock).someVoidMethod();
          * </code></pre>
          * See javadoc for {@link Mockito#doThrow(Throwable[])}
          * 
          * @param toBeThrown to be thrown when the stubbed method is called
          * @return stubber - to select a method for stubbing
          

     ----------------------


          Method Stubber doReturn(Object toBeReturned)    (Stubber.java)

          
               * Use it for stubbing consecutive calls in {@link Mockito#doReturn(Object)} style.
               * <p>
               * See javadoc for {@link Mockito#doReturn(Object)}
               * 
               * @param toBeReturned to be returned when the stubbed method is called
               * @return stubber - to select a method for stubbing
               

          ----------------------


          Method Stubber doNothing()    (Stubber.java)

          
               * Use it for stubbing consecutive calls in {@link Mockito#doNothing()} style:
               * <pre class="code"><code class="java">
               *   doNothing().
               *   doThrow(new RuntimeException("two"))
               *       .when(mock).someVoidMethod();
               * </code></pre>
               * See javadoc for {@link Mockito#doNothing()}
               * 
               * @return stubber - to select a method for stubbing
               

          ----------------------


               Method Stubber doCallRealMethod()    (Stubber.java)

               
                    * Use it for stubbing consecutive calls in {@link Mockito#doCallRealMethod()} style.
                    * <p>
                    * See javadoc for {@link Mockito#doCallRealMethod()}
                    *
                    * @return stubber - to select a method for stubbing
                    

               ----------------------


          Method Stubber doAnswer(Answer answer)    (Stubber.java)

          
               * Use it for stubbing consecutive calls in {@link Mockito#doAnswer(Answer)} style:
               * <pre class="code"><code class="java">
               *   doAnswer(answerOne).
               *   doAnswer(answerTwo)
               *       .when(mock).someVoidMethod();
               * </code></pre>
               * See javadoc for {@link Mockito#doAnswer(Answer)}
               * 
               * @param answer to answer when the stubbed method is called
               * @return stubber - to select a method for stubbing
               

          ----------------------




Method public VerificationMode times(int wantedNumberOfInvocations)  (VerificationWithTimeout.java)
     Method public static VerificationMode times(int wantedNumberOfInvocations)  (Mockito.java)
          Method public static VerificationMode atMost(int maxNumberOfInvocations)  (Mockito.java)
               Method public static VerificationMode atLeastOnce()  (Mockito.java)

Method public VerificationMode times(int wantedNumberOfInvocations)    (VerificationWithTimeout.java)


     * Allows verifying exact number of invocations within given timeout
     * <pre class="code"><code class="java">
     *   verify(mock, timeout(100).times(2)).someMethod("some arg");
     * </code></pre>
     * 
     * See examples in javadoc for {@link Mockito} class
     * 
     * @param wantedNumberOfInvocations wanted number of invocations 
     * 
     * @return verification mode
     

----------------------


     Method public static VerificationMode times(int wantedNumberOfInvocations)    (Mockito.java)

     
          * Allows verifying exact number of invocations. E.g:
          * <pre class="code"><code class="java">
          *   verify(mock, times(2)).someMethod("some arg");
          * </code></pre>
          *
          * See examples in javadoc for {@link Mockito} class
          *
          * @param wantedNumberOfInvocations wanted number of invocations
          *
          * @return verification mode
          

     ----------------------


          Method public static VerificationMode atMost(int maxNumberOfInvocations)    (Mockito.java)

          
               * Allows at-most-x verification. E.g:
               * <pre class="code"><code class="java">
               *   verify(mock, atMost(3)).someMethod("some arg");
               * </code></pre>
               *
               * See examples in javadoc for {@link Mockito} class
               *
               * @param maxNumberOfInvocations max number of invocations
               *
               * @return verification mode
               

          ----------------------


               Method public static VerificationMode atLeastOnce()    (Mockito.java)

               
                    * Allows at-least-once verification. E.g:
                    * <pre class="code"><code class="java">
                    *   verify(mock, atLeastOnce()).someMethod("some arg");
                    * </code></pre>
                    * Alias to <code>atLeast(1)</code>.
                    * <p>
                    * See examples in javadoc for {@link Mockito} class
                    *
                    * @return verification mode
                    

               ----------------------




Method public VerificationMode atLeast(int minNumberOfInvocations)  (VerificationWithTimeout.java)
     Method public static VerificationMode atLeast(int minNumberOfInvocations)  (Mockito.java)
          Method public static VerificationMode atMost(int maxNumberOfInvocations)  (Mockito.java)
               Method public static VerificationMode atLeastOnce()  (Mockito.java)

Method public VerificationMode atLeast(int minNumberOfInvocations)    (VerificationWithTimeout.java)


     * Allows at-least-x verification within given timeout. E.g:
     * <pre class="code"><code class="java">
     *   verify(mock, timeout(100).atLeast(3)).someMethod("some arg");
     * </code></pre>
     * 
     * See examples in javadoc for {@link Mockito} class
     * 
     * @param minNumberOfInvocations minimum number of invocations 
     * 
     * @return verification mode
     

----------------------


     Method public static VerificationMode atLeast(int minNumberOfInvocations)    (Mockito.java)

     
          * Allows at-least-x verification. E.g:
          * <pre class="code"><code class="java">
          *   verify(mock, atLeast(3)).someMethod("some arg");
          * </code></pre>
          *
          * See examples in javadoc for {@link Mockito} class
          *
          * @param minNumberOfInvocations minimum number of invocations
          *
          * @return verification mode
          

     ----------------------


          Method public static VerificationMode atMost(int maxNumberOfInvocations)    (Mockito.java)

          
               * Allows at-most-x verification. E.g:
               * <pre class="code"><code class="java">
               *   verify(mock, atMost(3)).someMethod("some arg");
               * </code></pre>
               *
               * See examples in javadoc for {@link Mockito} class
               *
               * @param maxNumberOfInvocations max number of invocations
               *
               * @return verification mode
               

          ----------------------


               Method public static VerificationMode atLeastOnce()    (Mockito.java)

               
                    * Allows at-least-once verification. E.g:
                    * <pre class="code"><code class="java">
                    *   verify(mock, atLeastOnce()).someMethod("some arg");
                    * </code></pre>
                    * Alias to <code>atLeast(1)</code>.
                    * <p>
                    * See examples in javadoc for {@link Mockito} class
                    *
                    * @return verification mode
                    

               ----------------------




Method public EqualsBuilder append(boolean[] lhs, boolean[] rhs)  (EqualsBuilder.java)
     Method public EqualsBuilder append(long[] lhs, long[] rhs)  (EqualsBuilder.java)
          Method public EqualsBuilder append(int[] lhs, int[] rhs)  (EqualsBuilder.java)
               Method public EqualsBuilder append(int lhs, int rhs)  (EqualsBuilder.java)

Method public EqualsBuilder append(boolean[] lhs, boolean[] rhs)    (EqualsBuilder.java)


     * <p>Deep comparison of array of <code>boolean</code>. Length and all
     * values are compared.</p>
     *
     * <p>The method {@link #append(boolean, boolean)} is used.</p>
     *
     * @param lhs  the left hand <code>boolean[]</code>
     * @param rhs  the right hand <code>boolean[]</code>
     * @return EqualsBuilder - used to chain calls.
     

----------------------


     Method public EqualsBuilder append(long[] lhs, long[] rhs)    (EqualsBuilder.java)

     
          * <p>Deep comparison of array of <code>long</code>. Length and all
          * values are compared.</p>
          *
          * <p>The method {@link #append(long, long)} is used.</p>
          *
          * @param lhs  the left hand <code>long[]</code>
          * @param rhs  the right hand <code>long[]</code>
          * @return EqualsBuilder - used to chain calls.
          

     ----------------------


          Method public EqualsBuilder append(int[] lhs, int[] rhs)    (EqualsBuilder.java)

          
               * <p>Deep comparison of array of <code>int</code>. Length and all
               * values are compared.</p>
               *
               * <p>The method {@link #append(int, int)} is used.</p>
               *
               * @param lhs  the left hand <code>int[]</code>
               * @param rhs  the right hand <code>int[]</code>
               * @return EqualsBuilder - used to chain calls.
               

          ----------------------


               Method public EqualsBuilder append(int lhs, int rhs)    (EqualsBuilder.java)

               
                    * <p>Test if two <code>int</code>s are equal.</p>
                    *
                    * @param lhs  the left hand <code>int</code>
                    * @param rhs  the right hand <code>int</code>
                    * @return EqualsBuilder - used to chain calls.
                    

               ----------------------




Method public static double eq(double value, double delta)  (AdditionalMatchers.java)
     Method public static float eq(float value, float delta)  (AdditionalMatchers.java)
          Method public static float lt(float value)  (AdditionalMatchers.java)
               Method public static int lt(int value)  (AdditionalMatchers.java)

Method public static double eq(double value, double delta)    (AdditionalMatchers.java)


     * double argument that has an absolute difference to the given value that
     * is less than the given delta details.
     * <p>
     * See examples in javadoc for {@link AdditionalMatchers} class
     * 
     * @param value
     *            the given value.
     * @param delta
     *            the given delta.
     * @return <code>0</code>.
     

----------------------


     Method public static float eq(float value, float delta)    (AdditionalMatchers.java)

     
          * float argument that has an absolute difference to the given value that is
          * less than the given delta details.
          * <p>
          * See examples in javadoc for {@link AdditionalMatchers} class
          * 
          * @param value
          *            the given value.
          * @param delta
          *            the given delta.
          * @return <code>0</code>.
          

     ----------------------


          Method public static float lt(float value)    (AdditionalMatchers.java)

          
               * float argument less than the given value.
               * <p>
               * See examples in javadoc for {@link AdditionalMatchers} class
               * 
               * @param value
               *            the given value.
               * @return <code>0</code>.
               

          ----------------------


               Method public static int lt(int value)    (AdditionalMatchers.java)

               
                    * int argument less than the given value.
                    * <p>
                    * See examples in javadoc for {@link AdditionalMatchers} class
                    * 
                    * @param value
                    *            the given value.
                    * @return <code>0</code>.
                    

               ----------------------




Method public EqualsBuilder append(double[] lhs, double[] rhs)  (EqualsBuilder.java)
     Method public EqualsBuilder append(long[] lhs, long[] rhs)  (EqualsBuilder.java)
          Method public EqualsBuilder append(int[] lhs, int[] rhs)  (EqualsBuilder.java)
               Method public EqualsBuilder append(int lhs, int rhs)  (EqualsBuilder.java)

Method public EqualsBuilder append(double[] lhs, double[] rhs)    (EqualsBuilder.java)


     * <p>Deep comparison of array of <code>double</code>. Length and all
     * values are compared.</p>
     *
     * <p>The method {@link #append(double, double)} is used.</p>
     *
     * @param lhs  the left hand <code>double[]</code>
     * @param rhs  the right hand <code>double[]</code>
     * @return EqualsBuilder - used to chain calls.
     

----------------------


     Method public EqualsBuilder append(long[] lhs, long[] rhs)    (EqualsBuilder.java)

     
          * <p>Deep comparison of array of <code>long</code>. Length and all
          * values are compared.</p>
          *
          * <p>The method {@link #append(long, long)} is used.</p>
          *
          * @param lhs  the left hand <code>long[]</code>
          * @param rhs  the right hand <code>long[]</code>
          * @return EqualsBuilder - used to chain calls.
          

     ----------------------


          Method public EqualsBuilder append(int[] lhs, int[] rhs)    (EqualsBuilder.java)

          
               * <p>Deep comparison of array of <code>int</code>. Length and all
               * values are compared.</p>
               *
               * <p>The method {@link #append(int, int)} is used.</p>
               *
               * @param lhs  the left hand <code>int[]</code>
               * @param rhs  the right hand <code>int[]</code>
               * @return EqualsBuilder - used to chain calls.
               

          ----------------------


               Method public EqualsBuilder append(int lhs, int rhs)    (EqualsBuilder.java)

               
                    * <p>Test if two <code>int</code>s are equal.</p>
                    *
                    * @param lhs  the left hand <code>int</code>
                    * @param rhs  the right hand <code>int</code>
                    * @return EqualsBuilder - used to chain calls.
                    

               ----------------------




Method public static int and(int first, int second)  (AdditionalMatchers.java)
     Method public static boolean and(boolean first, boolean second)  (AdditionalMatchers.java)
          Method public static boolean not(boolean first)  (AdditionalMatchers.java)
               Method public static int not(int first)  (AdditionalMatchers.java)

Method public static int and(int first, int second)    (AdditionalMatchers.java)


     * int argument that matches both given argument matchers.
     * <p>
     * See examples in javadoc for {@link AdditionalMatchers} class
     * 
     * @param first
     *            placeholder for the first argument matcher.
     * @param second
     *            placeholder for the second argument matcher.
     * @return <code>0</code>.
     

----------------------


     Method public static boolean and(boolean first, boolean second)    (AdditionalMatchers.java)

     
          * boolean argument that matches both given matchers.
          * <p>
          * See examples in javadoc for {@link AdditionalMatchers} class
          * 
          * @param first
          *            placeholder for the first argument matcher.
          * @param second
          *            placeholder for the second argument matcher.
          * @return <code>false</code>.
          

     ----------------------


          Method public static boolean not(boolean first)    (AdditionalMatchers.java)

          
               * boolean argument that does not match the given argument matcher.
               * <p>
               * See examples in javadoc for {@link AdditionalMatchers} class
               * 
               * @param first
               *            placeholder for the argument matcher.
               * @return <code>false</code>.
               

          ----------------------


               Method public static int not(int first)    (AdditionalMatchers.java)

               
                    * int argument that does not match the given argument matcher.
                    * <p>
                    * See examples in javadoc for {@link AdditionalMatchers} class
                    * 
                    * @param first
                    *            placeholder for the argument matcher.
                    * @return <code>0</code>.
                    

               ----------------------




Method public EqualsBuilder append(short[] lhs, short[] rhs)  (EqualsBuilder.java)
     Method public EqualsBuilder append(long[] lhs, long[] rhs)  (EqualsBuilder.java)
          Method public EqualsBuilder append(int[] lhs, int[] rhs)  (EqualsBuilder.java)
               Method public EqualsBuilder append(int lhs, int rhs)  (EqualsBuilder.java)

Method public EqualsBuilder append(short[] lhs, short[] rhs)    (EqualsBuilder.java)


     * <p>Deep comparison of array of <code>short</code>. Length and all
     * values are compared.</p>
     *
     * <p>The method {@link #append(short, short)} is used.</p>
     *
     * @param lhs  the left hand <code>short[]</code>
     * @param rhs  the right hand <code>short[]</code>
     * @return EqualsBuilder - used to chain calls.
     

----------------------


     Method public EqualsBuilder append(long[] lhs, long[] rhs)    (EqualsBuilder.java)

     
          * <p>Deep comparison of array of <code>long</code>. Length and all
          * values are compared.</p>
          *
          * <p>The method {@link #append(long, long)} is used.</p>
          *
          * @param lhs  the left hand <code>long[]</code>
          * @param rhs  the right hand <code>long[]</code>
          * @return EqualsBuilder - used to chain calls.
          

     ----------------------


          Method public EqualsBuilder append(int[] lhs, int[] rhs)    (EqualsBuilder.java)

          
               * <p>Deep comparison of array of <code>int</code>. Length and all
               * values are compared.</p>
               *
               * <p>The method {@link #append(int, int)} is used.</p>
               *
               * @param lhs  the left hand <code>int[]</code>
               * @param rhs  the right hand <code>int[]</code>
               * @return EqualsBuilder - used to chain calls.
               

          ----------------------


               Method public EqualsBuilder append(int lhs, int rhs)    (EqualsBuilder.java)

               
                    * <p>Test if two <code>int</code>s are equal.</p>
                    *
                    * @param lhs  the left hand <code>int</code>
                    * @param rhs  the right hand <code>int</code>
                    * @return EqualsBuilder - used to chain calls.
                    

               ----------------------




Method public EqualsBuilder append(float[] lhs, float[] rhs)  (EqualsBuilder.java)
     Method public EqualsBuilder append(long[] lhs, long[] rhs)  (EqualsBuilder.java)
          Method public EqualsBuilder append(int[] lhs, int[] rhs)  (EqualsBuilder.java)
               Method public EqualsBuilder append(int lhs, int rhs)  (EqualsBuilder.java)

Method public EqualsBuilder append(float[] lhs, float[] rhs)    (EqualsBuilder.java)


     * <p>Deep comparison of array of <code>float</code>. Length and all
     * values are compared.</p>
     *
     * <p>The method {@link #append(float, float)} is used.</p>
     *
     * @param lhs  the left hand <code>float[]</code>
     * @param rhs  the right hand <code>float[]</code>
     * @return EqualsBuilder - used to chain calls.
     

----------------------


     Method public EqualsBuilder append(long[] lhs, long[] rhs)    (EqualsBuilder.java)

     
          * <p>Deep comparison of array of <code>long</code>. Length and all
          * values are compared.</p>
          *
          * <p>The method {@link #append(long, long)} is used.</p>
          *
          * @param lhs  the left hand <code>long[]</code>
          * @param rhs  the right hand <code>long[]</code>
          * @return EqualsBuilder - used to chain calls.
          

     ----------------------


          Method public EqualsBuilder append(int[] lhs, int[] rhs)    (EqualsBuilder.java)

          
               * <p>Deep comparison of array of <code>int</code>. Length and all
               * values are compared.</p>
               *
               * <p>The method {@link #append(int, int)} is used.</p>
               *
               * @param lhs  the left hand <code>int[]</code>
               * @param rhs  the right hand <code>int[]</code>
               * @return EqualsBuilder - used to chain calls.
               

          ----------------------


               Method public EqualsBuilder append(int lhs, int rhs)    (EqualsBuilder.java)

               
                    * <p>Test if two <code>int</code>s are equal.</p>
                    *
                    * @param lhs  the left hand <code>int</code>
                    * @param rhs  the right hand <code>int</code>
                    * @return EqualsBuilder - used to chain calls.
                    

               ----------------------




Method public EqualsBuilder append(char[] lhs, char[] rhs)  (EqualsBuilder.java)
     Method public EqualsBuilder append(long[] lhs, long[] rhs)  (EqualsBuilder.java)
          Method public EqualsBuilder append(int[] lhs, int[] rhs)  (EqualsBuilder.java)
               Method public EqualsBuilder append(int lhs, int rhs)  (EqualsBuilder.java)

Method public EqualsBuilder append(char[] lhs, char[] rhs)    (EqualsBuilder.java)


     * <p>Deep comparison of array of <code>char</code>. Length and all
     * values are compared.</p>
     *
     * <p>The method {@link #append(char, char)} is used.</p>
     *
     * @param lhs  the left hand <code>char[]</code>
     * @param rhs  the right hand <code>char[]</code>
     * @return EqualsBuilder - used to chain calls.
     

----------------------


     Method public EqualsBuilder append(long[] lhs, long[] rhs)    (EqualsBuilder.java)

     
          * <p>Deep comparison of array of <code>long</code>. Length and all
          * values are compared.</p>
          *
          * <p>The method {@link #append(long, long)} is used.</p>
          *
          * @param lhs  the left hand <code>long[]</code>
          * @param rhs  the right hand <code>long[]</code>
          * @return EqualsBuilder - used to chain calls.
          

     ----------------------


          Method public EqualsBuilder append(int[] lhs, int[] rhs)    (EqualsBuilder.java)

          
               * <p>Deep comparison of array of <code>int</code>. Length and all
               * values are compared.</p>
               *
               * <p>The method {@link #append(int, int)} is used.</p>
               *
               * @param lhs  the left hand <code>int[]</code>
               * @param rhs  the right hand <code>int[]</code>
               * @return EqualsBuilder - used to chain calls.
               

          ----------------------


               Method public EqualsBuilder append(int lhs, int rhs)    (EqualsBuilder.java)

               
                    * <p>Test if two <code>int</code>s are equal.</p>
                    *
                    * @param lhs  the left hand <code>int</code>
                    * @param rhs  the right hand <code>int</code>
                    * @return EqualsBuilder - used to chain calls.
                    

               ----------------------




Method public EqualsBuilder append(byte[] lhs, byte[] rhs)  (EqualsBuilder.java)
     Method public EqualsBuilder append(long[] lhs, long[] rhs)  (EqualsBuilder.java)
          Method public EqualsBuilder append(int[] lhs, int[] rhs)  (EqualsBuilder.java)
               Method public EqualsBuilder append(int lhs, int rhs)  (EqualsBuilder.java)

Method public EqualsBuilder append(byte[] lhs, byte[] rhs)    (EqualsBuilder.java)


     * <p>Deep comparison of array of <code>byte</code>. Length and all
     * values are compared.</p>
     *
     * <p>The method {@link #append(byte, byte)} is used.</p>
     *
     * @param lhs  the left hand <code>byte[]</code>
     * @param rhs  the right hand <code>byte[]</code>
     * @return EqualsBuilder - used to chain calls.
     

----------------------


     Method public EqualsBuilder append(long[] lhs, long[] rhs)    (EqualsBuilder.java)

     
          * <p>Deep comparison of array of <code>long</code>. Length and all
          * values are compared.</p>
          *
          * <p>The method {@link #append(long, long)} is used.</p>
          *
          * @param lhs  the left hand <code>long[]</code>
          * @param rhs  the right hand <code>long[]</code>
          * @return EqualsBuilder - used to chain calls.
          

     ----------------------


          Method public EqualsBuilder append(int[] lhs, int[] rhs)    (EqualsBuilder.java)

          
               * <p>Deep comparison of array of <code>int</code>. Length and all
               * values are compared.</p>
               *
               * <p>The method {@link #append(int, int)} is used.</p>
               *
               * @param lhs  the left hand <code>int[]</code>
               * @param rhs  the right hand <code>int[]</code>
               * @return EqualsBuilder - used to chain calls.
               

          ----------------------


               Method public EqualsBuilder append(int lhs, int rhs)    (EqualsBuilder.java)

               
                    * <p>Test if two <code>int</code>s are equal.</p>
                    *
                    * @param lhs  the left hand <code>int</code>
                    * @param rhs  the right hand <code>int</code>
                    * @return EqualsBuilder - used to chain calls.
                    

               ----------------------




Method public static InstantiatorProvider getInstantiatorProvider()  (Plugins.java)
     Method InstantiatorProvider getInstantiatorProvider()  (PluginRegistry.java)
          Method MockMaker getMockMaker()  (PluginRegistry.java)
               Method public static MockMaker getMockMaker()  (Plugins.java)

Method public static InstantiatorProvider getInstantiatorProvider()    (Plugins.java)


     * Returns the instantiator provider available for the current runtime.
     *
     * <p>Returns {@link org.mockito.internal.creation.instance.DefaultInstantiatorProvider} if no
     * {@link org.mockito.plugins.InstantiatorProvider} extension exists or is visible in the current classpath.</p>
     

----------------------


     Method InstantiatorProvider getInstantiatorProvider()    (PluginRegistry.java)

     
          * Returns the instantiator provider available for the current runtime.
          *
          * <p>Returns {@link org.mockito.internal.creation.instance.DefaultInstantiatorProvider} if no
          * {@link org.mockito.plugins.InstantiatorProvider} extension exists or is visible in the current classpath.</p>
          

     ----------------------


          Method MockMaker getMockMaker()    (PluginRegistry.java)

          
               * Returns the implementation of the mock maker available for the current runtime.
               *
               * <p>Returns {@link org.mockito.internal.creation.cglib.CglibMockMaker} if no
               * {@link org.mockito.plugins.MockMaker} extension exists or is visible in the current classpath.</p>
               

          ----------------------


               Method public static MockMaker getMockMaker()    (Plugins.java)

               
                    * Returns the implementation of the mock maker available for the current runtime.
                    *
                    * <p>Returns default mock maker if no
                    * {@link org.mockito.plugins.MockMaker} extension exists or is visible in the current classpath.</p>
                    

               ----------------------




Method public static T cmpEq(Comparable<T> value)  (AdditionalMatchers.java)
     Method public static T leq(Comparable<T> value)  (AdditionalMatchers.java)
          Method public static T eq(T value)  (Matchers.java)
               Method public static int lt(int value)  (AdditionalMatchers.java)

Method public static T cmpEq(Comparable<T> value)    (AdditionalMatchers.java)


     * comparable argument equals to the given value according to their
     * compareTo method.
     * <p>
     * See examples in javadoc for {@link AdditionalMatchers} class
     * 
     * @param value
     *            the given value.
     * @return <code>null</code>.
     

----------------------


     Method public static T leq(Comparable<T> value)    (AdditionalMatchers.java)

     
          * comparable argument less than or equal the given value details.
          * <p>
          * See examples in javadoc for {@link AdditionalMatchers} class
          * 
          * @param value
          *            the given value.
          * @return <code>null</code>.
          

     ----------------------


          Method public static T eq(T value)    (Matchers.java)

          
               * Object argument that is equal to the given value.
               * <p>
               * See examples in javadoc for {@link Matchers} class
               * 
               * @param value
               *            the given value.
               * @return <code>null</code>.
               

          ----------------------


               Method public static int lt(int value)    (AdditionalMatchers.java)

               
                    * int argument less than the given value.
                    * <p>
                    * See examples in javadoc for {@link AdditionalMatchers} class
                    * 
                    * @param value
                    *            the given value.
                    * @return <code>0</code>.
                    

               ----------------------




Method public static double geq(double value)  (AdditionalMatchers.java)
     Method public static T geq(Comparable<T> value)  (AdditionalMatchers.java)
          Method public static T eq(T value)  (Matchers.java)
               Method public static int lt(int value)  (AdditionalMatchers.java)

Method public static double geq(double value)    (AdditionalMatchers.java)


     * double argument greater than or equal to the given value.
     * <p>
     * See examples in javadoc for {@link AdditionalMatchers} class
     * 
     * @param value
     *            the given value.
     * @return <code>0</code>.
     

----------------------


     Method public static T geq(Comparable<T> value)    (AdditionalMatchers.java)

     
          * argument greater than or equal the given value.
          * <p>
          * See examples in javadoc for {@link AdditionalMatchers} class
          * 
          * @param value
          *            the given value.
          * @return <code>null</code>.
          

     ----------------------


          Method public static T eq(T value)    (Matchers.java)

          
               * Object argument that is equal to the given value.
               * <p>
               * See examples in javadoc for {@link Matchers} class
               * 
               * @param value
               *            the given value.
               * @return <code>null</code>.
               

          ----------------------


               Method public static int lt(int value)    (AdditionalMatchers.java)

               
                    * int argument less than the given value.
                    * <p>
                    * See examples in javadoc for {@link AdditionalMatchers} class
                    * 
                    * @param value
                    *            the given value.
                    * @return <code>0</code>.
                    

               ----------------------




Method public static float geq(float value)  (AdditionalMatchers.java)
     Method public static T geq(Comparable<T> value)  (AdditionalMatchers.java)
          Method public static T eq(T value)  (Matchers.java)
               Method public static int lt(int value)  (AdditionalMatchers.java)

Method public static float geq(float value)    (AdditionalMatchers.java)


     * float argument greater than or equal to the given value.
     * <p>
     * See examples in javadoc for {@link AdditionalMatchers} class
     * 
     * @param value
     *            the given value.
     * @return <code>0</code>.
     

----------------------


     Method public static T geq(Comparable<T> value)    (AdditionalMatchers.java)

     
          * argument greater than or equal the given value.
          * <p>
          * See examples in javadoc for {@link AdditionalMatchers} class
          * 
          * @param value
          *            the given value.
          * @return <code>null</code>.
          

     ----------------------


          Method public static T eq(T value)    (Matchers.java)

          
               * Object argument that is equal to the given value.
               * <p>
               * See examples in javadoc for {@link Matchers} class
               * 
               * @param value
               *            the given value.
               * @return <code>null</code>.
               

          ----------------------


               Method public static int lt(int value)    (AdditionalMatchers.java)

               
                    * int argument less than the given value.
                    * <p>
                    * See examples in javadoc for {@link AdditionalMatchers} class
                    * 
                    * @param value
                    *            the given value.
                    * @return <code>0</code>.
                    

               ----------------------




Method public static short geq(short value)  (AdditionalMatchers.java)
     Method public static T geq(Comparable<T> value)  (AdditionalMatchers.java)
          Method public static T eq(T value)  (Matchers.java)
               Method public static int lt(int value)  (AdditionalMatchers.java)

Method public static short geq(short value)    (AdditionalMatchers.java)


     * short argument greater than or equal to the given value.
     * <p>
     * See examples in javadoc for {@link AdditionalMatchers} class
     * 
     * @param value
     *            the given value.
     * @return <code>0</code>.
     

----------------------


     Method public static T geq(Comparable<T> value)    (AdditionalMatchers.java)

     
          * argument greater than or equal the given value.
          * <p>
          * See examples in javadoc for {@link AdditionalMatchers} class
          * 
          * @param value
          *            the given value.
          * @return <code>null</code>.
          

     ----------------------


          Method public static T eq(T value)    (Matchers.java)

          
               * Object argument that is equal to the given value.
               * <p>
               * See examples in javadoc for {@link Matchers} class
               * 
               * @param value
               *            the given value.
               * @return <code>null</code>.
               

          ----------------------


               Method public static int lt(int value)    (AdditionalMatchers.java)

               
                    * int argument less than the given value.
                    * <p>
                    * See examples in javadoc for {@link AdditionalMatchers} class
                    * 
                    * @param value
                    *            the given value.
                    * @return <code>0</code>.
                    

               ----------------------




Method public static byte geq(byte value)  (AdditionalMatchers.java)
     Method public static T geq(Comparable<T> value)  (AdditionalMatchers.java)
          Method public static T eq(T value)  (Matchers.java)
               Method public static int lt(int value)  (AdditionalMatchers.java)

Method public static byte geq(byte value)    (AdditionalMatchers.java)


     * byte argument greater than or equal to the given value.
     * <p>
     * See examples in javadoc for {@link AdditionalMatchers} class
     * 
     * @param value
     *            the given value.
     * @return <code>0</code>.
     

----------------------


     Method public static T geq(Comparable<T> value)    (AdditionalMatchers.java)

     
          * argument greater than or equal the given value.
          * <p>
          * See examples in javadoc for {@link AdditionalMatchers} class
          * 
          * @param value
          *            the given value.
          * @return <code>null</code>.
          

     ----------------------


          Method public static T eq(T value)    (Matchers.java)

          
               * Object argument that is equal to the given value.
               * <p>
               * See examples in javadoc for {@link Matchers} class
               * 
               * @param value
               *            the given value.
               * @return <code>null</code>.
               

          ----------------------


               Method public static int lt(int value)    (AdditionalMatchers.java)

               
                    * int argument less than the given value.
                    * <p>
                    * See examples in javadoc for {@link AdditionalMatchers} class
                    * 
                    * @param value
                    *            the given value.
                    * @return <code>0</code>.
                    

               ----------------------




Method public static long geq(long value)  (AdditionalMatchers.java)
     Method public static T geq(Comparable<T> value)  (AdditionalMatchers.java)
          Method public static T eq(T value)  (Matchers.java)
               Method public static int lt(int value)  (AdditionalMatchers.java)

Method public static long geq(long value)    (AdditionalMatchers.java)


     * long argument greater than or equal to the given value.
     * <p>
     * See examples in javadoc for {@link AdditionalMatchers} class
     * 
     * @param value
     *            the given value.
     * @return <code>0</code>.
     

----------------------


     Method public static T geq(Comparable<T> value)    (AdditionalMatchers.java)

     
          * argument greater than or equal the given value.
          * <p>
          * See examples in javadoc for {@link AdditionalMatchers} class
          * 
          * @param value
          *            the given value.
          * @return <code>null</code>.
          

     ----------------------


          Method public static T eq(T value)    (Matchers.java)

          
               * Object argument that is equal to the given value.
               * <p>
               * See examples in javadoc for {@link Matchers} class
               * 
               * @param value
               *            the given value.
               * @return <code>null</code>.
               

          ----------------------


               Method public static int lt(int value)    (AdditionalMatchers.java)

               
                    * int argument less than the given value.
                    * <p>
                    * See examples in javadoc for {@link AdditionalMatchers} class
                    * 
                    * @param value
                    *            the given value.
                    * @return <code>0</code>.
                    

               ----------------------




Method public static int geq(int value)  (AdditionalMatchers.java)
     Method public static T geq(Comparable<T> value)  (AdditionalMatchers.java)
          Method public static T eq(T value)  (Matchers.java)
               Method public static int lt(int value)  (AdditionalMatchers.java)

Method public static int geq(int value)    (AdditionalMatchers.java)


     * int argument greater than or equal to the given value.
     * <p>
     * See examples in javadoc for {@link AdditionalMatchers} class
     * 
     * @param value
     *            the given value.
     * @return <code>0</code>.
     

----------------------


     Method public static T geq(Comparable<T> value)    (AdditionalMatchers.java)

     
          * argument greater than or equal the given value.
          * <p>
          * See examples in javadoc for {@link AdditionalMatchers} class
          * 
          * @param value
          *            the given value.
          * @return <code>null</code>.
          

     ----------------------


          Method public static T eq(T value)    (Matchers.java)

          
               * Object argument that is equal to the given value.
               * <p>
               * See examples in javadoc for {@link Matchers} class
               * 
               * @param value
               *            the given value.
               * @return <code>null</code>.
               

          ----------------------


               Method public static int lt(int value)    (AdditionalMatchers.java)

               
                    * int argument less than the given value.
                    * <p>
                    * See examples in javadoc for {@link AdditionalMatchers} class
                    * 
                    * @param value
                    *            the given value.
                    * @return <code>0</code>.
                    

               ----------------------




Method public static DeprecatedOngoingStubbing<T> stub(T methodCall)  (Mockito.java)
     Interface DeprecatedOngoingStubbing  (DeprecatedOngoingStubbing.java)
          Interface VoidMethodStubbable  (VoidMethodStubbable.java)

Method public static DeprecatedOngoingStubbing<T> stub(T methodCall)    (Mockito.java)


     * Stubs a method call with return value or an exception. E.g:
     *
     * <pre class="code"><code class="java">
     * stub(mock.someMethod()).toReturn(10);
     *
     * //you can use flexible argument matchers, e.g:
     * stub(mock.someMethod(<b>anyString()</b>)).toReturn(10);
     *
     * //setting exception to be thrown:
     * stub(mock.someMethod("some arg")).toThrow(new RuntimeException());
     *
     * //you can stub with different behavior for consecutive method calls.
     * //Last stubbing (e.g: toReturn("foo")) determines the behavior for further consecutive calls.
     * stub(mock.someMethod("some arg"))
     *  .toThrow(new RuntimeException())
     *  .toReturn("foo");
     * </code></pre>
     * <p>
     * Some users find stub() confusing therefore {@link Mockito#when(Object)} is recommended over stub()
     * <pre class="code"><code class="java">
     *   //Instead of:
     *   stub(mock.count()).toReturn(10);
     *
     *   //You can do:
     *   when(mock.count()).thenReturn(10);
     * </code></pre>
     * For stubbing void methods with throwables see: {@link Mockito#doThrow(Throwable...)}
     * <p>
     * Stubbing can be overridden: for example common stubbing can go to fixture
     * setup but the test methods can override it.
     * Please note that overridding stubbing is a potential code smell that points out too much stubbing.
     * <p>
     * Once stubbed, the method will always return stubbed value regardless
     * of how many times it is called.
     * <p>
     * Last stubbing is more important - when you stubbed the same method with
     * the same arguments many times.
     * <p>
     * Although it is possible to verify a stubbed invocation, usually <b>it's just redundant</b>.
     * Let's say you've stubbed foo.bar().
     * If your code cares what foo.bar() returns then something else breaks(often before even verify() gets executed).
     * If your code doesn't care what get(0) returns then it should not be stubbed.
     * Not convinced? See <a href="http://monkeyisland.pl/2008/04/26/asking-and-telling">here</a>.
     *
     * @param methodCall
     *            method call
     * @return DeprecatedOngoingStubbing object to set stubbed value/exception
     

----------------------


     Interface DeprecatedOngoingStubbing    (DeprecatedOngoingStubbing.java)

     
      * Stubs a method call with return value or an exception. E.g:
      *
      * <pre class="code"><code class="java">
      * stub(mock.someMethod()).toReturn(10);
      *
      * //you can use flexible argument matchers, e.g:
      * stub(mock.someMethod(<b>anyString()</b>)).toReturn(10);
      *
      * //setting exception to be thrown:
      * stub(mock.someMethod("some arg")).toThrow(new RuntimeException());
      *
      * //you can stub with different behavior for consecutive method calls.
      * //Last stubbing (e.g: toReturn("foo")) determines the behavior for further consecutive calls.
      * stub(mock.someMethod("some arg"))
      *  .toThrow(new RuntimeException())
      *  .toReturn("foo");
      *
      * </code></pre>
      *
      * See examples in javadoc for {@link Mockito#stub}
      

     ----------------------


          Interface VoidMethodStubbable    (VoidMethodStubbable.java)

          
           * Stubs void method with an exception. E.g:
           *
           * <pre class="code"><code class="java">
           * stubVoid(mock).toThrow(new RuntimeException()).on().someMethod();
           *
           * //you can stub with different behavior for consecutive method calls.
           * //Last stubbing (e.g: toReturn()) determines the behavior for further consecutive calls.
           * stubVoid(mock)
           *  .toThrow(new RuntimeException())
           *  .toReturn()
           *  .on().someMethod();
           * </code></pre>
           *
           * See examples in javadoc for {@link Mockito#stubVoid}
           

          ----------------------




Method public static Stubber doCallRealMethod()  (Mockito.java)
     Field CALLS_REAL_METHODS  (Mockito.java)
          Class CallsRealMethods  (CallsRealMethods.java)

Method public static Stubber doCallRealMethod()    (Mockito.java)


     * Use <code>doCallRealMethod()</code> when you want to call the real implementation of a method.
     * <p>
     * As usual you are going to read <b>the partial mock warning</b>:
     * Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
     * How does partial mock fit into this paradigm? Well, it just doesn't...
     * Partial mock usually means that the complexity has been moved to a different method on the same object.
     * In most cases, this is not the way you want to design your application.
     * <p>
     * However, there are rare cases when partial mocks come handy:
     * dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
     * However, I wouldn't use partial mocks for new, test-driven & well-designed code.
     * <p>
     * See also javadoc {@link Mockito#spy(Object)} to find out more about partial mocks.
     * <b>Mockito.spy() is a recommended way of creating partial mocks.</b>
     * The reason is it guarantees real methods are called against correctly constructed object because you're responsible for constructing the object passed to spy() method.
     * <p>
     * Example:
     * <pre class="code"><code class="java">
     *   Foo mock = mock(Foo.class);
     *   doCallRealMethod().when(mock).someVoidMethod();
     *
     *   // this will call the real implementation of Foo.someVoidMethod()
     *   mock.someVoidMethod();
     * </code></pre>
     * <p>
     * See examples in javadoc for {@link Mockito} class
     *
     * @return stubber - to select a method for stubbing
     * @since 1.9.5
     

----------------------


     Field CALLS_REAL_METHODS    (Mockito.java)

     
          * Optional <code>Answer</code> to be used with {@link Mockito#mock(Class, Answer)}
          * <p>
          * {@link Answer} can be used to define the return values of unstubbed invocations.
          * <p>
          * This implementation can be helpful when working with legacy code.
          * When this implementation is used, unstubbed methods will delegate to the real implementation.
          * This is a way to create a partial mock object that calls real methods by default.
          * <p>
          * As usual you are going to read <b>the partial mock warning</b>:
          * Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
          * How does partial mock fit into this paradigm? Well, it just doesn't...
          * Partial mock usually means that the complexity has been moved to a different method on the same object.
          * In most cases, this is not the way you want to design your application.
          * <p>
          * However, there are rare cases when partial mocks come handy:
          * dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
          * However, I wouldn't use partial mocks for new, test-driven & well-designed code.
          * <p>
          * Example:
          * <pre class="code"><code class="java">
          * Foo mock = mock(Foo.class, CALLS_REAL_METHODS);
          *
          * // this calls the real implementation of Foo.getSomething()
          * value = mock.getSomething();
          *
          * when(mock.getSomething()).thenReturn(fakeValue);
          *
          * // now fakeValue is returned
          * value = mock.getSomething();
          * </code></pre>
          

     ----------------------


          Class CallsRealMethods    (CallsRealMethods.java)

          
           * Optional Answer that adds partial mocking support
           * <p>
           * {@link Answer} can be used to define the return values of unstubbed invocations.
           * <p>
           * This implementation can be helpful when working with legacy code.
           * When this implementation is used, unstubbed methods will delegate to the real implementation.
           * This is a way to create a partial mock object that calls real methods by default.
           * <p>
           * As usual you are going to read <b>the partial mock warning</b>:
           * Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
           * How does partial mock fit into this paradigm? Well, it just doesn't... 
           * Partial mock usually means that the complexity has been moved to a different method on the same object.
           * In most cases, this is not the way you want to design your application.
           * <p>
           * However, there are rare cases when partial mocks come handy: 
           * dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
           * However, I wouldn't use partial mocks for new, test-driven & well-designed code.
           * <p>
           

          ----------------------




Method public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass)  (EqualsBuilder.java)
     Method public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients)  (EqualsBuilder.java)
          Method public static boolean reflectionEquals(Object lhs, Object rhs)  (EqualsBuilder.java)

Method public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass)    (EqualsBuilder.java)


     * <p>This method uses reflection to determine if the two <code>Object</code>s
     * are equal.</p>
     *
     * <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private
     * fields. This means that it will throw a security exception if run under
     * a security manager, if the permissions are not set up correctly. It is also
     * not as efficient as testing explicitly.</p>
     *
     * <p>If the testTransients parameter is set to <code>true</code>, transient
     * members will be tested, otherwise they are ignored, as they are likely
     * derived fields, and not part of the value of the <code>Object</code>.</p>
     *
     * <p>Static fields will not be included. Superclass fields will be appended
     * up to and including the specified superclass. A null superclass is treated
     * as java.lang.Object.</p>
     *
     * @param lhs  <code>this</code> object
     * @param rhs  the other object
     * @param testTransients  whether to include transient fields
     * @param reflectUpToClass  the superclass to reflect up to (inclusive),
     *  may be <code>null</code>
     * @return <code>true</code> if the two Objects have tested equals.
     * @since 2.0
     

----------------------


     Method public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients)    (EqualsBuilder.java)

     
          * <p>This method uses reflection to determine if the two <code>Object</code>s
          * are equal.</p>
          *
          * <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private
          * fields. This means that it will throw a security exception if run under
          * a security manager, if the permissions are not set up correctly. It is also
          * not as efficient as testing explicitly.</p>
          *
          * <p>If the TestTransients parameter is set to <code>true</code>, transient
          * members will be tested, otherwise they are ignored, as they are likely
          * derived fields, and not part of the value of the <code>Object</code>.</p>
          *
          * <p>Static fields will not be tested. Superclass fields will be included.</p>
          *
          * @param lhs  <code>this</code> object
          * @param rhs  the other object
          * @param testTransients  whether to include transient fields
          * @return <code>true</code> if the two Objects have tested equals.
          

     ----------------------


          Method public static boolean reflectionEquals(Object lhs, Object rhs)    (EqualsBuilder.java)

          
               * <p>This method uses reflection to determine if the two <code>Object</code>s
               * are equal.</p>
               *
               * <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private
               * fields. This means that it will throw a security exception if run under
               * a security manager, if the permissions are not set up correctly. It is also
               * not as efficient as testing explicitly.</p>
               *
               * <p>Transient members will be not be tested, as they are likely derived
               * fields, and not part of the value of the Object.</p>
               *
               * <p>Static fields will not be tested. Superclass fields will be included.</p>
               *
               * @param lhs  <code>this</code> object
               * @param rhs  the other object
               * @return <code>true</code> if the two Objects have tested equals.
               

          ----------------------




Method public static T mock(Class<T> classToMock, MockSettings mockSettings)  (Mockito.java)
     Method public static T mock(Class<T> classToMock, String name)  (Mockito.java)
          Method public static T mock(Class<T> classToMock)  (Mockito.java)

Method public static T mock(Class<T> classToMock, MockSettings mockSettings)    (Mockito.java)


     * Creates a mock with some non-standard settings.
     * <p>
     * The number of configuration points for a mock grows
     * so we need a fluent way to introduce new configuration without adding more and more overloaded Mockito.mock() methods.
     * Hence {@link MockSettings}.
     * <pre class="code"><code class="java">
     *   Listener mock = mock(Listener.class, withSettings()
     *     .name("firstListner").defaultBehavior(RETURNS_SMART_NULLS));
     *   );
     * </code></pre>
     * <b>Use it carefully and occasionally</b>. What might be reason your test needs non-standard mocks?
     * Is the code under test so complicated that it requires non-standard mocks?
     * Wouldn't you prefer to refactor the code under test so it is testable in a simple way?
     * <p>
     * See also {@link Mockito#withSettings()}
     * <p>
     * See examples in javadoc for {@link Mockito} class
     *
     * @param classToMock class or interface to mock
     * @param mockSettings additional mock settings
     * @return mock object
     

----------------------


     Method public static T mock(Class<T> classToMock, String name)    (Mockito.java)

     
          * Specifies mock name. Naming mocks can be helpful for debugging - the name is used in all verification errors.
          * <p>
          * Beware that naming mocks is not a solution for complex code which uses too many mocks or collaborators.
          * <b>If you have too many mocks then refactor the code</b> so that it's easy to test/debug without necessity of naming mocks.
          * <p>
          * <b>If you use <code>&#064;Mock</code> annotation then you've got naming mocks for free!</b> <code>&#064;Mock</code> uses field name as mock name. {@link Mock Read more.}
          * <p>
          *
          * See examples in javadoc for {@link Mockito} class
          *
          * @param classToMock class or interface to mock
          * @param name of the mock
          * @return mock object
          

     ----------------------


          Method public static T mock(Class<T> classToMock)    (Mockito.java)

          
               * Creates mock object of given class or interface.
               * <p>
               * See examples in javadoc for {@link Mockito} class
               *
               * @param classToMock class or interface to mock
               * @return mock object
               

          ----------------------




Method MockSettings name(String name)  (MockSettings.java)
     Method public static T mock(Class<T> classToMock, String name)  (Mockito.java)
          Method public static T mock(Class<T> classToMock)  (Mockito.java)

Method MockSettings name(String name)    (MockSettings.java)


     * Specifies mock name. Naming mocks can be helpful for debugging - the name is used in all verification errors.
     * <p>
     * Beware that naming mocks is not a solution for complex code which uses too many mocks or collaborators.
     * <b>If you have too many mocks then refactor the code</b> so that it's easy to test/debug without necessity of naming mocks.
     * <p>
     * <b>If you use &#064;Mock annotation then you've got naming mocks for free!</b> &#064;Mock uses field name as mock name. {@link Mock Read more.}
     * <p>
     * Examples:
     * <pre class="code"><code class="java">
     *   Foo foo = mock(Foo.class, withSettings().name("foo"));
     *
     *   //Below does exactly the same:
     *   Foo foo = mock(Foo.class, "foo");
     * </code></pre>
     * @param name the name of the mock, later used in all verification errors
     * @return settings instance so that you can fluently specify other settings
     

----------------------


     Method public static T mock(Class<T> classToMock, String name)    (Mockito.java)

     
          * Specifies mock name. Naming mocks can be helpful for debugging - the name is used in all verification errors.
          * <p>
          * Beware that naming mocks is not a solution for complex code which uses too many mocks or collaborators.
          * <b>If you have too many mocks then refactor the code</b> so that it's easy to test/debug without necessity of naming mocks.
          * <p>
          * <b>If you use <code>&#064;Mock</code> annotation then you've got naming mocks for free!</b> <code>&#064;Mock</code> uses field name as mock name. {@link Mock Read more.}
          * <p>
          *
          * See examples in javadoc for {@link Mockito} class
          *
          * @param classToMock class or interface to mock
          * @param name of the mock
          * @return mock object
          

     ----------------------


          Method public static T mock(Class<T> classToMock)    (Mockito.java)

          
               * Creates mock object of given class or interface.
               * <p>
               * See examples in javadoc for {@link Mockito} class
               *
               * @param classToMock class or interface to mock
               * @return mock object
               

          ----------------------




Interface OngoingStubbing  (OngoingStubbing.java)
     Interface DeprecatedOngoingStubbing  (DeprecatedOngoingStubbing.java)
          Interface VoidMethodStubbable  (VoidMethodStubbable.java)

Interface OngoingStubbing    (OngoingStubbing.java)


 * Simply put: "<b>When</b> the x method is called <b>then</b> return y". E.g:
 *
 * <pre class="code"><code class="java">
 * <b>when</b>(mock.someMethod()).<b>thenReturn</b>(10);
 *
 * //you can use flexible argument matchers, e.g:
 * when(mock.someMethod(<b>anyString()</b>)).thenReturn(10);
 *
 * //setting exception to be thrown:
 * when(mock.someMethod("some arg")).thenThrow(new RuntimeException());
 *
 * //you can set different behavior for consecutive method calls.
 * //Last stubbing (e.g: thenReturn("foo")) determines the behavior of further consecutive calls.
 * when(mock.someMethod("some arg"))
 *  .thenThrow(new RuntimeException())
 *  .thenReturn("foo");
 * 
 * //There is a shorter way of consecutive stubbing:
 * when(mock.someMethod()).thenReturn(1,2,3);
 * when(mock.otherMethod()).thenThrow(exc1, exc2);
 * </code></pre>
 *
 * See examples in javadoc for {@link Mockito#when}
 

----------------------


     Interface DeprecatedOngoingStubbing    (DeprecatedOngoingStubbing.java)

     
      * Stubs a method call with return value or an exception. E.g:
      *
      * <pre class="code"><code class="java">
      * stub(mock.someMethod()).toReturn(10);
      *
      * //you can use flexible argument matchers, e.g:
      * stub(mock.someMethod(<b>anyString()</b>)).toReturn(10);
      *
      * //setting exception to be thrown:
      * stub(mock.someMethod("some arg")).toThrow(new RuntimeException());
      *
      * //you can stub with different behavior for consecutive method calls.
      * //Last stubbing (e.g: toReturn("foo")) determines the behavior for further consecutive calls.
      * stub(mock.someMethod("some arg"))
      *  .toThrow(new RuntimeException())
      *  .toReturn("foo");
      *
      * </code></pre>
      *
      * See examples in javadoc for {@link Mockito#stub}
      

     ----------------------


          Interface VoidMethodStubbable    (VoidMethodStubbable.java)

          
           * Stubs void method with an exception. E.g:
           *
           * <pre class="code"><code class="java">
           * stubVoid(mock).toThrow(new RuntimeException()).on().someMethod();
           *
           * //you can stub with different behavior for consecutive method calls.
           * //Last stubbing (e.g: toReturn()) determines the behavior for further consecutive calls.
           * stubVoid(mock)
           *  .toThrow(new RuntimeException())
           *  .toReturn()
           *  .on().someMethod();
           * </code></pre>
           *
           * See examples in javadoc for {@link Mockito#stubVoid}
           

          ----------------------




Method public static T verify(T mock, VerificationMode mode)  (Mockito.java)
     Interface VerificationMode  (VerificationMode.java)
     Interface DeprecatedOngoingStubbing  (DeprecatedOngoingStubbing.java)
          Interface VoidMethodStubbable  (VoidMethodStubbable.java)

Method public static T verify(T mock, VerificationMode mode)    (Mockito.java)


     * Verifies certain behavior happened at least once / exact number of times / never. E.g:
     * <pre class="code"><code class="java">
     *   verify(mock, times(5)).someMethod("was called five times");
     *
     *   verify(mock, atLeast(2)).someMethod("was called at least two times");
     *
     *   //you can use flexible argument matchers, e.g:
     *   verify(mock, atLeastOnce()).someMethod(<b>anyString()</b>);
     * </code></pre>
     *
     * <b>times(1) is the default</b> and can be omitted
     * <p>
     * Arguments passed are compared using <code>equals()</code> method.
     * Read about {@link ArgumentCaptor} or {@link ArgumentMatcher} to find out other ways of matching / asserting arguments passed.
     * <p>
     *
     * @param mock to be verified
     * @param mode times(x), atLeastOnce() or never()
     *
     * @return mock object itself
     

----------------------


     Interface VerificationMode    (VerificationMode.java)

     
      * Allows verifying that certain behavior happened at least once / exact number
      * of times / never. E.g:
      * 
      * <pre class="code"><code class="java">
      * verify(mock, times(5)).someMethod(&quot;was called five times&quot;);
      * 
      * verify(mock, never()).someMethod(&quot;was never called&quot;);
      * 
      * verify(mock, atLeastOnce()).someMethod(&quot;was called at least once&quot;);
      * 
      * verify(mock, atLeast(2)).someMethod(&quot;was called at least twice&quot;);
      * 
      * verify(mock, atMost(3)).someMethod(&quot;was called at most 3 times&quot;);
      * 
      * </code></pre>
      * 
      * <b>times(1) is the default</b> and can be omitted
      * <p>
      * See examples in javadoc for {@link Mockito#verify(Object, VerificationMode)}
      

     ----------------------


     Interface DeprecatedOngoingStubbing    (DeprecatedOngoingStubbing.java)

     
      * Stubs a method call with return value or an exception. E.g:
      *
      * <pre class="code"><code class="java">
      * stub(mock.someMethod()).toReturn(10);
      *
      * //you can use flexible argument matchers, e.g:
      * stub(mock.someMethod(<b>anyString()</b>)).toReturn(10);
      *
      * //setting exception to be thrown:
      * stub(mock.someMethod("some arg")).toThrow(new RuntimeException());
      *
      * //you can stub with different behavior for consecutive method calls.
      * //Last stubbing (e.g: toReturn("foo")) determines the behavior for further consecutive calls.
      * stub(mock.someMethod("some arg"))
      *  .toThrow(new RuntimeException())
      *  .toReturn("foo");
      *
      * </code></pre>
      *
      * See examples in javadoc for {@link Mockito#stub}
      

     ----------------------


          Interface VoidMethodStubbable    (VoidMethodStubbable.java)

          
           * Stubs void method with an exception. E.g:
           *
           * <pre class="code"><code class="java">
           * stubVoid(mock).toThrow(new RuntimeException()).on().someMethod();
           *
           * //you can stub with different behavior for consecutive method calls.
           * //Last stubbing (e.g: toReturn()) determines the behavior for further consecutive calls.
           * stubVoid(mock)
           *  .toThrow(new RuntimeException())
           *  .toReturn()
           *  .on().someMethod();
           * </code></pre>
           *
           * See examples in javadoc for {@link Mockito#stubVoid}
           

          ----------------------




Method MockSettings serializable(SerializableMode mode)  (MockSettings.java)
     Method MockSettings serializable()  (MockSettings.java)
          Method MockSettings stubOnly()  (MockSettings.java)
          Method MockSettings verboseLogging()  (MockSettings.java)

Method MockSettings serializable(SerializableMode mode)    (MockSettings.java)


     * Configures the mock to be serializable with a specific serializable mode.
     * With this feature you can use a mock in a place that requires dependencies to be serializable.
     * <p>
     * WARNING: This should be rarely used in unit testing.
     * <p>
     * The behaviour was implemented for a specific use case of a BDD spec that had an unreliable external dependency.  This
     * was in a web environment and the objects from the external dependency were being serialized to pass between layers.
     *
     * <pre class="code"><code class="java">
     *   List serializableMock = mock(List.class, withSettings().serializable(SerializableMode.ACROSS_CLASSLOADERS));
     * </code></pre>
     *
     * @param mode serialization mode
     * @return settings instance so that you can fluently specify other settings
     * @since 1.10.0
     

----------------------


     Method MockSettings serializable()    (MockSettings.java)

     
          * Configures the mock to be serializable. With this feature you can use a mock in a place that requires dependencies to be serializable.
          * <p>
          * WARNING: This should be rarely used in unit testing.
          * <p>
          * The behaviour was implemented for a specific use case of a BDD spec that had an unreliable external dependency.  This
          * was in a web environment and the objects from the external dependency were being serialized to pass between layers.
          * <p>
          * Example:
          * <pre class="code"><code class="java">
          *   List serializableMock = mock(List.class, withSettings().serializable());
          * </code></pre>
          *
          * @return settings instance so that you can fluently specify other settings
          * @since 1.8.1
          

     ----------------------


          Method MockSettings stubOnly()    (MockSettings.java)

          
               * A stub-only mock does not record method
               * invocations, thus saving memory but
               * disallowing verification of invocations.
               * <p>
               * Example:
               * <pre class="code"><code class="java">
               * List stubOnly = mock(List.class, withSettings().stubOnly());
               * </code></pre>
               *
               * @return settings instance so that you can fluently specify other settings
               

          ----------------------


          Method MockSettings verboseLogging()    (MockSettings.java)

          
               * Enables real-time logging of method invocations on this mock. Can be used
               * during test debugging in order to find wrong interactions with this mock.
               * <p>
               * Invocations are logged as they happen to the standard output stream.
               * <p>
               * Calling this method multiple times makes no difference.
               * <p>
               * Example:
               * <pre class="code"><code class="java">
               * List mockWithLogger = mock(List.class, withSettings().verboseLogging());
               * </code></pre>
               *
               * @return settings instance so that you can fluently specify other settings
               

          ----------------------




Method OngoingStubbing<T> thenThrow(Throwable... throwables)  (OngoingStubbing.java)
     Method OngoingStubbing<T> thenThrow(Class<? extends Throwable> throwableType)  (OngoingStubbing.java)
          Method DeprecatedOngoingStubbing<T> toThrow(Throwable throwable)  (DeprecatedOngoingStubbing.java)

Method OngoingStubbing<T> thenThrow(Throwable... throwables)    (OngoingStubbing.java)


     * Sets Throwable objects to be thrown when the method is called. E.g:
     * <pre class="code"><code class="java">
     * when(mock.someMethod()).thenThrow(new RuntimeException());
     * </code></pre>
     *
     * If throwables contain a checked exception then it has to
     * match one of the checked exceptions of method signature.
     * <p>
     * You can specify throwables to be thrown for consecutive calls. 
     * In that case the last throwable determines the behavior of further consecutive calls.
     * <p>
     * If throwable is null then exception will be thrown.
     * <p>
     * See examples in javadoc for {@link Mockito#when}
     *
     * @param throwables to be thrown on method invocation
     *
     * @return iOngoingStubbing object that allows stubbing consecutive calls
     

----------------------


     Method OngoingStubbing<T> thenThrow(Class<? extends Throwable> throwableType)    (OngoingStubbing.java)

     
          * Sets a Throwable type to be thrown when the method is called. E.g:
          * <pre class="code"><code class="java">
          * when(mock.someMethod()).thenThrow(RuntimeException.class);
          * </code></pre>
          *
          * <p>
          * If the throwable class is a checked exception then it has to
          * match one of the checked exceptions of the stubbed method signature.
          * <p>
          * If throwable is null then exception will be thrown.
          * <p>
          * See examples in javadoc for {@link Mockito#when}
          *
          * @param throwableType to be thrown on method invocation
          *
          * @return iOngoingStubbing object that allows stubbing consecutive calls
          * @since 2.0.0
          

     ----------------------


          Method DeprecatedOngoingStubbing<T> toThrow(Throwable throwable)    (DeprecatedOngoingStubbing.java)

          
               * Set a Throwable to be thrown when the stubbed method is called. E.g:
               * <pre class="code"><code class="java">
               * stub(mock.someMethod()).toThrow(new RuntimeException());
               * </code></pre>
               *
               * If throwable is a checked exception then it has to
               * match one of the checked exceptions of method signature.
               *
               * See examples in javadoc for {@link Mockito#stub}
               *
               * @param throwable to be thrown on method invocation
               *
               * @return iOngoingStubbing object that allows stubbing consecutive calls
               

          ----------------------




Method public static Answer<T> returnsArgAt(int position)  (AdditionalAnswers.java)
     Method public static Answer<T> returnsLastArg()  (AdditionalAnswers.java)
          Method public static Answer<T> returnsFirstArg()  (AdditionalAnswers.java)

Method public static Answer<T> returnsArgAt(int position)    (AdditionalAnswers.java)


     * Returns the parameter of an invocation at the given position.
     *
     * <p>
     * This additional answer could be used at stub time using the
     * <code>then|do|will{@link org.mockito.stubbing.Answer}</code> methods. For example :
     * </p>
     *
     * <pre class="code"><code class="java">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsArgAt(3));
     * doAnswer(returnsArgAt(3)).when(person).remember(dream1, dream2, dream3, dream4)</code></pre>
     *
     * @param <T> Return type of the invocation.
     * @param position index of the argument from the list of arguments.
     * @return Answer that will return the argument from the given position in the argument's list
     *
     * @since 1.9.5
     

----------------------


     Method public static Answer<T> returnsLastArg()    (AdditionalAnswers.java)

     
          * Returns the last parameter of an invocation.
          *
          * <p>
          *     This additional answer could be used at stub time using the
          *     <code>then|do|will{@link org.mockito.stubbing.Answer}</code> methods. For example :
          * </p>
          *
          * <pre class="code"><code class="java">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsLastArg());
          * doAnswer(returnsLastArg()).when(person).remember(dream1, dream2, dream3, dream4)</code></pre>
          *
          * @param <T> Return type of the invocation.
          * @return Answer that will return the last argument of the invocation.
          *
          * @since 1.9.5
          

     ----------------------


          Method public static Answer<T> returnsFirstArg()    (AdditionalAnswers.java)

          
               * Returns the first parameter of an invocation.
               *
               * <p>
               *     This additional answer could be used at stub time using the
               *     <code>then|do|will{@link org.mockito.stubbing.Answer}</code> methods. For example :
               * </p>
               *
               * <pre class="code"><code class="java">given(carKeyFob.authenticate(carKey)).will(returnsFirstArg());
               * doAnswer(returnsFirstArg()).when(carKeyFob).authenticate(carKey)</code></pre>
               *
               * @param <T> Return type of the invocation.
               * @return Answer that will return the first argument of the invocation.
               *
               * @since 1.9.5
               

          ----------------------




Method public static Map<K, V> anyMapOf(Class<K> keyClazz, Class<V> valueClazz)  (Matchers.java)
     Method public static Set<T> anySetOf(Class<T> clazz)  (Matchers.java)
          Method public static T any(Class<T> clazz)  (Matchers.java)

Method public static Map<K, V> anyMapOf(Class<K> keyClazz, Class<V> valueClazz)    (Matchers.java)


     * Generic friendly alias to {@link Matchers#anyMap()}.
     * It's an alternative to &#064;SuppressWarnings("unchecked") to keep code clean of compiler warnings.
     * <p>
     * Any non-null <code>Map</code>.
     * <p>
     * This method doesn't do type checks with the given parameter, it is only there
     * to avoid casting in your code. This might however change (type checks could
     * be added) in a future major release.
     * <p>
     * See examples in javadoc for {@link Matchers} class
     *
     * @param keyClazz Type of the map key to avoid casting
     * @param valueClazz Type of the value to avoid casting
     * @return empty Map.
     

----------------------


     Method public static Set<T> anySetOf(Class<T> clazz)    (Matchers.java)

     
          * Generic friendly alias to {@link Matchers#anySet()}.
          * It's an alternative to &#064;SuppressWarnings("unchecked") to keep code clean of compiler warnings.
          * <p>
          * Any non-null <code>Set</code>.
          * <p>
          * This method doesn't do type checks with the given parameter, it is only there
          * to avoid casting in your code. This might however change (type checks could
          * be added) in a future major release.
          * <p>
          * See examples in javadoc for {@link Matchers} class
          *
          * @param clazz Type owned by the Set to avoid casting
          * @return empty Set
          

     ----------------------


          Method public static T any(Class<T> clazz)    (Matchers.java)

          
               * Matches any object, including nulls
               * <p>
               * This method doesn't do type checks with the given parameter, it is only there
               * to avoid casting in your code. This might however change (type checks could
               * be added) in a future major release.
               * <p>
               * See examples in javadoc for {@link Matchers} class
               * <p>
               * This is an alias of: {@link #any()} and {@link #anyObject()}
               * <p>
               * @return <code>null</code>.
               

          ----------------------




Method public static Collection<T> anyCollectionOf(Class<T> clazz)  (Matchers.java)
     Method public static Set<T> anySetOf(Class<T> clazz)  (Matchers.java)
          Method public static T any(Class<T> clazz)  (Matchers.java)

Method public static Collection<T> anyCollectionOf(Class<T> clazz)    (Matchers.java)


     * Generic friendly alias to {@link Matchers#anyCollection()}.
     * It's an alternative to &#064;SuppressWarnings("unchecked") to keep code clean of compiler warnings.
     * <p>
     * Any non-null <code>Collection</code>.
     * <p>
     * This method doesn't do type checks with the given parameter, it is only there
     * to avoid casting in your code. This might however change (type checks could
     * be added) in a future major release.
     * <p>
     * See examples in javadoc for {@link Matchers} class
     * 
     * @param clazz Type owned by the collection to avoid casting
     * @return empty Collection.
     

----------------------


     Method public static Set<T> anySetOf(Class<T> clazz)    (Matchers.java)

     
          * Generic friendly alias to {@link Matchers#anySet()}.
          * It's an alternative to &#064;SuppressWarnings("unchecked") to keep code clean of compiler warnings.
          * <p>
          * Any non-null <code>Set</code>.
          * <p>
          * This method doesn't do type checks with the given parameter, it is only there
          * to avoid casting in your code. This might however change (type checks could
          * be added) in a future major release.
          * <p>
          * See examples in javadoc for {@link Matchers} class
          *
          * @param clazz Type owned by the Set to avoid casting
          * @return empty Set
          

     ----------------------


          Method public static T any(Class<T> clazz)    (Matchers.java)

          
               * Matches any object, including nulls
               * <p>
               * This method doesn't do type checks with the given parameter, it is only there
               * to avoid casting in your code. This might however change (type checks could
               * be added) in a future major release.
               * <p>
               * See examples in javadoc for {@link Matchers} class
               * <p>
               * This is an alias of: {@link #any()} and {@link #anyObject()}
               * <p>
               * @return <code>null</code>.
               

          ----------------------




Method public static List<T> anyListOf(Class<T> clazz)  (Matchers.java)
     Method public static Set<T> anySetOf(Class<T> clazz)  (Matchers.java)
          Method public static T any(Class<T> clazz)  (Matchers.java)

Method public static List<T> anyListOf(Class<T> clazz)    (Matchers.java)


     * Generic friendly alias to {@link Matchers#anyList()}.
     * It's an alternative to &#064;SuppressWarnings("unchecked") to keep code clean of compiler warnings.
     * <p>
     * Any non-null <code>List</code>.
     * <p>
     * This method doesn't do type checks with the given parameter, it is only there
     * to avoid casting in your code. This might however change (type checks could
     * be added) in a future major release.
     * <p>
     * See examples in javadoc for {@link Matchers} class
     * 
     * @param clazz Type owned by the list to avoid casting
     * @return empty List.
     

----------------------


     Method public static Set<T> anySetOf(Class<T> clazz)    (Matchers.java)

     
          * Generic friendly alias to {@link Matchers#anySet()}.
          * It's an alternative to &#064;SuppressWarnings("unchecked") to keep code clean of compiler warnings.
          * <p>
          * Any non-null <code>Set</code>.
          * <p>
          * This method doesn't do type checks with the given parameter, it is only there
          * to avoid casting in your code. This might however change (type checks could
          * be added) in a future major release.
          * <p>
          * See examples in javadoc for {@link Matchers} class
          *
          * @param clazz Type owned by the Set to avoid casting
          * @return empty Set
          

     ----------------------


          Method public static T any(Class<T> clazz)    (Matchers.java)

          
               * Matches any object, including nulls
               * <p>
               * This method doesn't do type checks with the given parameter, it is only there
               * to avoid casting in your code. This might however change (type checks could
               * be added) in a future major release.
               * <p>
               * See examples in javadoc for {@link Matchers} class
               * <p>
               * This is an alias of: {@link #any()} and {@link #anyObject()}
               * <p>
               * @return <code>null</code>.
               

          ----------------------




Method public static VerificationMode never()  (Mockito.java)
     Method public static VerificationMode only()  (Mockito.java)
          Method public static VerificationMode atLeastOnce()  (Mockito.java)

Method public static VerificationMode never()    (Mockito.java)


     * Alias to <code>times(0)</code>, see {@link Mockito#times(int)}
     * <p>
     * Verifies that interaction did not happen. E.g:
     * <pre class="code"><code class="java">
     *   verify(mock, never()).someMethod();
     * </code></pre>
     *
     * <p>
     * If you want to verify there were NO interactions with the mock
     * check out {@link Mockito#verifyZeroInteractions(Object...)}
     * or {@link Mockito#verifyNoMoreInteractions(Object...)}
     * <p>
     * See examples in javadoc for {@link Mockito} class
     *
     * @return verification mode
     

----------------------


     Method public static VerificationMode only()    (Mockito.java)

     
          * Allows checking if given method was the only one invoked. E.g:
          * <pre class="code"><code class="java">
          *   verify(mock, only()).someMethod();
          *   //above is a shorthand for following 2 lines of code:
          *   verify(mock).someMethod();
          *   verifyNoMoreInvocations(mock);
          * </code></pre>
          *
          * <p>
          * See also {@link Mockito#verifyNoMoreInteractions(Object...)}
          * <p>
          * See examples in javadoc for {@link Mockito} class
          *
          * @return verification mode
          

     ----------------------


          Method public static VerificationMode atLeastOnce()    (Mockito.java)

          
               * Allows at-least-once verification. E.g:
               * <pre class="code"><code class="java">
               *   verify(mock, atLeastOnce()).someMethod("some arg");
               * </code></pre>
               * Alias to <code>atLeast(1)</code>.
               * <p>
               * See examples in javadoc for {@link Mockito} class
               *
               * @return verification mode
               

          ----------------------




Method T verify(T mock, VerificationMode mode)  (InOrder.java)
     Method T verify(T mock)  (InOrder.java)
          Interface InOrder  (InOrder.java)

Method T verify(T mock, VerificationMode mode)    (InOrder.java)


     * Verifies interaction in order. E.g:
     * 
     * <pre class="code"><code class="java">
     * InOrder inOrder = inOrder(firstMock, secondMock);
     * 
     * inOrder.verify(firstMock, times(2)).someMethod("was called first two times");
     * inOrder.verify(secondMock, atLeastOnce()).someMethod("was called second at least once");
     * </code></pre>
     * 
     * See examples in javadoc for {@link Mockito} class
     * 
     * @param mock to be verified
     * @param mode for example times(x) or atLeastOnce()
     * 
     * @return mock object itself
     

----------------------


     Method T verify(T mock)    (InOrder.java)

     
          * Verifies interaction <b>happened once</b> in order.
          * <p>
          * Alias to <code>inOrder.verify(mock, times(1))</code>
          * <p>
          * Example:
          * <pre class="code"><code class="java">
          * InOrder inOrder = inOrder(firstMock, secondMock);
          * 
          * inOrder.verify(firstMock).someMethod("was called first");
          * inOrder.verify(secondMock).someMethod("was called second");
          * </code></pre>
          * 
          * See examples in javadoc for {@link Mockito} class
          * 
          * @param mock to be verified
          * 
          * @return mock object itself
          

     ----------------------


          Interface InOrder    (InOrder.java)

          
           * Allows verification in order. E.g:
           * 
           * <pre class="code"><code class="java">
           * InOrder inOrder = inOrder(firstMock, secondMock);
           * 
           * inOrder.verify(firstMock).add("was called first");
           * inOrder.verify(secondMock).add("was called second");
           * </code></pre>
           * 
           * As of Mockito 1.8.4 you can verifyNoMoreInvocations() in order-sensitive way. Read more: {@link InOrder#verifyNoMoreInteractions()}
           * <p>
           * 
           * See examples in javadoc for {@link Mockito} class
           

          ----------------------




Method public VerificationMode only()  (VerificationWithTimeout.java)
     Method public static VerificationMode only()  (Mockito.java)
          Method public static VerificationMode atLeastOnce()  (Mockito.java)

Method public VerificationMode only()    (VerificationWithTimeout.java)


     * Allows checking if given method was the only one invoked. E.g:
     * <pre class="code"><code class="java">
     *   verify(mock, only()).someMethod();
     *   //above is a shorthand for following 2 lines of code:
     *   verify(mock).someMethod();
     *   verifyNoMoreInvocations(mock);
     * </code></pre>
     * 
     * <p>
     * See also {@link Mockito#verifyNoMoreInteractions(Object...)}
     * <p>
     * See examples in javadoc for {@link Mockito} class
     * 
     * @return verification mode
     

----------------------


     Method public static VerificationMode only()    (Mockito.java)

     
          * Allows checking if given method was the only one invoked. E.g:
          * <pre class="code"><code class="java">
          *   verify(mock, only()).someMethod();
          *   //above is a shorthand for following 2 lines of code:
          *   verify(mock).someMethod();
          *   verifyNoMoreInvocations(mock);
          * </code></pre>
          *
          * <p>
          * See also {@link Mockito#verifyNoMoreInteractions(Object...)}
          * <p>
          * See examples in javadoc for {@link Mockito} class
          *
          * @return verification mode
          

     ----------------------


          Method public static VerificationMode atLeastOnce()    (Mockito.java)

          
               * Allows at-least-once verification. E.g:
               * <pre class="code"><code class="java">
               *   verify(mock, atLeastOnce()).someMethod("some arg");
               * </code></pre>
               * Alias to <code>atLeast(1)</code>.
               * <p>
               * See examples in javadoc for {@link Mockito} class
               *
               * @return verification mode
               

          ----------------------




Method public EqualsBuilder append(double lhs, double rhs)  (EqualsBuilder.java)
     Method public EqualsBuilder append(float lhs, float rhs)  (EqualsBuilder.java)
          Method public EqualsBuilder append(int lhs, int rhs)  (EqualsBuilder.java)

Method public EqualsBuilder append(double lhs, double rhs)    (EqualsBuilder.java)


     * <p>Test if two <code>double</code>s are equal by testing that the
     * pattern of bits returned by <code>doubleToLong</code> are equal.</p>
     *
     * <p>This handles NaNs, Infinities, and <code>-0.0</code>.</p>
     *
     * <p>It is compatible with the hash code generated by
     * <code>HashCodeBuilder</code>.</p>
     *
     * @param lhs  the left hand <code>double</code>
     * @param rhs  the right hand <code>double</code>
     * @return EqualsBuilder - used to chain calls.
     

----------------------


     Method public EqualsBuilder append(float lhs, float rhs)    (EqualsBuilder.java)

     
          * <p>Test if two <code>float</code>s are equal byt testing that the
          * pattern of bits returned by doubleToLong are equal.</p>
          *
          * <p>This handles NaNs, Infinities, and <code>-0.0</code>.</p>
          *
          * <p>It is compatible with the hash code generated by
          * <code>HashCodeBuilder</code>.</p>
          *
          * @param lhs  the left hand <code>float</code>
          * @param rhs  the right hand <code>float</code>
          * @return EqualsBuilder - used to chain calls.
          

     ----------------------


          Method public EqualsBuilder append(int lhs, int rhs)    (EqualsBuilder.java)

          
               * <p>Test if two <code>int</code>s are equal.</p>
               *
               * @param lhs  the left hand <code>int</code>
               * @param rhs  the right hand <code>int</code>
               * @return EqualsBuilder - used to chain calls.
               

          ----------------------




Method Stubber doThrow(Throwable... toBeThrown)  (Stubber.java)
     Method Stubber doReturn(Object toBeReturned)  (Stubber.java)
     Method Stubber doNothing()  (Stubber.java)
          Method Stubber doCallRealMethod()  (Stubber.java)
     Method Stubber doAnswer(Answer answer)  (Stubber.java)

Method Stubber doThrow(Throwable... toBeThrown)    (Stubber.java)


     * Use it for stubbing consecutive calls in {@link Mockito#doThrow(Throwable[])} style:
     * <pre class="code"><code class="java">
     *   doThrow(new RuntimeException("one")).
     *   doThrow(new RuntimeException("two"))
     *       .when(mock).someVoidMethod();
     * </code></pre>
     * See javadoc for {@link Mockito#doThrow(Throwable[])}
     * 
     * @param toBeThrown to be thrown when the stubbed method is called
     * @return stubber - to select a method for stubbing
     

----------------------


     Method Stubber doReturn(Object toBeReturned)    (Stubber.java)

     
          * Use it for stubbing consecutive calls in {@link Mockito#doReturn(Object)} style.
          * <p>
          * See javadoc for {@link Mockito#doReturn(Object)}
          * 
          * @param toBeReturned to be returned when the stubbed method is called
          * @return stubber - to select a method for stubbing
          

     ----------------------


     Method Stubber doNothing()    (Stubber.java)

     
          * Use it for stubbing consecutive calls in {@link Mockito#doNothing()} style:
          * <pre class="code"><code class="java">
          *   doNothing().
          *   doThrow(new RuntimeException("two"))
          *       .when(mock).someVoidMethod();
          * </code></pre>
          * See javadoc for {@link Mockito#doNothing()}
          * 
          * @return stubber - to select a method for stubbing
          

     ----------------------


          Method Stubber doCallRealMethod()    (Stubber.java)

          
               * Use it for stubbing consecutive calls in {@link Mockito#doCallRealMethod()} style.
               * <p>
               * See javadoc for {@link Mockito#doCallRealMethod()}
               *
               * @return stubber - to select a method for stubbing
               

          ----------------------


     Method Stubber doAnswer(Answer answer)    (Stubber.java)

     
          * Use it for stubbing consecutive calls in {@link Mockito#doAnswer(Answer)} style:
          * <pre class="code"><code class="java">
          *   doAnswer(answerOne).
          *   doAnswer(answerTwo)
          *       .when(mock).someVoidMethod();
          * </code></pre>
          * See javadoc for {@link Mockito#doAnswer(Answer)}
          * 
          * @param answer to answer when the stubbed method is called
          * @return stubber - to select a method for stubbing
          

     ----------------------




Method public static boolean booleanThat(Matcher<Boolean> matcher)  (MockitoHamcrest.java)
     Method public static char charThat(Matcher<Character> matcher)  (MockitoHamcrest.java)
          Method public static int intThat(ArgumentMatcher<Integer> matcher)  (Matchers.java)

Method public static boolean booleanThat(Matcher<Boolean> matcher)    (MockitoHamcrest.java)


     * Enables integrating hamcrest matchers that match primitive <code>boolean</code> arguments.
     * Note that {@link #argThat} will not work with primitive <code>boolean</code> matchers due to <code>NullPointerException</code> auto-unboxing caveat.
     * <p/>
     * See examples in javadoc for {@link MockitoHamcrest} class
     *
     * @param matcher decides whether argument matches
     * @return <code>false</code>.
     

----------------------


     Method public static char charThat(Matcher<Character> matcher)    (MockitoHamcrest.java)

     
          * Enables integrating hamcrest matchers that match primitive <code>char</code> arguments.
          * Note that {@link #argThat} will not work with primitive <code>char</code> matchers due to <code>NullPointerException</code> auto-unboxing caveat.
          * <p/>
          * See examples in javadoc for {@link MockitoHamcrest} class
          *
          * @param matcher decides whether argument matches
          * @return <code>0</code>.
          

     ----------------------


          Method public static int intThat(ArgumentMatcher<Integer> matcher)    (Matchers.java)

          
               * Allows creating custom <code>int</code> argument matchers.
               * Note that {@link #argThat} will not work with primitive <code>int</code> matchers due to <code>NullPointerException</code> auto-unboxing caveat.
               * <p>
               * See examples in javadoc for {@link Matchers} class
               * 
               * @param matcher decides whether argument matches
               * @return <code>0</code>.
               

          ----------------------




Method public static double doubleThat(Matcher<Double> matcher)  (MockitoHamcrest.java)
     Method public static char charThat(Matcher<Character> matcher)  (MockitoHamcrest.java)
          Method public static int intThat(ArgumentMatcher<Integer> matcher)  (Matchers.java)

Method public static double doubleThat(Matcher<Double> matcher)    (MockitoHamcrest.java)


     * Enables integrating hamcrest matchers that match primitive <code>double</code> arguments.
     * Note that {@link #argThat} will not work with primitive <code>double</code> matchers due to <code>NullPointerException</code> auto-unboxing caveat.
     * <p/>
     * * See examples in javadoc for {@link MockitoHamcrest} class
     *
     * @param matcher decides whether argument matches
     * @return <code>0</code>.
     

----------------------


     Method public static char charThat(Matcher<Character> matcher)    (MockitoHamcrest.java)

     
          * Enables integrating hamcrest matchers that match primitive <code>char</code> arguments.
          * Note that {@link #argThat} will not work with primitive <code>char</code> matchers due to <code>NullPointerException</code> auto-unboxing caveat.
          * <p/>
          * See examples in javadoc for {@link MockitoHamcrest} class
          *
          * @param matcher decides whether argument matches
          * @return <code>0</code>.
          

     ----------------------


          Method public static int intThat(ArgumentMatcher<Integer> matcher)    (Matchers.java)

          
               * Allows creating custom <code>int</code> argument matchers.
               * Note that {@link #argThat} will not work with primitive <code>int</code> matchers due to <code>NullPointerException</code> auto-unboxing caveat.
               * <p>
               * See examples in javadoc for {@link Matchers} class
               * 
               * @param matcher decides whether argument matches
               * @return <code>0</code>.
               

          ----------------------




Method public static short shortThat(Matcher<Short> matcher)  (MockitoHamcrest.java)
     Method public static char charThat(Matcher<Character> matcher)  (MockitoHamcrest.java)
          Method public static int intThat(ArgumentMatcher<Integer> matcher)  (Matchers.java)

Method public static short shortThat(Matcher<Short> matcher)    (MockitoHamcrest.java)


     * Enables integrating hamcrest matchers that match primitive <code>short</code> arguments.
     * Note that {@link #argThat} will not work with primitive <code>short</code> matchers due to <code>NullPointerException</code> auto-unboxing caveat.
     * <p/>
     * * See examples in javadoc for {@link MockitoHamcrest} class
     *
     * @param matcher decides whether argument matches
     * @return <code>0</code>.
     

----------------------


     Method public static char charThat(Matcher<Character> matcher)    (MockitoHamcrest.java)

     
          * Enables integrating hamcrest matchers that match primitive <code>char</code> arguments.
          * Note that {@link #argThat} will not work with primitive <code>char</code> matchers due to <code>NullPointerException</code> auto-unboxing caveat.
          * <p/>
          * See examples in javadoc for {@link MockitoHamcrest} class
          *
          * @param matcher decides whether argument matches
          * @return <code>0</code>.
          

     ----------------------


          Method public static int intThat(ArgumentMatcher<Integer> matcher)    (Matchers.java)

          
               * Allows creating custom <code>int</code> argument matchers.
               * Note that {@link #argThat} will not work with primitive <code>int</code> matchers due to <code>NullPointerException</code> auto-unboxing caveat.
               * <p>
               * See examples in javadoc for {@link Matchers} class
               * 
               * @param matcher decides whether argument matches
               * @return <code>0</code>.
               

          ----------------------




Method public static float floatThat(Matcher<Float> matcher)  (MockitoHamcrest.java)
     Method public static char charThat(Matcher<Character> matcher)  (MockitoHamcrest.java)
          Method public static int intThat(ArgumentMatcher<Integer> matcher)  (Matchers.java)

Method public static float floatThat(Matcher<Float> matcher)    (MockitoHamcrest.java)


     * Enables integrating hamcrest matchers that match primitive <code>float</code> arguments.
     * Note that {@link #argThat} will not work with primitive <code>float</code> matchers due to <code>NullPointerException</code> auto-unboxing caveat.
     * <p/>
     * * See examples in javadoc for {@link MockitoHamcrest} class
     *
     * @param matcher decides whether argument matches
     * @return <code>0</code>.
     

----------------------


     Method public static char charThat(Matcher<Character> matcher)    (MockitoHamcrest.java)

     
          * Enables integrating hamcrest matchers that match primitive <code>char</code> arguments.
          * Note that {@link #argThat} will not work with primitive <code>char</code> matchers due to <code>NullPointerException</code> auto-unboxing caveat.
          * <p/>
          * See examples in javadoc for {@link MockitoHamcrest} class
          *
          * @param matcher decides whether argument matches
          * @return <code>0</code>.
          

     ----------------------


          Method public static int intThat(ArgumentMatcher<Integer> matcher)    (Matchers.java)

          
               * Allows creating custom <code>int</code> argument matchers.
               * Note that {@link #argThat} will not work with primitive <code>int</code> matchers due to <code>NullPointerException</code> auto-unboxing caveat.
               * <p>
               * See examples in javadoc for {@link Matchers} class
               * 
               * @param matcher decides whether argument matches
               * @return <code>0</code>.
               

          ----------------------




Method public static T[] aryEq(T[] value)  (AdditionalMatchers.java)
     Method public static int[] aryEq(int[] value)  (AdditionalMatchers.java)
     Method public static T same(T value)  (Matchers.java)
          Method public static int lt(int value)  (AdditionalMatchers.java)

Method public static T[] aryEq(T[] value)    (AdditionalMatchers.java)


     * Object array argument that is equal to the given array, i.e. it has to
     * have the same type, length, and each element has to be equal.
     * <p>
     * See examples in javadoc for {@link AdditionalMatchers} class
     * 
     * @param <T>
     *            the type of the array, it is passed through to prevent casts.
     * @param value
     *            the given array.
     * @return <code>null</code>.
     

----------------------


     Method public static int[] aryEq(int[] value)    (AdditionalMatchers.java)

     
          * int array argument that is equal to the given array, i.e. it has to have
          * the same length, and each element has to be equal.
          * <p>
          * See examples in javadoc for {@link AdditionalMatchers} class
          * 
          * @param value
          *            the given array.
          * @return <code>null</code>.
          

     ----------------------


     Method public static T same(T value)    (Matchers.java)

     
          * Object argument that is the same as the given value.
          * <p>
          * See examples in javadoc for {@link Matchers} class
          * 
          * @param <T>
          *            the type of the object, it is passed through to prevent casts.
          * @param value
          *            the given value.
          * @return <code>null</code>.
          

     ----------------------


          Method public static int lt(int value)    (AdditionalMatchers.java)

          
               * int argument less than the given value.
               * <p>
               * See examples in javadoc for {@link AdditionalMatchers} class
               * 
               * @param value
               *            the given value.
               * @return <code>0</code>.
               

          ----------------------




Method public static byte byteThat(Matcher<Byte> matcher)  (MockitoHamcrest.java)
     Method public static char charThat(Matcher<Character> matcher)  (MockitoHamcrest.java)
          Method public static int intThat(ArgumentMatcher<Integer> matcher)  (Matchers.java)

Method public static byte byteThat(Matcher<Byte> matcher)    (MockitoHamcrest.java)


     * Enables integrating hamcrest matchers that match primitive <code>byte</code> arguments.
     * Note that {@link #argThat} will not work with primitive <code>byte</code> matchers due to <code>NullPointerException</code> auto-unboxing caveat.
     * <p/>
     * * See examples in javadoc for {@link MockitoHamcrest} class
     *
     * @param matcher decides whether argument matches
     * @return <code>0</code>.
     

----------------------


     Method public static char charThat(Matcher<Character> matcher)    (MockitoHamcrest.java)

     
          * Enables integrating hamcrest matchers that match primitive <code>char</code> arguments.
          * Note that {@link #argThat} will not work with primitive <code>char</code> matchers due to <code>NullPointerException</code> auto-unboxing caveat.
          * <p/>
          * See examples in javadoc for {@link MockitoHamcrest} class
          *
          * @param matcher decides whether argument matches
          * @return <code>0</code>.
          

     ----------------------


          Method public static int intThat(ArgumentMatcher<Integer> matcher)    (Matchers.java)

          
               * Allows creating custom <code>int</code> argument matchers.
               * Note that {@link #argThat} will not work with primitive <code>int</code> matchers due to <code>NullPointerException</code> auto-unboxing caveat.
               * <p>
               * See examples in javadoc for {@link Matchers} class
               * 
               * @param matcher decides whether argument matches
               * @return <code>0</code>.
               

          ----------------------




Method public static long longThat(Matcher<Long> matcher)  (MockitoHamcrest.java)
     Method public static char charThat(Matcher<Character> matcher)  (MockitoHamcrest.java)
          Method public static int intThat(ArgumentMatcher<Integer> matcher)  (Matchers.java)

Method public static long longThat(Matcher<Long> matcher)    (MockitoHamcrest.java)


     * Enables integrating hamcrest matchers that match primitive <code>long</code> arguments.
     * Note that {@link #argThat} will not work with primitive <code>long</code> matchers due to <code>NullPointerException</code> auto-unboxing caveat.
     * <p/>
     * * See examples in javadoc for {@link MockitoHamcrest} class
     *
     * @param matcher decides whether argument matches
     * @return <code>0</code>.
     

----------------------


     Method public static char charThat(Matcher<Character> matcher)    (MockitoHamcrest.java)

     
          * Enables integrating hamcrest matchers that match primitive <code>char</code> arguments.
          * Note that {@link #argThat} will not work with primitive <code>char</code> matchers due to <code>NullPointerException</code> auto-unboxing caveat.
          * <p/>
          * See examples in javadoc for {@link MockitoHamcrest} class
          *
          * @param matcher decides whether argument matches
          * @return <code>0</code>.
          

     ----------------------


          Method public static int intThat(ArgumentMatcher<Integer> matcher)    (Matchers.java)

          
               * Allows creating custom <code>int</code> argument matchers.
               * Note that {@link #argThat} will not work with primitive <code>int</code> matchers due to <code>NullPointerException</code> auto-unboxing caveat.
               * <p>
               * See examples in javadoc for {@link Matchers} class
               * 
               * @param matcher decides whether argument matches
               * @return <code>0</code>.
               

          ----------------------




Method public static int intThat(Matcher<Integer> matcher)  (MockitoHamcrest.java)
     Method public static char charThat(Matcher<Character> matcher)  (MockitoHamcrest.java)
          Method public static int intThat(ArgumentMatcher<Integer> matcher)  (Matchers.java)

Method public static int intThat(Matcher<Integer> matcher)    (MockitoHamcrest.java)


     * Enables integrating hamcrest matchers that match primitive <code>int</code> arguments.
     * Note that {@link #argThat} will not work with primitive <code>int</code> matchers due to <code>NullPointerException</code> auto-unboxing caveat.
     * <p/>
     * * See examples in javadoc for {@link MockitoHamcrest} class
     *
     * @param matcher decides whether argument matches
     * @return <code>0</code>.
     

----------------------


     Method public static char charThat(Matcher<Character> matcher)    (MockitoHamcrest.java)

     
          * Enables integrating hamcrest matchers that match primitive <code>char</code> arguments.
          * Note that {@link #argThat} will not work with primitive <code>char</code> matchers due to <code>NullPointerException</code> auto-unboxing caveat.
          * <p/>
          * See examples in javadoc for {@link MockitoHamcrest} class
          *
          * @param matcher decides whether argument matches
          * @return <code>0</code>.
          

     ----------------------


          Method public static int intThat(ArgumentMatcher<Integer> matcher)    (Matchers.java)

          
               * Allows creating custom <code>int</code> argument matchers.
               * Note that {@link #argThat} will not work with primitive <code>int</code> matchers due to <code>NullPointerException</code> auto-unboxing caveat.
               * <p>
               * See examples in javadoc for {@link Matchers} class
               * 
               * @param matcher decides whether argument matches
               * @return <code>0</code>.
               

          ----------------------




Method public static VerificationMode times(int wantedNumberOfInvocations)  (Mockito.java)
     Method public static VerificationMode atMost(int maxNumberOfInvocations)  (Mockito.java)
          Method public static VerificationMode atLeastOnce()  (Mockito.java)

Method public static VerificationMode times(int wantedNumberOfInvocations)    (Mockito.java)


     * Allows verifying exact number of invocations. E.g:
     * <pre class="code"><code class="java">
     *   verify(mock, times(2)).someMethod("some arg");
     * </code></pre>
     *
     * See examples in javadoc for {@link Mockito} class
     *
     * @param wantedNumberOfInvocations wanted number of invocations
     *
     * @return verification mode
     

----------------------


     Method public static VerificationMode atMost(int maxNumberOfInvocations)    (Mockito.java)

     
          * Allows at-most-x verification. E.g:
          * <pre class="code"><code class="java">
          *   verify(mock, atMost(3)).someMethod("some arg");
          * </code></pre>
          *
          * See examples in javadoc for {@link Mockito} class
          *
          * @param maxNumberOfInvocations max number of invocations
          *
          * @return verification mode
          

     ----------------------


          Method public static VerificationMode atLeastOnce()    (Mockito.java)

          
               * Allows at-least-once verification. E.g:
               * <pre class="code"><code class="java">
               *   verify(mock, atLeastOnce()).someMethod("some arg");
               * </code></pre>
               * Alias to <code>atLeast(1)</code>.
               * <p>
               * See examples in javadoc for {@link Mockito} class
               *
               * @return verification mode
               

          ----------------------




Method public static float eq(float value, float delta)  (AdditionalMatchers.java)
     Method public static float lt(float value)  (AdditionalMatchers.java)
          Method public static int lt(int value)  (AdditionalMatchers.java)

Method public static float eq(float value, float delta)    (AdditionalMatchers.java)


     * float argument that has an absolute difference to the given value that is
     * less than the given delta details.
     * <p>
     * See examples in javadoc for {@link AdditionalMatchers} class
     * 
     * @param value
     *            the given value.
     * @param delta
     *            the given delta.
     * @return <code>0</code>.
     

----------------------


     Method public static float lt(float value)    (AdditionalMatchers.java)

     
          * float argument less than the given value.
          * <p>
          * See examples in javadoc for {@link AdditionalMatchers} class
          * 
          * @param value
          *            the given value.
          * @return <code>0</code>.
          

     ----------------------


          Method public static int lt(int value)    (AdditionalMatchers.java)

          
               * int argument less than the given value.
               * <p>
               * See examples in javadoc for {@link AdditionalMatchers} class
               * 
               * @param value
               *            the given value.
               * @return <code>0</code>.
               

          ----------------------




Method public static boolean and(boolean first, boolean second)  (AdditionalMatchers.java)
     Method public static boolean not(boolean first)  (AdditionalMatchers.java)
          Method public static int not(int first)  (AdditionalMatchers.java)

Method public static boolean and(boolean first, boolean second)    (AdditionalMatchers.java)


     * boolean argument that matches both given matchers.
     * <p>
     * See examples in javadoc for {@link AdditionalMatchers} class
     * 
     * @param first
     *            placeholder for the first argument matcher.
     * @param second
     *            placeholder for the second argument matcher.
     * @return <code>false</code>.
     

----------------------


     Method public static boolean not(boolean first)    (AdditionalMatchers.java)

     
          * boolean argument that does not match the given argument matcher.
          * <p>
          * See examples in javadoc for {@link AdditionalMatchers} class
          * 
          * @param first
          *            placeholder for the argument matcher.
          * @return <code>false</code>.
          

     ----------------------


          Method public static int not(int first)    (AdditionalMatchers.java)

          
               * int argument that does not match the given argument matcher.
               * <p>
               * See examples in javadoc for {@link AdditionalMatchers} class
               * 
               * @param first
               *            placeholder for the argument matcher.
               * @return <code>0</code>.
               

          ----------------------




Method public static VerificationMode atLeast(int minNumberOfInvocations)  (Mockito.java)
     Method public static VerificationMode atMost(int maxNumberOfInvocations)  (Mockito.java)
          Method public static VerificationMode atLeastOnce()  (Mockito.java)

Method public static VerificationMode atLeast(int minNumberOfInvocations)    (Mockito.java)


     * Allows at-least-x verification. E.g:
     * <pre class="code"><code class="java">
     *   verify(mock, atLeast(3)).someMethod("some arg");
     * </code></pre>
     *
     * See examples in javadoc for {@link Mockito} class
     *
     * @param minNumberOfInvocations minimum number of invocations
     *
     * @return verification mode
     

----------------------


     Method public static VerificationMode atMost(int maxNumberOfInvocations)    (Mockito.java)

     
          * Allows at-most-x verification. E.g:
          * <pre class="code"><code class="java">
          *   verify(mock, atMost(3)).someMethod("some arg");
          * </code></pre>
          *
          * See examples in javadoc for {@link Mockito} class
          *
          * @param maxNumberOfInvocations max number of invocations
          *
          * @return verification mode
          

     ----------------------


          Method public static VerificationMode atLeastOnce()    (Mockito.java)

          
               * Allows at-least-once verification. E.g:
               * <pre class="code"><code class="java">
               *   verify(mock, atLeastOnce()).someMethod("some arg");
               * </code></pre>
               * Alias to <code>atLeast(1)</code>.
               * <p>
               * See examples in javadoc for {@link Mockito} class
               *
               * @return verification mode
               

          ----------------------




Method public static T notNull(Class<T> clazz)  (Matchers.java)
     Method public static T isNotNull(Class<T> clazz)  (Matchers.java)
          Method public static T isNull(Class<T> clazz)  (Matchers.java)

Method public static T notNull(Class<T> clazz)    (Matchers.java)


     * Not <code>null</code> argument, not necessary of the given class.
     * The class argument is provided to avoid casting.
     * <p>
     * alias to {@link Matchers#isNotNull(Class)}
     * <p>
     * See examples in javadoc for {@link Matchers} class
     *
     * @param clazz Type to avoid casting
     * @return <code>null</code>.
     

----------------------


     Method public static T isNotNull(Class<T> clazz)    (Matchers.java)

     
          * Not <code>null</code> argument, not necessary of the given class.
          * The class argument is provided to avoid casting.
          * <p>
          * alias to {@link Matchers#notNull(Class)}
          * <p>
          * See examples in javadoc for {@link Matchers} class
          *
          * @param clazz Type to avoid casting
          * @return <code>null</code>.
          

     ----------------------


          Method public static T isNull(Class<T> clazz)    (Matchers.java)

          
               * <code>null</code> argument.
               * The class argument is provided to avoid casting.
               * <p>
               * See examples in javadoc for {@link Matchers} class
               *
               * @param clazz Type to avoid casting
               * @return <code>null</code>.
               

          ----------------------




Method public EqualsBuilder append(long[] lhs, long[] rhs)  (EqualsBuilder.java)
     Method public EqualsBuilder append(int[] lhs, int[] rhs)  (EqualsBuilder.java)
          Method public EqualsBuilder append(int lhs, int rhs)  (EqualsBuilder.java)

Method public EqualsBuilder append(long[] lhs, long[] rhs)    (EqualsBuilder.java)


     * <p>Deep comparison of array of <code>long</code>. Length and all
     * values are compared.</p>
     *
     * <p>The method {@link #append(long, long)} is used.</p>
     *
     * @param lhs  the left hand <code>long[]</code>
     * @param rhs  the right hand <code>long[]</code>
     * @return EqualsBuilder - used to chain calls.
     

----------------------


     Method public EqualsBuilder append(int[] lhs, int[] rhs)    (EqualsBuilder.java)

     
          * <p>Deep comparison of array of <code>int</code>. Length and all
          * values are compared.</p>
          *
          * <p>The method {@link #append(int, int)} is used.</p>
          *
          * @param lhs  the left hand <code>int[]</code>
          * @param rhs  the right hand <code>int[]</code>
          * @return EqualsBuilder - used to chain calls.
          

     ----------------------


          Method public EqualsBuilder append(int lhs, int rhs)    (EqualsBuilder.java)

          
               * <p>Test if two <code>int</code>s are equal.</p>
               *
               * @param lhs  the left hand <code>int</code>
               * @param rhs  the right hand <code>int</code>
               * @return EqualsBuilder - used to chain calls.
               

          ----------------------




Method InstantiatorProvider getInstantiatorProvider()  (PluginRegistry.java)
     Method MockMaker getMockMaker()  (PluginRegistry.java)
          Method public static MockMaker getMockMaker()  (Plugins.java)

Method InstantiatorProvider getInstantiatorProvider()    (PluginRegistry.java)


     * Returns the instantiator provider available for the current runtime.
     *
     * <p>Returns {@link org.mockito.internal.creation.instance.DefaultInstantiatorProvider} if no
     * {@link org.mockito.plugins.InstantiatorProvider} extension exists or is visible in the current classpath.</p>
     

----------------------


     Method MockMaker getMockMaker()    (PluginRegistry.java)

     
          * Returns the implementation of the mock maker available for the current runtime.
          *
          * <p>Returns {@link org.mockito.internal.creation.cglib.CglibMockMaker} if no
          * {@link org.mockito.plugins.MockMaker} extension exists or is visible in the current classpath.</p>
          

     ----------------------


          Method public static MockMaker getMockMaker()    (Plugins.java)

          
               * Returns the implementation of the mock maker available for the current runtime.
               *
               * <p>Returns default mock maker if no
               * {@link org.mockito.plugins.MockMaker} extension exists or is visible in the current classpath.</p>
               

          ----------------------




Method public static T leq(Comparable<T> value)  (AdditionalMatchers.java)
     Method public static T eq(T value)  (Matchers.java)
          Method public static int lt(int value)  (AdditionalMatchers.java)

Method public static T leq(Comparable<T> value)    (AdditionalMatchers.java)


     * comparable argument less than or equal the given value details.
     * <p>
     * See examples in javadoc for {@link AdditionalMatchers} class
     * 
     * @param value
     *            the given value.
     * @return <code>null</code>.
     

----------------------


     Method public static T eq(T value)    (Matchers.java)

     
          * Object argument that is equal to the given value.
          * <p>
          * See examples in javadoc for {@link Matchers} class
          * 
          * @param value
          *            the given value.
          * @return <code>null</code>.
          

     ----------------------


          Method public static int lt(int value)    (AdditionalMatchers.java)

          
               * int argument less than the given value.
               * <p>
               * See examples in javadoc for {@link AdditionalMatchers} class
               * 
               * @param value
               *            the given value.
               * @return <code>0</code>.
               

          ----------------------




Method public static double leq(double value)  (AdditionalMatchers.java)
     Method public static T eq(T value)  (Matchers.java)
          Method public static int lt(int value)  (AdditionalMatchers.java)

Method public static double leq(double value)    (AdditionalMatchers.java)


     * double argument less than or equal to the given value.
     * <p>
     * See examples in javadoc for {@link AdditionalMatchers} class
     * 
     * @param value
     *            the given value.
     * @return <code>0</code>.
     

----------------------


     Method public static T eq(T value)    (Matchers.java)

     
          * Object argument that is equal to the given value.
          * <p>
          * See examples in javadoc for {@link Matchers} class
          * 
          * @param value
          *            the given value.
          * @return <code>null</code>.
          

     ----------------------


          Method public static int lt(int value)    (AdditionalMatchers.java)

          
               * int argument less than the given value.
               * <p>
               * See examples in javadoc for {@link AdditionalMatchers} class
               * 
               * @param value
               *            the given value.
               * @return <code>0</code>.
               

          ----------------------




Method public static short leq(short value)  (AdditionalMatchers.java)
     Method public static T eq(T value)  (Matchers.java)
          Method public static int lt(int value)  (AdditionalMatchers.java)

Method public static short leq(short value)    (AdditionalMatchers.java)


     * short argument less than or equal to the given value.
     * <p>
     * See examples in javadoc for {@link AdditionalMatchers} class 
     * 
     * @param value
     *            the given value.
     * @return <code>0</code>.
     

----------------------


     Method public static T eq(T value)    (Matchers.java)

     
          * Object argument that is equal to the given value.
          * <p>
          * See examples in javadoc for {@link Matchers} class
          * 
          * @param value
          *            the given value.
          * @return <code>null</code>.
          

     ----------------------


          Method public static int lt(int value)    (AdditionalMatchers.java)

          
               * int argument less than the given value.
               * <p>
               * See examples in javadoc for {@link AdditionalMatchers} class
               * 
               * @param value
               *            the given value.
               * @return <code>0</code>.
               

          ----------------------




Method public static boolean eq(boolean value)  (Matchers.java)
     Method public static T eq(T value)  (Matchers.java)
          Method public static int lt(int value)  (AdditionalMatchers.java)

Method public static boolean eq(boolean value)    (Matchers.java)


     * <code>boolean</code> argument that is equal to the given value.
     * <p>
     * See examples in javadoc for {@link Matchers} class
     * 
     * @param value
     *            the given value.
     * @return <code>0</code>.
     

----------------------


     Method public static T eq(T value)    (Matchers.java)

     
          * Object argument that is equal to the given value.
          * <p>
          * See examples in javadoc for {@link Matchers} class
          * 
          * @param value
          *            the given value.
          * @return <code>null</code>.
          

     ----------------------


          Method public static int lt(int value)    (AdditionalMatchers.java)

          
               * int argument less than the given value.
               * <p>
               * See examples in javadoc for {@link AdditionalMatchers} class
               * 
               * @param value
               *            the given value.
               * @return <code>0</code>.
               

          ----------------------




Method public static float leq(float value)  (AdditionalMatchers.java)
     Method public static T eq(T value)  (Matchers.java)
          Method public static int lt(int value)  (AdditionalMatchers.java)

Method public static float leq(float value)    (AdditionalMatchers.java)


     * float argument less than or equal to the given value.
     * <p>
     * See examples in javadoc for {@link AdditionalMatchers} class
     * 
     * @param value
     *            the given value.
     * @return <code>0</code>.
     

----------------------


     Method public static T eq(T value)    (Matchers.java)

     
          * Object argument that is equal to the given value.
          * <p>
          * See examples in javadoc for {@link Matchers} class
          * 
          * @param value
          *            the given value.
          * @return <code>null</code>.
          

     ----------------------


          Method public static int lt(int value)    (AdditionalMatchers.java)

          
               * int argument less than the given value.
               * <p>
               * See examples in javadoc for {@link AdditionalMatchers} class
               * 
               * @param value
               *            the given value.
               * @return <code>0</code>.
               

          ----------------------




Method public static double eq(double value)  (Matchers.java)
     Method public static T eq(T value)  (Matchers.java)
          Method public static int lt(int value)  (AdditionalMatchers.java)

Method public static double eq(double value)    (Matchers.java)


     * <code>double</code> argument that is equal to the given value.
     * <p>
     * See examples in javadoc for {@link Matchers} class
     * 
     * @param value
     *            the given value.
     * @return <code>0</code>.
     

----------------------


     Method public static T eq(T value)    (Matchers.java)

     
          * Object argument that is equal to the given value.
          * <p>
          * See examples in javadoc for {@link Matchers} class
          * 
          * @param value
          *            the given value.
          * @return <code>null</code>.
          

     ----------------------


          Method public static int lt(int value)    (AdditionalMatchers.java)

          
               * int argument less than the given value.
               * <p>
               * See examples in javadoc for {@link AdditionalMatchers} class
               * 
               * @param value
               *            the given value.
               * @return <code>0</code>.
               

          ----------------------




Method public static byte leq(byte value)  (AdditionalMatchers.java)
     Method public static T eq(T value)  (Matchers.java)
          Method public static int lt(int value)  (AdditionalMatchers.java)

Method public static byte leq(byte value)    (AdditionalMatchers.java)


     * byte argument less than or equal to the given value.
     * <p>
     * See examples in javadoc for {@link AdditionalMatchers} class
     * 
     * @param value
     *            the given value.
     * @return <code>0</code>.
     

----------------------


     Method public static T eq(T value)    (Matchers.java)

     
          * Object argument that is equal to the given value.
          * <p>
          * See examples in javadoc for {@link Matchers} class
          * 
          * @param value
          *            the given value.
          * @return <code>null</code>.
          

     ----------------------


          Method public static int lt(int value)    (AdditionalMatchers.java)

          
               * int argument less than the given value.
               * <p>
               * See examples in javadoc for {@link AdditionalMatchers} class
               * 
               * @param value
               *            the given value.
               * @return <code>0</code>.
               

          ----------------------




Method public static long leq(long value)  (AdditionalMatchers.java)
     Method public static T eq(T value)  (Matchers.java)
          Method public static int lt(int value)  (AdditionalMatchers.java)

Method public static long leq(long value)    (AdditionalMatchers.java)


     * long argument less than or equal to the given value.
     * <p>
     * See examples in javadoc for {@link AdditionalMatchers} class
     * 
     * @param value
     *            the given value.
     * @return <code>0</code>.
     

----------------------


     Method public static T eq(T value)    (Matchers.java)

     
          * Object argument that is equal to the given value.
          * <p>
          * See examples in javadoc for {@link Matchers} class
          * 
          * @param value
          *            the given value.
          * @return <code>null</code>.
          

     ----------------------


          Method public static int lt(int value)    (AdditionalMatchers.java)

          
               * int argument less than the given value.
               * <p>
               * See examples in javadoc for {@link AdditionalMatchers} class
               * 
               * @param value
               *            the given value.
               * @return <code>0</code>.
               

          ----------------------




Method public static T gt(Comparable<T> value)  (AdditionalMatchers.java)
     Method public static int gt(int value)  (AdditionalMatchers.java)
          Method public static int lt(int value)  (AdditionalMatchers.java)

Method public static T gt(Comparable<T> value)    (AdditionalMatchers.java)


     * comparable argument greater than the given value.
     * <p>
     * See examples in javadoc for {@link AdditionalMatchers} class
     * 
     * @param value
     *            the given value.
     * @return <code>null</code>.
     

----------------------


     Method public static int gt(int value)    (AdditionalMatchers.java)

     
          * int argument greater than the given value.
          * <p>
          * See examples in javadoc for {@link AdditionalMatchers} class
          * 
          * @param value
          *            the given value.
          * @return <code>0</code>.
          

     ----------------------


          Method public static int lt(int value)    (AdditionalMatchers.java)

          
               * int argument less than the given value.
               * <p>
               * See examples in javadoc for {@link AdditionalMatchers} class
               * 
               * @param value
               *            the given value.
               * @return <code>0</code>.
               

          ----------------------




Method public static float eq(float value)  (Matchers.java)
     Method public static T eq(T value)  (Matchers.java)
          Method public static int lt(int value)  (AdditionalMatchers.java)

Method public static float eq(float value)    (Matchers.java)


     * <code>float</code> argument that is equal to the given value.
     * <p>
     * See examples in javadoc for {@link Matchers} class
     * 
     * @param value
     *            the given value.
     * @return <code>0</code>.
     

----------------------


     Method public static T eq(T value)    (Matchers.java)

     
          * Object argument that is equal to the given value.
          * <p>
          * See examples in javadoc for {@link Matchers} class
          * 
          * @param value
          *            the given value.
          * @return <code>null</code>.
          

     ----------------------


          Method public static int lt(int value)    (AdditionalMatchers.java)

          
               * int argument less than the given value.
               * <p>
               * See examples in javadoc for {@link AdditionalMatchers} class
               * 
               * @param value
               *            the given value.
               * @return <code>0</code>.
               

          ----------------------




Method public static short eq(short value)  (Matchers.java)
     Method public static T eq(T value)  (Matchers.java)
          Method public static int lt(int value)  (AdditionalMatchers.java)

Method public static short eq(short value)    (Matchers.java)


     * <code>short</code> argument that is equal to the given value.
     * <p>
     * See examples in javadoc for {@link Matchers} class
     * 
     * @param value
     *            the given value.
     * @return <code>0</code>.
     

----------------------


     Method public static T eq(T value)    (Matchers.java)

     
          * Object argument that is equal to the given value.
          * <p>
          * See examples in javadoc for {@link Matchers} class
          * 
          * @param value
          *            the given value.
          * @return <code>null</code>.
          

     ----------------------


          Method public static int lt(int value)    (AdditionalMatchers.java)

          
               * int argument less than the given value.
               * <p>
               * See examples in javadoc for {@link AdditionalMatchers} class
               * 
               * @param value
               *            the given value.
               * @return <code>0</code>.
               

          ----------------------




Method public static int leq(int value)  (AdditionalMatchers.java)
     Method public static T eq(T value)  (Matchers.java)
          Method public static int lt(int value)  (AdditionalMatchers.java)

Method public static int leq(int value)    (AdditionalMatchers.java)


     * int argument less than or equal to the given value.
     * <p>
     * See examples in javadoc for {@link AdditionalMatchers} class
     * 
     * @param value
     *            the given value.
     * @return <code>0</code>.
     

----------------------


     Method public static T eq(T value)    (Matchers.java)

     
          * Object argument that is equal to the given value.
          * <p>
          * See examples in javadoc for {@link Matchers} class
          * 
          * @param value
          *            the given value.
          * @return <code>null</code>.
          

     ----------------------


          Method public static int lt(int value)    (AdditionalMatchers.java)

          
               * int argument less than the given value.
               * <p>
               * See examples in javadoc for {@link AdditionalMatchers} class
               * 
               * @param value
               *            the given value.
               * @return <code>0</code>.
               

          ----------------------




Method public static byte eq(byte value)  (Matchers.java)
     Method public static T eq(T value)  (Matchers.java)
          Method public static int lt(int value)  (AdditionalMatchers.java)

Method public static byte eq(byte value)    (Matchers.java)


     * <code>byte</code> argument that is equal to the given value.
     * <p>
     * See examples in javadoc for {@link Matchers} class
     * 
     * @param value
     *            the given value.
     * @return <code>0</code>.
     

----------------------


     Method public static T eq(T value)    (Matchers.java)

     
          * Object argument that is equal to the given value.
          * <p>
          * See examples in javadoc for {@link Matchers} class
          * 
          * @param value
          *            the given value.
          * @return <code>null</code>.
          

     ----------------------


          Method public static int lt(int value)    (AdditionalMatchers.java)

          
               * int argument less than the given value.
               * <p>
               * See examples in javadoc for {@link AdditionalMatchers} class
               * 
               * @param value
               *            the given value.
               * @return <code>0</code>.
               

          ----------------------




Method public static char eq(char value)  (Matchers.java)
     Method public static T eq(T value)  (Matchers.java)
          Method public static int lt(int value)  (AdditionalMatchers.java)

Method public static char eq(char value)    (Matchers.java)


     * <code>char</code> argument that is equal to the given value.
     * <p>
     * See examples in javadoc for {@link Matchers} class
     * 
     * @param value
     *            the given value.
     * @return <code>0</code>.
     

----------------------


     Method public static T eq(T value)    (Matchers.java)

     
          * Object argument that is equal to the given value.
          * <p>
          * See examples in javadoc for {@link Matchers} class
          * 
          * @param value
          *            the given value.
          * @return <code>null</code>.
          

     ----------------------


          Method public static int lt(int value)    (AdditionalMatchers.java)

          
               * int argument less than the given value.
               * <p>
               * See examples in javadoc for {@link AdditionalMatchers} class
               * 
               * @param value
               *            the given value.
               * @return <code>0</code>.
               

          ----------------------




Method public static long eq(long value)  (Matchers.java)
     Method public static T eq(T value)  (Matchers.java)
          Method public static int lt(int value)  (AdditionalMatchers.java)

Method public static long eq(long value)    (Matchers.java)


     * <code>long</code> argument that is equal to the given value.
     * <p>
     * See examples in javadoc for {@link Matchers} class
     * 
     * @param value
     *            the given value.
     * @return <code>0</code>.
     

----------------------


     Method public static T eq(T value)    (Matchers.java)

     
          * Object argument that is equal to the given value.
          * <p>
          * See examples in javadoc for {@link Matchers} class
          * 
          * @param value
          *            the given value.
          * @return <code>null</code>.
          

     ----------------------


          Method public static int lt(int value)    (AdditionalMatchers.java)

          
               * int argument less than the given value.
               * <p>
               * See examples in javadoc for {@link AdditionalMatchers} class
               * 
               * @param value
               *            the given value.
               * @return <code>0</code>.
               

          ----------------------




Method public static T geq(Comparable<T> value)  (AdditionalMatchers.java)
     Method public static T eq(T value)  (Matchers.java)
          Method public static int lt(int value)  (AdditionalMatchers.java)

Method public static T geq(Comparable<T> value)    (AdditionalMatchers.java)


     * argument greater than or equal the given value.
     * <p>
     * See examples in javadoc for {@link AdditionalMatchers} class
     * 
     * @param value
     *            the given value.
     * @return <code>null</code>.
     

----------------------


     Method public static T eq(T value)    (Matchers.java)

     
          * Object argument that is equal to the given value.
          * <p>
          * See examples in javadoc for {@link Matchers} class
          * 
          * @param value
          *            the given value.
          * @return <code>null</code>.
          

     ----------------------


          Method public static int lt(int value)    (AdditionalMatchers.java)

          
               * int argument less than the given value.
               * <p>
               * See examples in javadoc for {@link AdditionalMatchers} class
               * 
               * @param value
               *            the given value.
               * @return <code>0</code>.
               

          ----------------------




Method public static int eq(int value)  (Matchers.java)
     Method public static T eq(T value)  (Matchers.java)
          Method public static int lt(int value)  (AdditionalMatchers.java)

Method public static int eq(int value)    (Matchers.java)


     * <code>int</code> argument that is equal to the given value.
     * <p>
     * See examples in javadoc for {@link Matchers} class
     * 
     * @param value
     *            the given value.
     * @return <code>0</code>.
     

----------------------


     Method public static T eq(T value)    (Matchers.java)

     
          * Object argument that is equal to the given value.
          * <p>
          * See examples in javadoc for {@link Matchers} class
          * 
          * @param value
          *            the given value.
          * @return <code>null</code>.
          

     ----------------------


          Method public static int lt(int value)    (AdditionalMatchers.java)

          
               * int argument less than the given value.
               * <p>
               * See examples in javadoc for {@link AdditionalMatchers} class
               * 
               * @param value
               *            the given value.
               * @return <code>0</code>.
               

          ----------------------




Method public static double gt(double value)  (AdditionalMatchers.java)
     Method public static int gt(int value)  (AdditionalMatchers.java)
          Method public static int lt(int value)  (AdditionalMatchers.java)

Method public static double gt(double value)    (AdditionalMatchers.java)


     * double argument greater than the given value.
     * <p>
     * See examples in javadoc for {@link AdditionalMatchers} class
     * 
     * @param value
     *            the given value.
     * @return <code>0</code>.
     

----------------------


     Method public static int gt(int value)    (AdditionalMatchers.java)

     
          * int argument greater than the given value.
          * <p>
          * See examples in javadoc for {@link AdditionalMatchers} class
          * 
          * @param value
          *            the given value.
          * @return <code>0</code>.
          

     ----------------------


          Method public static int lt(int value)    (AdditionalMatchers.java)

          
               * int argument less than the given value.
               * <p>
               * See examples in javadoc for {@link AdditionalMatchers} class
               * 
               * @param value
               *            the given value.
               * @return <code>0</code>.
               

          ----------------------




Method public static float gt(float value)  (AdditionalMatchers.java)
     Method public static int gt(int value)  (AdditionalMatchers.java)
          Method public static int lt(int value)  (AdditionalMatchers.java)

Method public static float gt(float value)    (AdditionalMatchers.java)


     * float argument greater than the given value.
     * <p>
     * See examples in javadoc for {@link AdditionalMatchers} class
     * 
     * @param value
     *            the given value.
     * @return <code>0</code>.
     

----------------------


     Method public static int gt(int value)    (AdditionalMatchers.java)

     
          * int argument greater than the given value.
          * <p>
          * See examples in javadoc for {@link AdditionalMatchers} class
          * 
          * @param value
          *            the given value.
          * @return <code>0</code>.
          

     ----------------------


          Method public static int lt(int value)    (AdditionalMatchers.java)

          
               * int argument less than the given value.
               * <p>
               * See examples in javadoc for {@link AdditionalMatchers} class
               * 
               * @param value
               *            the given value.
               * @return <code>0</code>.
               

          ----------------------




Method public static short gt(short value)  (AdditionalMatchers.java)
     Method public static int gt(int value)  (AdditionalMatchers.java)
          Method public static int lt(int value)  (AdditionalMatchers.java)

Method public static short gt(short value)    (AdditionalMatchers.java)


     * short argument greater than the given value.
     * <p>
     * See examples in javadoc for {@link AdditionalMatchers} class
     * 
     * @param value
     *            the given value.
     * @return <code>0</code>.
     

----------------------


     Method public static int gt(int value)    (AdditionalMatchers.java)

     
          * int argument greater than the given value.
          * <p>
          * See examples in javadoc for {@link AdditionalMatchers} class
          * 
          * @param value
          *            the given value.
          * @return <code>0</code>.
          

     ----------------------


          Method public static int lt(int value)    (AdditionalMatchers.java)

          
               * int argument less than the given value.
               * <p>
               * See examples in javadoc for {@link AdditionalMatchers} class
               * 
               * @param value
               *            the given value.
               * @return <code>0</code>.
               

          ----------------------




Method public static byte gt(byte value)  (AdditionalMatchers.java)
     Method public static int gt(int value)  (AdditionalMatchers.java)
          Method public static int lt(int value)  (AdditionalMatchers.java)

Method public static byte gt(byte value)    (AdditionalMatchers.java)


     * byte argument greater than the given value.
     * <p>
     * See examples in javadoc for {@link AdditionalMatchers} class
     * 
     * @param value
     *            the given value.
     * @return <code>0</code>.
     

----------------------


     Method public static int gt(int value)    (AdditionalMatchers.java)

     
          * int argument greater than the given value.
          * <p>
          * See examples in javadoc for {@link AdditionalMatchers} class
          * 
          * @param value
          *            the given value.
          * @return <code>0</code>.
          

     ----------------------


          Method public static int lt(int value)    (AdditionalMatchers.java)

          
               * int argument less than the given value.
               * <p>
               * See examples in javadoc for {@link AdditionalMatchers} class
               * 
               * @param value
               *            the given value.
               * @return <code>0</code>.
               

          ----------------------




Method public static long gt(long value)  (AdditionalMatchers.java)
     Method public static int gt(int value)  (AdditionalMatchers.java)
          Method public static int lt(int value)  (AdditionalMatchers.java)

Method public static long gt(long value)    (AdditionalMatchers.java)


     * long argument greater than the given value.
     * <p>
     * See examples in javadoc for {@link AdditionalMatchers} class
     * 
     * @param value
     *            the given value.
     * @return <code>0</code>.
     

----------------------


     Method public static int gt(int value)    (AdditionalMatchers.java)

     
          * int argument greater than the given value.
          * <p>
          * See examples in javadoc for {@link AdditionalMatchers} class
          * 
          * @param value
          *            the given value.
          * @return <code>0</code>.
          

     ----------------------


          Method public static int lt(int value)    (AdditionalMatchers.java)

          
               * int argument less than the given value.
               * <p>
               * See examples in javadoc for {@link AdditionalMatchers} class
               * 
               * @param value
               *            the given value.
               * @return <code>0</code>.
               

          ----------------------




Method public VerificationMode never()  (VerificationAfterDelay.java)
     Method public VerificationMode atMost(int maxNumberOfInvocations)  (VerificationAfterDelay.java)
          Method public VerificationMode atLeast(int minNumberOfInvocations)  (VerificationAfterDelay.java)

Method public VerificationMode never()    (VerificationAfterDelay.java)


     * Allows verification that there are no invocations at any point during the given period. This will wait the 
     * full period given, unless an invocation occurs (in which case there will be immediate failure)
     

----------------------


     Method public VerificationMode atMost(int maxNumberOfInvocations)    (VerificationAfterDelay.java)

     
          * Verifies that there is are most N invocations during the given period. This will wait the full period given,
          * unless too many invocations occur (in which case there will be an immediate failure)
          

     ----------------------


          Method public VerificationMode atLeast(int minNumberOfInvocations)    (VerificationAfterDelay.java)

          
               * Verifies that there is are least N invocations during the given period. This will wait the full period given.
               

          ----------------------




Class Mockito  (Mockito.java)
     Method public static void reset(T... mocks)  (Mockito.java)

Class Mockito    (Mockito.java)


 * <p align="left"><img src="logo.png" srcset="logo@2x.png 2x" alt="Mockito logo"/></p>
 * The Mockito library enables mock creation, verification and stubbing.
 * <p>
 * This javadoc content is also available on the <a href="http://mockito.org">http://mockito.org</a> web page.
 * All documentation is kept in javadocs because it guarantees consistency between what's on the web and what's in the source code.
 * It allows access to documentation straight from the IDE even if you work offline.
 * It motivates Mockito developers to keep documentation up-to-date with the code that they write,
 * every day, with every commit.
 *
 * <h1>Contents</h1>
 *
 * <b>
 *      <a href="#0">0. Migrating to 2.0</a><br/>
 *      <a href="#1">1. Let's verify some behaviour! </a><br/>
 *      <a href="#2">2. How about some stubbing? </a><br/>
 *      <a href="#3">3. Argument matchers </a><br/>
 *      <a href="#4">4. Verifying exact number of invocations / at least once / never </a><br/>
 *      <a href="#5">5. Stubbing void methods with exceptions </a><br/>
 *      <a href="#6">6. Verification in order </a><br/>
 *      <a href="#7">7. Making sure interaction(s) never happened on mock </a><br/>
 *      <a href="#8">8. Finding redundant invocations </a><br/>
 *      <a href="#9">9. Shorthand for mocks creation - <code>&#064;Mock</code> annotation </a><br/>
 *      <a href="#10">10. Stubbing consecutive calls (iterator-style stubbing) </a><br/>
 *      <a href="#11">11. Stubbing with callbacks </a><br/>
 *      <a href="#12">12. <code>doReturn()</code>|<code>doThrow()</code>|<code>doAnswer()</code>|<code>doNothing()</code>|<code>doCallRealMethod()</code> family of methods</a><br/>
 *      <a href="#13">13. Spying on real objects </a><br/>
 *      <a href="#14">14. Changing default return values of unstubbed invocations (Since 1.7) </a><br/>
 *      <a href="#15">15. Capturing arguments for further assertions (Since 1.8.0) </a><br/>
 *      <a href="#16">16. Real partial mocks (Since 1.8.0) </a><br/>
 *      <a href="#17">17. Resetting mocks (Since 1.8.0) </a><br/>
 *      <a href="#18">18. Troubleshooting & validating framework usage (Since 1.8.0) </a><br/>
 *      <a href="#19">19. Aliases for behavior driven development (Since 1.8.0) </a><br/>
 *      <a href="#20">20. Serializable mocks (Since 1.8.1) </a><br/>
 *      <a href="#21">21. New annotations: <code>&#064;Captor</code>, <code>&#064;Spy</code>, <code>&#064;InjectMocks</code> (Since 1.8.3) </a><br/>
 *      <a href="#22">22. Verification with timeout (Since 1.8.5) </a><br/>
 *      <a href="#23">23. Automatic instantiation of <code>&#064;Spies</code>, <code>&#064;InjectMocks</code> and constructor injection goodness (Since 1.9.0)</a><br/>
 *      <a href="#24">24. One-liner stubs (Since 1.9.0)</a><br/>
 *      <a href="#25">25. Verification ignoring stubs (Since 1.9.0)</a><br/>
 *      <a href="#26">26. Mocking details (Since 1.9.5)</a><br/>
 *      <a href="#27">27. Delegate calls to real instance (Since 1.9.5)</a><br/>
 *      <a href="#28">28. <code>MockMaker</code> API (Since 1.9.5)</a><br/>
 *      <a href="#29">29. (new) BDD style verification (Since 1.10.0)</a><br/>
 *      <a href="#30">30. (new) Spying or mocking abstract classes (Since 1.10.12)</a><br/>
 *      <a href="#31">31. (new) Mockito mocks can be <em>serialized</em> / <em>deserialized</em> across classloaders (Since 1.10.0)</a></h3><br/>
 *      <a href="#32">32. (new) Better generic support with deep stubs (Since 1.10.0)</a></h3><br/>
 *      <a href="#32">33. (new) Mockito JUnit rule (Since 1.10.17)</a><br/>
 *      <a href="#34">34. (new) Switch <em>on</em> or <em>off</em> plugins (Since 1.10.15)</a><br/>
 *      <a href="#35">35. (new) Custom verification failure message (Since 2.0.0)</a><br/>
 * </b>
 *
 * <h3 id="0">0. <a class="meaningful_link" href="#verification">Migrating to 2.0</a></h3>
 *
 * In order to continue improving Mockito and further improve the unit testing experience, we want you to upgrade to 2.0.
 * Mockito follows <a href="http://semver.org/">semantic versioning</a>
 * and contains breaking changes only on major version upgrades.
 * In the lifecycle of a library, breaking changes are necessary
 * to roll out a set of brand new features that alter the existing behavior or even change the API.
 * We hope that you enjoy Mockito 2.0!
 * <p>
 * List of breaking changes:
 * <ul>
 *     <li>Mockito is decoupled from Hamcrest and custom matchers API has changed, see {@link ArgumentMatcher}
 *     for rationale and migration guide</li>.
 *     <li>Stubbing API has been tweaked to avoid unavoidable compilation warnings that appeared on JDK7+ platform.
 *     This will only affect binary compatibility, compilation compatibility remains unaffected.</li>
 * </ul>
 *
 * <p>
 * The following examples mock a List, because most people are familiar with the interface (such as the
 * <code>add()</code>, <code>get()</code>, <code>clear()</code> methods). <br>
 * In reality, please don't mock the List class. Use a real instance instead.
 *
 *
 *
 *
 * <h3 id="1">1. <a class="meaningful_link" href="#verification">Let's verify some behaviour!</a></h3>
 *
 * <pre class="code"><code class="java">
 * //Let's import Mockito statically so that the code looks clearer
 * import static org.mockito.Mockito.*;
 *
 * //mock creation
 * List mockedList = mock(List.class);
 *
 * //using mock object
 * mockedList.add("one");
 * mockedList.clear();
 *
 * //verification
 * verify(mockedList).add("one");
 * verify(mockedList).clear();
 * </code></pre>
 *
 * <p>
 * Once created, a mock will remember all interactions. Then you can selectively
 * verify whatever interactions you are interested in.
 *
 *
 *
 *
 * <h3 id="2">2. <a class="meaningful_link" href="#stubbing">How about some stubbing?</a></h3>
 *
 * <pre class="code"><code class="java">
 * //You can mock concrete classes, not just interfaces
 * LinkedList mockedList = mock(LinkedList.class);
 *
 * //stubbing
 * when(mockedList.get(0)).thenReturn("first");
 * when(mockedList.get(1)).thenThrow(new RuntimeException());
 *
 * //following prints "first"
 * System.out.println(mockedList.get(0));
 *
 * //following throws runtime exception
 * System.out.println(mockedList.get(1));
 *
 * //following prints "null" because get(999) was not stubbed
 * System.out.println(mockedList.get(999));
 *
 * //Although it is possible to verify a stubbed invocation, usually <b>it's just redundant</b>
 * //If your code cares what get(0) returns, then something else breaks (often even before verify() gets executed).
 * //If your code doesn't care what get(0) returns, then it should not be stubbed. Not convinced? See <a href="http://monkeyisland.pl/2008/04/26/asking-and-telling">here</a>.
 * verify(mockedList).get(0);
 * </code></pre>
 *
 * <ul>
 * <li> By default, for all methods that return a value, a mock will return either null, a
 * a primitive/primitive wrapper value, or an empty collection, as appropriate.
 * For example 0 for an int/Integer and false for a boolean/Boolean. </li>
 *
 * <li> Stubbing can be overridden: for example common stubbing can go to
 * fixture setup but the test methods can override it.
 * Please note that overridding stubbing is a potential code smell that points out too much stubbing</li>
 *
 * <li> Once stubbed, the method will always return a stubbed value, regardless
 * of how many times it is called. </li>
 *
 * <li> Last stubbing is more important - when you stubbed the same method with
 * the same arguments many times.
 * Other words: <b>the order of stubbing matters</b> but it is only meaningful rarely,
 * e.g. when stubbing exactly the same method calls or sometimes when argument matchers are used, etc.</li>
 *
 * </ul>
 *
 *
 *
 * <h3 id="3">3. <a class="meaningful_link" href="#argument_matchers">Argument matchers</a></h3>
 *
 * Mockito verifies argument values in natural java style: by using an <code>equals()</code> method.
 * Sometimes, when extra flexibility is required then you might use argument matchers:
 *
 * <pre class="code"><code class="java">
 * //stubbing using built-in anyInt() argument matcher
 * when(mockedList.get(anyInt())).thenReturn("element");
 *
 * //stubbing using custom matcher (let's say isValid() returns your own matcher implementation):
 * when(mockedList.contains(argThat(isValid()))).thenReturn("element");
 *
 * //following prints "element"
 * System.out.println(mockedList.get(999));
 *
 * //<b>you can also verify using an argument matcher</b>
 * verify(mockedList).get(anyInt());
 * </code></pre>
 *
 * <p>
 * Argument matchers allow flexible verification or stubbing.
 * {@link Matchers Click here to see} more built-in matchers
 * and examples of <b>custom argument matchers / hamcrest matchers</b>.
 * <p>
 * For information solely on <b>custom argument matchers</b> check out javadoc for {@link ArgumentMatcher} class.
 * <p>
 * Be reasonable with using complicated argument matching.
 * The natural matching style using <code>equals()</code> with occasional <code>anyX()</code> matchers tend to give clean & simple tests.
 * Sometimes it's just better to refactor the code to allow <code>equals()</code> matching or even implement <code>equals()</code> method to help out with testing.
 * <p>
 * Also, read <a href="#15">section 15</a> or javadoc for {@link ArgumentCaptor} class.
 * {@link ArgumentCaptor} is a special implementation of an argument matcher that captures argument values for further assertions.
 * <p>
 * <b>Warning on argument matchers:</b>
 * <p>
 * If you are using argument matchers, <b>all arguments</b> have to be provided
 * by matchers.
 * <p>
 The following example shows verification but the same applies to stubbing:
 *
 * <pre class="code"><code class="java">
 *   verify(mock).someMethod(anyInt(), anyString(), <b>eq("third argument")</b>);
 *   //above is correct - eq() is also an argument matcher
 *
 *   verify(mock).someMethod(anyInt(), anyString(), <b>"third argument"</b>);
 *   //above is incorrect - exception will be thrown because third argument is given without an argument matcher.
 * </code></pre>
 *
 * <p>
 * Matcher methods like <code>anyObject()</code>, <code>eq()</code> <b>do not</b> return matchers.
 * Internally, they record a matcher on a stack and return a dummy value (usually null).
 * This implementation is due to static type safety imposed by the java compiler.
 * The consequence is that you cannot use <code>anyObject()</code>, <code>eq()</code> methods outside of verified/stubbed method.
 *
 *
 *
 *
 * <h3 id="4">4. <a class="meaningful_link" href="#exact_verification">Verifying exact number of invocations</a> /
 * <a class="meaningful_link" href="#at_least_verification">at least x</a> / never</h3>
 *
 * <pre class="code"><code class="java">
 * //using mock
 * mockedList.add("once");
 *
 * mockedList.add("twice");
 * mockedList.add("twice");
 *
 * mockedList.add("three times");
 * mockedList.add("three times");
 * mockedList.add("three times");
 *
 * //following two verifications work exactly the same - times(1) is used by default
 * verify(mockedList).add("once");
 * verify(mockedList, times(1)).add("once");
 *
 * //exact number of invocations verification
 * verify(mockedList, times(2)).add("twice");
 * verify(mockedList, times(3)).add("three times");
 *
 * //verification using never(). never() is an alias to times(0)
 * verify(mockedList, never()).add("never happened");
 *
 * //verification using atLeast()/atMost()
 * verify(mockedList, atLeastOnce()).add("three times");
 * verify(mockedList, atLeast(2)).add("five times");
 * verify(mockedList, atMost(5)).add("three times");
 *
 * </code></pre>
 *
 * <p>
 * <b>times(1) is the default.</b> Therefore using times(1) explicitly can be
 * omitted.
 *
 *
 *
 *
 * <h3 id="5">5. <a class="meaningful_link" href="#stubbing_with_exceptions">Stubbing void methods with exceptions</a></h3>
 *
 * <pre class="code"><code class="java">
 *   doThrow(new RuntimeException()).when(mockedList).clear();
 *
 *   //following throws RuntimeException:
 *   mockedList.clear();
 * </code></pre>
 *
 * Read more about doThrow|doAnswer family of methods in paragraph 12.
 * <p>
 * Initially, {@link Mockito#stubVoid(Object)} was used for stubbing voids.
 * Currently <code>stubVoid()</code> is deprecated in favor of {@link Mockito#doThrow(Throwable...)}.
 * This is because of improved readability and consistency with the family of {@link Mockito#doAnswer(Answer)} methods.
 *
 *
 *
 *
 * <h3 id="6">6. <a class="meaningful_link" href="#in_order_verification">Verification in order</a></h3>
 *
 * <pre class="code"><code class="java">
 * // A. Single mock whose methods must be invoked in a particular order
 * List singleMock = mock(List.class);
 *
 * //using a single mock
 * singleMock.add("was added first");
 * singleMock.add("was added second");
 *
 * //create an inOrder verifier for a single mock
 * InOrder inOrder = inOrder(singleMock);
 *
 * //following will make sure that add is first called with "was added first, then with "was added second"
 * inOrder.verify(singleMock).add("was added first");
 * inOrder.verify(singleMock).add("was added second");
 *
 * // B. Multiple mocks that must be used in a particular order
 * List firstMock = mock(List.class);
 * List secondMock = mock(List.class);
 *
 * //using mocks
 * firstMock.add("was called first");
 * secondMock.add("was called second");
 *
 * //create inOrder object passing any mocks that need to be verified in order
 * InOrder inOrder = inOrder(firstMock, secondMock);
 *
 * //following will make sure that firstMock was called before secondMock
 * inOrder.verify(firstMock).add("was called first");
 * inOrder.verify(secondMock).add("was called second");
 *
 * // Oh, and A + B can be mixed together at will
 * </code></pre>
 *
 * Verification in order is flexible - <b>you don't have to verify all
 * interactions</b> one-by-one but only those that you are interested in
 * testing in order.
 * <p>
 * Also, you can create an InOrder object passing only the mocks that are relevant for
 * in-order verification.
 *
 *
 *
 *
 * <h3 id="7">7. <a class="meaningful_link" href="#never_verification">Making sure interaction(s) never happened on mock</a></h3>
 *
 * <pre class="code"><code class="java">
 * //using mocks - only mockOne is interacted
 * mockOne.add("one");
 *
 * //ordinary verification
 * verify(mockOne).add("one");
 *
 * //verify that method was never called on a mock
 * verify(mockOne, never()).add("two");
 *
 * //verify that other mocks were not interacted
 * verifyZeroInteractions(mockTwo, mockThree);
 *
 * </code></pre>
 *
 *
 *
 *
 * <h3 id="8">8. <a class="meaningful_link" href="#finding_redundant_invocations">Finding redundant invocations</a></h3>
 *
 * <pre class="code"><code class="java">
 * //using mocks
 * mockedList.add("one");
 * mockedList.add("two");
 *
 * verify(mockedList).add("one");
 *
 * //following verification will fail
 * verifyNoMoreInteractions(mockedList);
 * </code></pre>
 *
 * A word of <b>warning</b>:
 * Some users who did a lot of classic, expect-run-verify mocking tend to use <code>verifyNoMoreInteractions()</code> very often, even in every test method.
 * <code>verifyNoMoreInteractions()</code> is not recommended to use in every test method.
 * <code>verifyNoMoreInteractions()</code> is a handy assertion from the interaction testing toolkit. Use it only when it's relevant.
 * Abusing it leads to <strong>overspecified</strong>, <strong>less maintainable</strong> tests. You can find further reading
 * <a href="http://monkeyisland.pl/2008/07/12/should-i-worry-about-the-unexpected/">here</a>.
 *
 * <p>
 * See also {@link Mockito#never()} - it is more explicit and
 * communicates the intent well.
 * <p>
 *
 *
 *
 *
 * <h3 id="9">9. <a class="meaningful_link" href="#mock_annotation">Shorthand for mocks creation - <code>&#064;Mock</code> annotation</a></h3>
 *
 * <ul>
 * <li>Minimizes repetitive mock creation code.</li>
 * <li>Makes the test class more readable.</li>
 * <li>Makes the verification error easier to read because the <b>field name</b>
 * is used to identify the mock.</li>
 * </ul>
 *
 * <pre class="code"><code class="java">
 *   public class ArticleManagerTest {
 *
 *       &#064;Mock private ArticleCalculator calculator;
 *       &#064;Mock private ArticleDatabase database;
 *       &#064;Mock private UserProvider userProvider;
 *
 *       private ArticleManager manager;
 * </code></pre>
 *
 * <b>Important!</b> This needs to be somewhere in the base class or a test
 * runner:
 *
 * <pre class="code"><code class="java">
 * MockitoAnnotations.initMocks(testClass);
 * </code></pre>
 *
 * You can use built-in runner: {@link MockitoJUnitRunner} or a rule: {@link MockitoRule}.
 * <p>
 * Read more here: {@link MockitoAnnotations}
 *
 *
 *
 *
 * <h3 id="10">10. <a class="meaningful_link" href="#stubbing_consecutive_calls">Stubbing consecutive calls</a> (iterator-style stubbing)</h3>
 *
 * Sometimes we need to stub with different return value/exception for the same
 * method call. Typical use case could be mocking iterators.
 * Original version of Mockito did not have this feature to promote simple mocking.
 * For example, instead of iterators one could use {@link Iterable} or simply
 * collections. Those offer natural ways of stubbing (e.g. using real
 * collections). In rare scenarios stubbing consecutive calls could be useful,
 * though:
 * <p>
 *
 * <pre class="code"><code class="java">
 * when(mock.someMethod("some arg"))
 *   .thenThrow(new RuntimeException())
 *   .thenReturn("foo");
 *
 * //First call: throws runtime exception:
 * mock.someMethod("some arg");
 *
 * //Second call: prints "foo"
 * System.out.println(mock.someMethod("some arg"));
 *
 * //Any consecutive call: prints "foo" as well (last stubbing wins).
 * System.out.println(mock.someMethod("some arg"));
 * </code></pre>
 *
 * Alternative, shorter version of consecutive stubbing:
 *
 * <pre class="code"><code class="java">
 * when(mock.someMethod("some arg"))
 *   .thenReturn("one", "two", "three");
 * </code></pre>
 *
 *
 *
 *
 * <h3 id="11">11. <a class="meaningful_link" href="#answer_stubs">Stubbing with callbacks</a></h3>
 *
 * Allows stubbing with generic {@link Answer} interface.
 * <p>
 * Yet another controversial feature which was not included in Mockito
 * originally. We recommend simply stubbing with <code>thenReturn()</code> or
 * <code>thenThrow()</code>, which should be enough to test/test-drive
 * any clean & simple code. However, if you do have a need to stub with the generic Answer interface, here is an example:
 *
 * <pre class="code"><code class="java">
 * when(mock.someMethod(anyString())).thenAnswer(new Answer() {
 *     Object answer(InvocationOnMock invocation) {
 *         Object[] args = invocation.getArguments();
 *         Object mock = invocation.getMock();
 *         return "called with arguments: " + args;
 *     }
 * });
 *
 * //the following prints "called with arguments: foo"
 * System.out.println(mock.someMethod("foo"));
 * </code></pre>
 *
 *
 *
 *
 * <h3 id="12">12. <a class="meaningful_link" href="#do_family_methods_stubs"><code>doReturn()</code>|<code>doThrow()</code>|
 * <code>doAnswer()</code>|<code>doNothing()</code>|<code>doCallRealMethod()</code> family of methods</a></h3>
 *
 * Stubbing void methods requires a different approach from {@link Mockito#when(Object)} because the compiler does not
 * like void methods inside brackets...
 * <p>
 * {@link Mockito#doThrow(Throwable...)} replaces the {@link Mockito#stubVoid(Object)} method for stubbing voids.
 * The main reason is improved readability and consistency with the family of <code>doAnswer()</code> methods.
 * <p>
 * Use <code>doThrow()</code> when you want to stub a void method with an exception:
 * <pre class="code"><code class="java">
 *   doThrow(new RuntimeException()).when(mockedList).clear();
 *
 *   //following throws RuntimeException:
 *   mockedList.clear();
 * </code></pre>
 *
 * <p>
 * You can use <code>doThrow()</code>, <code>doAnswer()</code>, <code>doNothing()</code>, <code>doReturn()</code>
 * and <code>doCallRealMethod()</code> in place of the corresponding call with <code>when()</code>, for any method.
 * It is necessary when you
 * <ul>
 *     <li>stub void methods</li>
 *     <li>stub methods on spy objects (see below)</li>
 *     <li>stub the same method more than once, to change the behaviour of a mock in the middle of a test.</li>
 * </ul>
 * but you may prefer to use these methods in place of the alternative with <code>when()</code>, for all of your stubbing calls.
 * <p>
 * Read more about these methods:
 * <p>
 * {@link Mockito#doReturn(Object)}
 * <p>
 * {@link Mockito#doThrow(Throwable...)}
 * <p>
 * {@link Mockito#doThrow(Class)}
 * <p>
 * {@link Mockito#doAnswer(Answer)}
 * <p>
 * {@link Mockito#doNothing()}
 * <p>
 * {@link Mockito#doCallRealMethod()}
 *
 *
 *
 *
 * <h3 id="13">13. <a class="meaningful_link" href="#spy">Spying on real objects</a></h3>
 *
 * You can create spies of real objects. When you use the spy then the <b>real</b> methods are called
 * (unless a method was stubbed).
 * <p>
 * Real spies should be used <b>carefully and occasionally</b>, for example when dealing with legacy code.
 *
 * <p>
 * Spying on real objects can be associated with "partial mocking" concept.
 * <b>Before the release 1.8</b>, Mockito spies were not real partial mocks.
 * The reason was we thought partial mock is a code smell.
 * At some point we found legitimate use cases for partial mocks
 * (3rd party interfaces, interim refactoring of legacy code, the full article is <a href=
 * "http://monkeyisland.pl/2009/01/13/subclass-and-override-vs-partial-mocking-vs-refactoring"
 * >here</a>)
 * <p>
 *
 * <pre class="code"><code class="java">
 *   List list = new LinkedList();
 *   List spy = spy(list);
 *
 *   //optionally, you can stub out some methods:
 *   when(spy.size()).thenReturn(100);
 *
 *   //using the spy calls <b>*real*</b> methods
 *   spy.add("one");
 *   spy.add("two");
 *
 *   //prints "one" - the first element of a list
 *   System.out.println(spy.get(0));
 *
 *   //size() method was stubbed - 100 is printed
 *   System.out.println(spy.size());
 *
 *   //optionally, you can verify
 *   verify(spy).add("one");
 *   verify(spy).add("two");
 * </code></pre>
 *
 * <h4>Important gotcha on spying real objects!</h4>
 * <ol>
 * <li>Sometimes it's impossible or impractical to use {@link Mockito#when(Object)} for stubbing spies.
 * Therefore when using spies please consider <code>doReturn</code>|<code>Answer</code>|<code>Throw()</code> family of
 * methods for stubbing. Example:
 *
 * <pre class="code"><code class="java">
 *   List list = new LinkedList();
 *   List spy = spy(list);
 *
 *   //Impossible: real method is called so spy.get(0) throws IndexOutOfBoundsException (the list is yet empty)
 *   when(spy.get(0)).thenReturn("foo");
 *
 *   //You have to use doReturn() for stubbing
 *   doReturn("foo").when(spy).get(0);
 * </code></pre>
 * </li>
 *
 * <li>Mockito <b>*does not*</b> delegate calls to the passed real instance, instead it actually creates a copy of it.
 * So if you keep the real instance and interact with it, don't expect the spied to be aware of those interaction
 * and their effect on real instance state.
 * The corollary is that when an <b>*unstubbed*</b> method is called <b>*on the spy*</b> but <b>*not on the real instance*</b>,
 * you won't see any effects on the real instance.
 * </li>
 *
 * <li>Watch out for final methods.
 * Mockito doesn't mock final methods so the bottom line is: when you spy on real objects + you try to stub a final method = trouble.
 * Also you won't be able to verify those method as well.
 * </li>
 * </ol>
 *
 *
 *
 *
 * <h3 id="14">14. Changing <a class="meaningful_link" href="#defaultreturn">default return values of unstubbed invocations</a> (Since 1.7)</h3>
 *
 * You can create a mock with specified strategy for its return values.
 * It's quite an advanced feature and typically you don't need it to write decent tests.
 * However, it can be helpful for working with <b>legacy systems</b>.
 * <p>
 * It is the default answer so it will be used <b>only when you don't</b> stub the method call.
 *
 * <pre class="code"><code class="java">
 *   Foo mock = mock(Foo.class, Mockito.RETURNS_SMART_NULLS);
 *   Foo mockTwo = mock(Foo.class, new YourOwnAnswer());
 * </code></pre>
 *
 * <p>
 * Read more about this interesting implementation of <i>Answer</i>: {@link Mockito#RETURNS_SMART_NULLS}
 *
 *
 *
 *
 * <h3 id="15">15. <a class="meaningful_link" href="#captors">Capturing arguments</a> for further assertions (Since 1.8.0)</h3>
 *
 * Mockito verifies argument values in natural java style: by using an <code>equals()</code> method.
 * This is also the recommended way of matching arguments because it makes tests clean & simple.
 * In some situations though, it is helpful to assert on certain arguments after the actual verification.
 * For example:
 * <pre class="code"><code class="java">
 *   ArgumentCaptor&lt;Person&gt; argument = ArgumentCaptor.forClass(Person.class);
 *   verify(mock).doSomething(argument.capture());
 *   assertEquals("John", argument.getValue().getName());
 * </code></pre>
 *
 * <b>Warning:</b> it is recommended to use ArgumentCaptor with verification <b>but not</b> with stubbing.
 * Using ArgumentCaptor with stubbing may decrease test readability because captor is created outside of assert (aka verify or 'then') block.
 * Also it may reduce defect localization because if stubbed method was not called then no argument is captured.
 * <p>
 * In a way ArgumentCaptor is related to custom argument matchers (see javadoc for {@link ArgumentMatcher} class).
 * Both techniques can be used for making sure certain arguments where passed to mocks.
 * However, ArgumentCaptor may be a better fit if:
 * <ul>
 * <li>custom argument matcher is not likely to be reused</li>
 * <li>you just need it to assert on argument values to complete verification</li>
 * </ul>
 * Custom argument matchers via {@link ArgumentMatcher} are usually better for stubbing.
 *
 *
 *
 *
 * <h3 id="16">16. <a class="meaningful_link" href="#partial_mocks">Real partial mocks</a> (Since 1.8.0)</h3>
 *
 *  Finally, after many internal debates & discussions on the mailing list, partial mock support was added to Mockito.
 *  Previously we considered partial mocks as code smells. However, we found a legitimate use case for partial mocks - more reading:
 *  <a href="http://monkeyisland.pl/2009/01/13/subclass-and-override-vs-partial-mocking-vs-refactoring">here</a>
 *  <p>
 *  <b>Before release 1.8</b> <code>spy()</code> was not producing real partial mocks and it was confusing for some users.
 *  Read more about spying: <a href="#13">here</a> or in javadoc for {@link Mockito#spy(Object)} method.
 *  <p>
 *  <pre class="code"><code class="java">
 *    //you can create partial mock with spy() method:
 *    List list = spy(new LinkedList());
 *
 *    //you can enable partial mock capabilities selectively on mocks:
 *    Foo mock = mock(Foo.class);
 *    //Be sure the real implementation is 'safe'.
 *    //If real implementation throws exceptions or depends on specific state of the object then you're in trouble.
 *    when(mock.someMethod()).thenCallRealMethod();
 *  </code></pre>
 *
 * As usual you are going to read <b>the partial mock warning</b>:
 * Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
 * How does partial mock fit into this paradigm? Well, it just doesn't...
 * Partial mock usually means that the complexity has been moved to a different method on the same object.
 * In most cases, this is not the way you want to design your application.
 * <p>
 * However, there are rare cases when partial mocks come handy:
 * dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
 * However, I wouldn't use partial mocks for new, test-driven & well-designed code.
 *
 *
 *
 *
 * <h3 id="17">17. <a class="meaningful_link" href="#resetting_mocks">Resetting mocks</a> (Since 1.8.0)</h3>
 *
 * Smart Mockito users hardly use this feature because they know it could be a sign of poor tests.
 * Normally, you don't need to reset your mocks, just create new mocks for each test method.
 * <p>
 * Instead of <code>reset()</code> please consider writing simple, small and focused test methods over lengthy, over-specified tests.
 * <b>First potential code smell is <code>reset()</code> in the middle of the test method.</b> This probably means you're testing too much.
 * Follow the whisper of your test methods: "Please keep us small & focused on single behavior".
 * There are several threads about it on mockito mailing list.
 * <p>
 * The only reason we added <code>reset()</code> method is to
 * make it possible to work with container-injected mocks.
 * See issue 55 (<a href="http://code.google.com/p/mockito/issues/detail?id=55">here</a>)
 * or FAQ (<a href="http://code.google.com/p/mockito/wiki/FAQ">here</a>).
 * <p>
 * <b>Don't harm yourself.</b> <code>reset()</code> in the middle of the test method is a code smell (you're probably testing too much).
 * <pre class="code"><code class="java">
 *   List mock = mock(List.class);
 *   when(mock.size()).thenReturn(10);
 *   mock.add(1);
 *
 *   reset(mock);
 *   //at this point the mock forgot any interactions & stubbing
 * </code></pre>
 *
 *
 *
 *
 * <h3 id="18">18. <a class="meaningful_link" href="#framework_validation">Troubleshooting & validating framework usage</a> (Since 1.8.0)</h3>
 *
 * First of all, in case of any trouble, I encourage you to read the Mockito FAQ:
 * <a href="http://code.google.com/p/mockito/wiki/FAQ">http://code.google.com/p/mockito/wiki/FAQ</a>
 * <p>
 * In case of questions you may also post to mockito mailing list:
 * <a href="http://groups.google.com/group/mockito">http://groups.google.com/group/mockito</a>
 * <p>
 * Next, you should know that Mockito validates if you use it correctly <b>all the time</b>.
 * However, there's a gotcha so please read the javadoc for {@link Mockito#validateMockitoUsage()}
 *
 *
 *
 *
 * <h3 id="19">19. <a class="meaningful_link" href="#bdd_mockito">Aliases for behavior driven development</a> (Since 1.8.0)</h3>
 *
 * Behavior Driven Development style of writing tests uses <b>//given //when //then</b> comments as fundamental parts of your test methods.
 * This is exactly how we write our tests and we warmly encourage you to do so!
 * <p>
 * Start learning about BDD here: <a href="http://en.wikipedia.org/wiki/Behavior_Driven_Development">http://en.wikipedia.org/wiki/Behavior_Driven_Development</a>
 * <p>
 * The problem is that current stubbing api with canonical role of <b>when</b> word does not integrate nicely with <b>//given //when //then</b> comments.
 * It's because stubbing belongs to <b>given</b> component of the test and not to the <b>when</b> component of the test.
 * Hence {@link BDDMockito} class introduces an alias so that you stub method calls with {@link BDDMockito#given(Object)} method.
 * Now it really nicely integrates with the <b>given</b> component of a BDD style test!
 * <p>
 * Here is how the test might look like:
 * <pre class="code"><code class="java">
 * import static org.mockito.BDDMockito.*;
 *
 * Seller seller = mock(Seller.class);
 * Shop shop = new Shop(seller);
 *
 * public void shouldBuyBread() throws Exception {
 *   //given
 *   given(seller.askForBread()).willReturn(new Bread());
 *
 *   //when
 *   Goods goods = shop.buyBread();
 *
 *   //then
 *   assertThat(goods, containBread());
 * }
 * </code></pre>
 *
 *
 *
 *
 * <h3 id="20">20. <a class="meaningful_link" href="#serializable_mocks">Serializable mocks</a> (Since 1.8.1)</h3>
 *
 * Mocks can be made serializable. With this feature you can use a mock in a place that requires dependencies to be serializable.
 * <p>
 * WARNING: This should be rarely used in unit testing.
 * <p>
 * The behaviour was implemented for a specific use case of a BDD spec that had an unreliable external dependency.  This
 * was in a web environment and the objects from the external dependency were being serialized to pass between layers.
 * <p>
 * To create serializable mock use {@link MockSettings#serializable()}:
 * <pre class="code"><code class="java">
 *   List serializableMock = mock(List.class, withSettings().serializable());
 * </code></pre>
 * <p>
 * The mock can be serialized assuming all the normal <a href='http://java.sun.com/j2se/1.5.0/docs/api/java/io/Serializable.html'>
 * serialization requirements</a> are met by the class.
 * <p>
 * Making a real object spy serializable is a bit more effort as the spy(...) method does not have an overloaded version
 * which accepts MockSettings. No worries, you will hardly ever use it.
 *
 * <pre class="code"><code class="java">
 * List&lt;Object&gt; list = new ArrayList&lt;Object&gt;();
 * List&lt;Object&gt; spy = mock(ArrayList.class, withSettings()
 *                 .spiedInstance(list)
 *                 .defaultAnswer(CALLS_REAL_METHODS)
 *                 .serializable());
 * </code></pre>
 *
 *
 *
 *
 * <h3 id="21">21. New annotations: <a class="meaningful_link" href="#captor_annotation"><code>&#064;Captor</code></a>,
 * <a class="meaningful_link" href="#spy_annotation"><code>&#064;Spy</code></a>,
 * <a class="meaningful_link" href="#injectmocks_annotation"><code>&#064;InjectMocks</code></a> (Since 1.8.3)</h3>
 *
 * <p>
 * Release 1.8.3 brings new annotations that may be helpful on occasion:
 *
 * <ul>
 * <li>&#064;{@link Captor} simplifies creation of {@link ArgumentCaptor}
 * - useful when the argument to capture is a nasty generic class and you want to avoid compiler warnings
 * <li>&#064;{@link Spy} - you can use it instead {@link Mockito#spy(Object)}.
 * <li>&#064;{@link InjectMocks} - injects mock or spy fields into tested object automatically.
 * </ul>
 *
 * <p>
 * Note that &#064;{@link InjectMocks} can also be used in combination with the &#064;{@link Spy} annotation, it means
 * that Mockito will inject mocks into the partial mock under test. This complexity is another good reason why you
 * should only use partial mocks as a last resort. See point 16 about partial mocks.
 *
 * <p>
 * All new annotations are <b>*only*</b> processed on {@link MockitoAnnotations#initMocks(Object)}.
 * Just like for &#064;{@link Mock} annotation you can use the built-in runner: {@link MockitoJUnitRunner} or rule:
 * {@link MockitoRule}.
 * <p>
 *
 *
 *
 *
 * <h3 id="22">22. <a class="meaningful_link" href="#verification_timeout">Verification with timeout</a> (Since 1.8.5)</h3>
 * <p>
 * Allows verifying with timeout. It causes a verify to wait for a specified period of time for a desired
 * interaction rather than fails immediately if had not already happened. May be useful for testing in concurrent
 * conditions.
 * <p>
 * It feels this feature should be used rarely - figure out a better way of testing your multi-threaded system.
 * <p>
 * Not yet implemented to work with InOrder verification.
 * <p>
 * Examples:
 * <p>
 * <pre class="code"><code class="java">
 *   //passes when someMethod() is called within given time span
 *   verify(mock, timeout(100)).someMethod();
 *   //above is an alias to:
 *   verify(mock, timeout(100).times(1)).someMethod();
 *
 *   //passes when someMethod() is called <b>*exactly*</b> 2 times within given time span
 *   verify(mock, timeout(100).times(2)).someMethod();
 *
 *   //passes when someMethod() is called <b>*at least*</b> 2 times within given time span
 *   verify(mock, timeout(100).atLeast(2)).someMethod();
 *
 *   //verifies someMethod() within given time span using given verification mode
 *   //useful only if you have your own custom verification modes.
 *   verify(mock, new Timeout(100, yourOwnVerificationMode)).someMethod();
 * </code></pre>
 *
 *
 *
 *
 * <h3 id="23">23. <a class="meaningful_link" href="#automatic_instantiation">Automatic instantiation of <code>&#064;Spies</code>,
 * <code>&#064;InjectMocks</code></a> and <a class="meaningful_link" href="#constructor_injection">constructor injection goodness</a> (Since 1.9.0)</h3>
 *
 * <p>
 * Mockito will now try to instantiate &#064;{@link Spy} and will instantiate &#064;{@link InjectMocks} fields
 * using <b>constructor</b> injection, <b>setter</b> injection, or <b>field</b> injection.
 * <p>
 * To take advantage of this feature you need to use {@link MockitoAnnotations#initMocks(Object)}, {@link MockitoJUnitRunner}
 * or {@link MockitoRule}.
 * <p>
 * Read more about available tricks and the rules of injection in the javadoc for {@link InjectMocks}
 * <pre class="code"><code class="java">
 * //instead:
 * &#064;Spy BeerDrinker drinker = new BeerDrinker();
 * //you can write:
 * &#064;Spy BeerDrinker drinker;
 *
 * //same applies to &#064;InjectMocks annotation:
 * &#064;InjectMocks LocalPub;
 * </code></pre>
 *
 *
 *
 *
 * <h3 id="24">24. <a class="meaningful_link" href="#one_liner_stub">One-liner stubs</a> (Since 1.9.0)</h3>
 * <p>
 * Mockito will now allow you to create mocks when stubbing.
 * Basically, it allows to create a stub in one line of code.
 * This can be helpful to keep test code clean.
 * For example, some boring stub can be created & stubbed at field initialization in a test:
 * <pre class="code"><code class="java">
 * public class CarTest {
 *   Car boringStubbedCar = when(mock(Car.class).shiftGear()).thenThrow(EngineNotStarted.class).getMock();
 *
 *   &#064;Test public void should... {}
 * </code></pre>
 *
 *
 *
 *
 * <h3 id="25">25. <a class="meaningful_link" href="#ignore_stubs_verification">Verification ignoring stubs</a> (Since 1.9.0)</h3>
 * <p>
 * Mockito will now allow to ignore stubbing for the sake of verification.
 * Sometimes useful when coupled with <code>verifyNoMoreInteractions()</code> or verification <code>inOrder()</code>.
 * Helps avoiding redundant verification of stubbed calls - typically we're not interested in verifying stubs.
 * <p>
 * <b>Warning</b>, <code>ignoreStubs()</code> might lead to overuse of verifyNoMoreInteractions(ignoreStubs(...));
 * Bear in mind that Mockito does not recommend bombarding every test with <code>verifyNoMoreInteractions()</code>
 * for the reasons outlined in javadoc for {@link Mockito#verifyNoMoreInteractions(Object...)}
 * <p>Some examples:
 * <pre class="code"><code class="java">
 * verify(mock).foo();
 * verify(mockTwo).bar();
 *
 * //ignores all stubbed methods:
 * verifyNoMoreInvocations(ignoreStubs(mock, mockTwo));
 *
 * //creates InOrder that will ignore stubbed
 * InOrder inOrder = inOrder(ignoreStubs(mock, mockTwo));
 * inOrder.verify(mock).foo();
 * inOrder.verify(mockTwo).bar();
 * inOrder.verifyNoMoreInteractions();
 * </code></pre>
 * <p>
 * Advanced examples and more details can be found in javadoc for {@link Mockito#ignoreStubs(Object...)}
 *
 *
 *
 *
 * <h3 id="26">26. <a class="meaningful_link" href="#mocking_details">Mocking details</a> (Since 1.9.5)</h3>
 * <p>
 * To identify whether a particular object is a mock or a spy:
 * <pre class="code"><code class="java">
 *     Mockito.mockingDetails(someObject).isMock();
 *     Mockito.mockingDetails(someObject).isSpy();
 * </code></pre>
 * Both the {@link MockingDetails#isMock} and {@link MockingDetails#isSpy()} methods return <code>boolean</code>.
 * As a spy is just a different kind of mock, <code>isMock()</code> returns true if the object is a spy.
 * In future Mockito versions MockingDetails may grow and provide other useful information about the mock,
 * e.g. invocations, stubbing info, etc.
 *
 *
 *
 *
 * <h3 id="27">27. <a class="meaningful_link" href="#delegating_call_to_real_instance">Delegate calls to real instance</a> (Since 1.9.5)</h3>
 *
 * <p>Useful for spies or partial mocks of objects <strong>that are difficult to mock or spy</strong> using the usual spy API.
 * Since Mockito 1.10.11, the delegate may or may not be of the same type as the mock.
 * If the type is different, a matching method needs to be found on delegate type otherwise an exception is thrown.
 *
 * Possible use cases for this feature:
 * <ul>
 *     <li>Final classes but with an interface</li>
 *     <li>Already custom proxied object</li>
 *     <li>Special objects with a finalize method, i.e. to avoid executing it 2 times</li>
 * </ul>
 *
 * <p>The difference with the regular spy:
 * <ul>
 *   <li>
 *     The regular spy ({@link #spy(Object)}) contains <strong>all</strong> state from the spied instance
 *     and the methods are invoked on the spy. The spied instance is only used at mock creation to copy the state from.
 *     If you call a method on a regular spy and it internally calls other methods on this spy, those calls are remembered
 *     for verifications, and they can be effectively stubbed.
 *   </li>
 *   <li>
 *     The mock that delegates simply delegates all methods to the delegate.
 *     The delegate is used all the time as methods are delegated onto it.
 *     If you call a method on a mock that delegates and it internally calls other methods on this mock,
 *     those calls are <strong>not</strong> remembered for verifications, stubbing does not have effect on them, too.
 *     Mock that delegates is less powerful than the regular spy but it is useful when the regular spy cannot be created.
 *   </li>
 * </ul>
 *
 * <p>
 * See more information in docs for {@link AdditionalAnswers#delegatesTo(Object)}.
 *
 *
 *
 *
 * <h3 id="28">28. <a class="meaningful_link" href="#mock_maker_plugin"><code>MockMaker</code> API</a> (Since 1.9.5)</h3>
 * <p>Driven by requirements and patches from Google Android guys Mockito now offers an extension point
 *   that allows replacing the proxy generation engine. By default, Mockito uses cglib to create dynamic proxies.
 * <p>The extension point is for advanced users that want to extend Mockito. For example, it is now possible
 *   to use Mockito for Android testing with a help of dexmaker.
 * <p>For more details, motivations and examples please refer to
 * the docs for {@link org.mockito.plugins.MockMaker}.
 *
 *
 *
 *
 * <h3 id="29">29. <a class="meaningful_link" href="#BDD_behavior_verification">(new) BDD style verification</a> (Since 1.10.0)</h3>
 *
 * Enables Behavior Driven Development (BDD) style verification by starting verification with the BDD <b>then</b> keyword.
 *
 * <pre class="code"><code class="java">
 * given(dog.bark()).willReturn(2);
 *
 * // when
 * ...
 *
 * then(person).should(times(2)).ride(bike);
 * </code></pre>
 *
 * For more information and an example see {@link BDDMockito#then(Object)}}
 *
 *
 *
 *
 * <h3 id="30">30. <a class="meaningful_link" href="#spying_abstract_classes">(new) Spying or mocking abstract classes (Since 1.10.12)</a></h3>
 *
 * It is now possible to conveniently spy on abstract classes. Note that overusing spies hints at code design smells (see {@link #spy(Object)}).
 * <p>
 * Previously, spying was only possible on instances of objects.
 * New API makes it possible to use constructor when creating an instance of the mock.
 * This is particularly useful for mocking abstract classes because the user is no longer required to provide an instance of the abstract class.
 * At the moment, only parameter-less constructor is supported, let us know if it is not enough.
 *
 * <pre class="code"><code class="java">
 * //convenience API, new overloaded spy() method:
 * SomeAbstract spy = spy(SomeAbstract.class);
 *
 * //Robust API, via settings builder:
 * OtherAbstract spy = mock(OtherAbstract.class, withSettings()
 *    .useConstructor().defaultAnswer(CALLS_REAL_METHODS));
 *
 * //Mocking a non-static inner abstract class:
 * InnerAbstract spy = mock(InnerAbstract.class, withSettings()
 *    .useConstructor().outerInstance(outerInstance).defaultAnswer(CALLS_REAL_METHODS));
 * </code></pre>
 *
 * For more information please see {@link MockSettings#useConstructor()}.
 *
 *
 *
 *
 * <h3 id="31">31. <a class="meaningful_link" href="#serilization_across_classloader">(new) Mockito mocks can be <em>serialized</em> / <em>deserialized</em> across classloaders (Since 1.10.0)</a></h3>
 *
 * Mockito introduces serialization across classloader.
 *
 * Like with any other form of serialization, all types in the mock hierarchy have to serializable, inclusing answers.
 * As this serialization mode require considerably more work, this is an opt-in setting.
 *
 * <pre class="code"><code class="java">
 * // use regular serialization
 * mock(Book.class, withSettings().serializable());
 *
 * // use serialization across classloaders
 * mock(Book.class, withSettings().serializable(ACROSS_CLASSLOADERS));
 * </code></pre>
 *
 * For more details see {@link MockSettings#serializable(SerializableMode)}.
 *
 *
 *
 *
 * <h3 id="32">32. <a class="meaningful_link" href="#better_generic_support_with_deep_stubs">(new) Better generic support with deep stubs (Since 1.10.0)</a></h3>
 *
 * Deep stubbing has been improved to find generic information if available in the class.
 * That means that classes like this can be used without having to mock the behavior.
 *
 * <pre class="code"><code class="java">
 * class Lines extends List&lt;Line&gt; {
 *     // ...
 * }
 *
 * lines = mock(Lines.class, RETURNS_DEEP_STUBS);
 *
 * // Now Mockito understand this is not an Object but a Line
 * Line line = lines.iterator().next();
 * </code></pre>
 *
 * Please note that in most scenarios a mock returning a mock is wrong.
 *
 *
 *
 *
 * <h3 id="33">33. <a class="meaningful_link" href="#mockito_junit_rule">(new) Mockito JUnit rule (Since 1.10.17)</a></h3>
 *
 * Mockito now offers a JUnit rule. Until now in JUnit there was two wasy to initialize fields annotated by Mockito annotations
 * such as <code>&#064;{@link Mock}</code>, <code>&#064;{@link Spy}</code>, <code>&#064;{@link InjectMocks}</code>, etc.
 *
 * <ul>
 *     <li>Annotating the JUnit test class with a <code>&#064;{@link org.junit.runner.RunWith}({@link MockitoJUnitRunner}.class)</code></li>
 *     <li>Invoking <code>{@link MockitoAnnotations#initMocks(Object)}</code> in the <code>&#064;{@link org.junit.Before}</code> method</li>
 * </ul>
 *
 * Now you can choose to use a rule :
 *
 * <pre class="code"><code class="java">
 * &#064;RunWith(YetAnotherRunner.class)
 * public class TheTest {
 *     &#064;Rule public MockitoRule mockito = MockitoJUnit.rule();
 *     // ...
 * }
 * </code></pre>
 *
 * For more information see {@link MockitoJUnit#rule()}.
 *
 *
 *
 *
 * <h3 id="34">34. <a class="meaningful_link" href="#plugin_switch">(new) Switch <em>on</em> or <em>off</em> plugins (Since 1.10.15)</a></h3>
 *
 * An incubating feature made it's way in mockito that will allow to toggle a mockito-plugin.
 *
 * More information here {@link org.mockito.plugins.PluginSwitch}.
 *
 *
 * <h3 id="35">35. <a class="meaningful_link" href="#BDD_behavior_verification">Custom verification failure message</a> (Since 2.0.0)</h3>
 * <p>
 * Allows specifying a custom message to be printed if verification fails.
 * <p>
 * Examples:
 * <p>
 * <pre class="code"><code class="java">
 *
 * // will print a custom message on verification failure
 * verify(mock, description("This will print on failure")).someMethod();
 *
 * // will work with any verification mode
 * verify(mock, times(2).description("someMethod should be called twice")).someMethod();
 * </code></pre>
 *
 * TODO rework the documentation, write about hamcrest.
 *
 

----------------------


     Method public static void reset(T... mocks)    (Mockito.java)

     
          * Smart Mockito users hardly use this feature because they know it could be a sign of poor tests.
          * Normally, you don't need to reset your mocks, just create new mocks for each test method.
          * <p>
          * Instead of <code>#reset()</code> please consider writing simple, small and focused test methods over lengthy, over-specified tests.
          * <b>First potential code smell is <code>reset()</code> in the middle of the test method.</b> This probably means you're testing too much.
          * Follow the whisper of your test methods: "Please keep us small & focused on single behavior".
          * There are several threads about it on mockito mailing list.
          * <p>
          * The only reason we added <code>reset()</code> method is to
          * make it possible to work with container-injected mocks.
          * See issue 55 (<a href="http://code.google.com/p/mockito/issues/detail?id=55">here</a>)
          * or FAQ (<a href="http://code.google.com/p/mockito/wiki/FAQ">here</a>).
          * <p>
          * <b>Don't harm yourself.</b> <code>reset()</code> in the middle of the test method is a code smell (you're probably testing too much).
          * <pre class="code"><code class="java">
          *   List mock = mock(List.class);
          *   when(mock.size()).thenReturn(10);
          *   mock.add(1);
          *
          *   reset(mock);
          *   //at this point the mock forgot any interactions & stubbing
          * </code></pre>
          *
          * @param <T> The Type of the mocks
          * @param mocks to be reset
          

     ----------------------




Class ArgumentCaptor  (ArgumentCaptor.java)
     Method public ArgumentCaptor()  (ArgumentCaptor.java)

Class ArgumentCaptor    (ArgumentCaptor.java)


 * Use it to capture argument values for further assertions.
 *
 * <p>
 * Mockito verifies argument values in natural java style: by using an equals() method.
 * This is also the recommended way of matching arguments because it makes tests clean & simple.
 * In some situations though, it is helpful to assert on certain arguments after the actual verification.
 * For example:
 * <pre class="code"><code class="java">
 *   ArgumentCaptor&lt;Person&gt; argument = ArgumentCaptor.forClass(Person.class);
 *   verify(mock).doSomething(argument.capture());
 *   assertEquals("John", argument.getValue().getName());
 * </code></pre>
 *
 * Example of capturing varargs:
 * <pre class="code"><code class="java">
 *   //capturing varargs:
 *   ArgumentCaptor&lt;Person&gt; varArgs = ArgumentCaptor.forClass(Person.class);
 *   verify(mock).varArgMethod(varArgs.capture());
 *   List expected = asList(new Person("John"), new Person("Jane"));
 *   assertEquals(expected, varArgs.getAllValues());
 * </code></pre>
 *
 * <p>
 * <strong>Warning:</strong> it is recommended to use ArgumentCaptor with verification <strong>but not</strong> with stubbing.
 * Using ArgumentCaptor with stubbing may decrease test readability because captor is created outside of assert (aka verify or 'then') block.
 * Also it may reduce defect localization because if stubbed method was not called then no argument is captured.
 *
 * <p>
 * In a way ArgumentCaptor is related to custom argument matchers (see javadoc for {@link ArgumentMatcher} class).
 * Both techniques can be used for making sure certain arguments where passed to mocks. 
 * However, ArgumentCaptor may be a better fit if:
 * <ul>  
 * <li>custom argument matcher is not likely to be reused</li>
 * <li>you just need it to assert on argument values to complete verification</li>
 * </ul>
 * Custom argument matchers via {@link ArgumentMatcher} are usually better for stubbing.
 *
 * <p>
 * This utility class <strong>*don't do any type checks*</strong>, the generic signatures are only there to avoid casting
 * in your code.
 * <p>
 * There is an <strong>annotation</strong> that you might find useful: &#64;{@link Captor}
 * <p>
 * See the full documentation on Mockito in javadoc for {@link Mockito} class.
 *
 * @see Captor
 * @since 1.8.0
 

----------------------


     Method public ArgumentCaptor()    (ArgumentCaptor.java)

     
          * @deprecated
          * 
          * <b>Please use factory method {@link ArgumentCaptor#forClass(Class)} to create captors</b>
          * <p>
          * This is required to avoid NullPointerExceptions when autoUnboxing primitive types.
          * See issue 99.
          * <p>
          * Example:
          * <pre class="code"><code class="java">
          *   ArgumentCaptor&lt;Person&gt; argument = ArgumentCaptor.forClass(Person.class);
          *   verify(mock).doSomething(argument.capture());
          *   assertEquals("John", argument.getValue().getName());
          * </code></pre>
          

     ----------------------




Method public static Stubber doReturn(Object toBeReturned, Object... toBeReturnedNext)  (Mockito.java)
     Method public static Stubber doReturn(Object toBeReturned)  (Mockito.java)

Method public static Stubber doReturn(Object toBeReturned, Object... toBeReturnedNext)    (Mockito.java)


     * Same as {@link #doReturn(Object)} but sets consecutive values to be returned. Remember to use
     * <code>doReturn()</code> in those rare occasions when you cannot use {@link Mockito#when(Object)}.
     * <p>
     * <b>Beware that {@link Mockito#when(Object)} is always recommended for stubbing because it is argument type-safe
     * and more readable</b> (especially when stubbing consecutive calls).
     * <p>
     * Here are those rare occasions when doReturn() comes handy:
     * <p>
     *
     * <ol>
     * <li>When spying real objects and calling real methods on a spy brings side effects
     *
     * <pre class="code"><code class="java">
     *   List list = new LinkedList();
     *   List spy = spy(list);
     *
     *   //Impossible: real method is called so spy.get(0) throws IndexOutOfBoundsException (the list is yet empty)
     *   when(spy.get(0)).thenReturn("foo", "bar", "qix");
     *
     *   //You have to use doReturn() for stubbing:
     *   doReturn("foo", "bar", "qix").when(spy).get(0);
     * </code></pre>
     * </li>
     *
     * <li>Overriding a previous exception-stubbing:
     * <pre class="code"><code class="java">
     *   when(mock.foo()).thenThrow(new RuntimeException());
     *
     *   //Impossible: the exception-stubbed foo() method is called so RuntimeException is thrown.
     *   when(mock.foo()).thenReturn("bar", "foo", "qix");
     *
     *   //You have to use doReturn() for stubbing:
     *   doReturn("bar", "foo", "qix").when(mock).foo();
     * </code></pre>
     * </li>
     * </ol>
     *
     * Above scenarios shows a trade-off of Mockito's elegant syntax. Note that the scenarios are very rare, though.
     * Spying should be sporadic and overriding exception-stubbing is very rare. Not to mention that in general
     * overridding stubbing is a potential code smell that points out too much stubbing.
     * <p>
     * See examples in javadoc for {@link Mockito} class
     *
     * @param toBeReturned to be returned when the stubbed method is called
     * @param toBeReturnedNext to be returned in consecutive calls when the stubbed method is called
     * @return stubber - to select a method for stubbing
     * @since 2.0.0
     

----------------------


     Method public static Stubber doReturn(Object toBeReturned)    (Mockito.java)

     
          * Use <code>doReturn()</code> in those rare occasions when you cannot use {@link Mockito#when(Object)}.
          * <p>
          * <b>Beware that {@link Mockito#when(Object)} is always recommended for stubbing because it is argument type-safe
          * and more readable</b> (especially when stubbing consecutive calls).
          * <p>
          * Here are those rare occasions when doReturn() comes handy:
          * <p>
          *
          * <ol>
          * <li>When spying real objects and calling real methods on a spy brings side effects
          *
          * <pre class="code"><code class="java">
          *   List list = new LinkedList();
          *   List spy = spy(list);
          *
          *   //Impossible: real method is called so spy.get(0) throws IndexOutOfBoundsException (the list is yet empty)
          *   when(spy.get(0)).thenReturn("foo");
          *
          *   //You have to use doReturn() for stubbing:
          *   doReturn("foo").when(spy).get(0);
          * </code></pre>
          * </li>
          *
          * <li>Overriding a previous exception-stubbing:
          * <pre class="code"><code class="java">
          *   when(mock.foo()).thenThrow(new RuntimeException());
          *
          *   //Impossible: the exception-stubbed foo() method is called so RuntimeException is thrown.
          *   when(mock.foo()).thenReturn("bar");
          *
          *   //You have to use doReturn() for stubbing:
          *   doReturn("bar").when(mock).foo();
          * </code></pre>
          * </li>
          * </ol>
          *
          * Above scenarios shows a tradeoff of Mockito's elegant syntax. Note that the scenarios are very rare, though.
          * Spying should be sporadic and overriding exception-stubbing is very rare. Not to mention that in general
          * overridding stubbing is a potential code smell that points out too much stubbing.
          * <p>
          * See examples in javadoc for {@link Mockito} class
          *
          * @param toBeReturned to be returned when the stubbed method is called
          * @return stubber - to select a method for stubbing
          

     ----------------------




Method public static VerificationWithTimeout timeout(long millis)  (Mockito.java)
     Method public static VerificationAfterDelay after(long millis)  (Mockito.java)

Method public static VerificationWithTimeout timeout(long millis)    (Mockito.java)


     * Allows verifying with timeout. It causes a verify to wait for a specified period of time for a desired
     * interaction rather than fails immediately if has not already happened. May be useful for testing in concurrent
     * conditions.
     * <p>
     * This differs from {@link Mockito#after after()} in that after() will wait the full period, unless
     * the final test result is known early (e.g. if a never() fails), whereas timeout() will stop early as soon
     * as verification passes, producing different behaviour when used with times(2), for example, which can pass
     * and then later fail. In that case, timeout would pass as soon as times(2) passes, whereas after would run until
     * times(2) failed, and then fail.
     * <p>
     * It feels this feature should be used rarely - figure out a better way of testing your multi-threaded system
     * <p>
     * Not yet implemented to work with InOrder verification.
     * <pre class="code"><code class="java">
     *   //passes when someMethod() is called within given time span
     *   verify(mock, timeout(100)).someMethod();
     *   //above is an alias to:
     *   verify(mock, timeout(100).times(1)).someMethod();
     *
     *   //passes as soon as someMethod() has been called 2 times before the given timeout
     *   verify(mock, timeout(100).times(2)).someMethod();
     *
     *   //equivalent: this also passes as soon as someMethod() has been called 2 times before the given timeout
     *   verify(mock, timeout(100).atLeast(2)).someMethod();
     *
     *   //verifies someMethod() within given time span using given verification mode
     *   //useful only if you have your own custom verification modes.
     *   verify(mock, new Timeout(100, yourOwnVerificationMode)).someMethod();
     * </code></pre>
     *
     * See examples in javadoc for {@link Mockito} class
     *
     * @param millis - time span in milliseconds
     *
     * @return verification mode
     

----------------------


     Method public static VerificationAfterDelay after(long millis)    (Mockito.java)

     
          * Allows verifying over a given period. It causes a verify to wait for a specified period of time for a desired
          * interaction rather than failing immediately if has not already happened. May be useful for testing in concurrent
          * conditions.
          * <p>
          * This differs from {@link Mockito#timeout timeout()} in that after() will wait the full period, whereas timeout()
          * will stop early as soon as verification passes, producing different behaviour when used with times(2), for example,
          * which can pass and then later fail. In that case, timeout would pass as soon as times(2) passes, whereas after would
          * run the full time, which point it will fail, as times(2) has failed.
          * <p>
          * It feels this feature should be used rarely - figure out a better way of testing your multi-threaded system
          * <p>
          * Not yet implemented to work with InOrder verification.
          * <pre class="code"><code class="java">
          *   //passes after 100ms, if someMethod() has only been called once at that time.
          *   verify(mock, after(100)).someMethod();
          *   //above is an alias to:
          *   verify(mock, after(100).times(1)).someMethod();
          *
          *   //passes if someMethod() is called <b>*exactly*</b> 2 times after the given timespan
          *   verify(mock, after(100).times(2)).someMethod();
          *
          *   //passes if someMethod() has not been called after the given timespan
          *   verify(mock, after(100).never()).someMethod();
          *
          *   //verifies someMethod() after a given time span using given verification mode
          *   //useful only if you have your own custom verification modes.
          *   verify(mock, new After(100, yourOwnVerificationMode)).someMethod();
          * </code></pre>
          *
          * See examples in javadoc for {@link Mockito} class
          *
          * @param millis - time span in milliseconds
          *
          * @return verification mode
          

     ----------------------




Interface PluginSwitch  (PluginSwitch.java)
     Interface InstantiatorProvider  (InstantiatorProvider.java)

Interface PluginSwitch    (PluginSwitch.java)


 * Allows switching off the plugins that are discovered on classpath.
 *
 * <p>
 *     Mockito will invoke this interface in order to select whether a plugin is enabled or not.
 * </p>
 *
 * <p>
 *     When a particular plugin is switched off, the default Mockito behavior is used.
 *     For example, if Android's dexmaker MockMaker is switched off,
 *     Mockito default MockMaker implementation is used {@link org.mockito.plugins.MockMaker}
 * </p>
 *
 * <h3>Using the extension point</h3>
 *
 * <p>
 *     The plugin mechanism of mockito works in a similar way as the {@link java.util.ServiceLoader}, however instead of
 *     looking in the <code>META-INF</code> directory, Mockito will look in <code>mockito-extensions</code> directory.
 *     <em>The reason for that is that Android SDK strips jar from the <code>META-INF</code> directory when creating an APK.</em>
 * </p>
 *
 * <ol style="list-style-type: lower-alpha">
 *     <li>The implementation itself, for example <code>org.awesome.mockito.AwesomeMockMaker</code> that extends the <code>MockMaker</code>.</li>
 *     <li>A file "<code>mockito-extensions/org.mockito.plugins.MockMaker</code>". The content of this file is
 *     exactly a <strong>one</strong> line with the qualified name: <code>org.awesome.mockito.AwesomeMockMaker</code>.</li>
 * </ol></p>
 *
 * <p>Note that if several <code>mockito-extensions/org.mockito.plugins.MockMaker</code> files exists in the classpath
 * Mockito will only use the first returned by the standard {@link ClassLoader#getResource} mechanism.
 * <p>
 *     So just create a custom implementation of {@link PluginSwitch} and place the qualified name in the following file
 *     <code>mockito-extensions/org.mockito.plugins.PluginSwitch</code>.
 * </p>
 *
 * @since 1.10.15
 

----------------------


     Interface InstantiatorProvider    (InstantiatorProvider.java)

     
      * <p>
      *     Mockito will invoke this interface in order to fetch an instance instantiator provider.
      * </p>
      *
      * <p>
      *     By default, an internal byte-buddy/asm/objenesis based implementation is used.
      * </p>
      *
      * <h3>Using the extension point</h3>
      *
      * <p>
      *     The plugin mechanism of mockito works in a similar way as the
      *     {@link java.util.ServiceLoader}, however instead of looking in the <code>META-INF</code>
      *     directory, Mockito will look in <code>mockito-extensions</code> directory.
      *     <em>The reason for that is that Android SDK strips jar from the <code>META-INF</code>
      *     directory when creating an APK.</em>
      * </p>
      *
      * <ol style="list-style-type: lower-alpha">
      *     <li>The implementation itself, for example
      *         <code>org.awesome.mockito.AwesomeInstantiatorProvider</code> that implements the
      *         <code>InstantiatorProvider</code>.</li>
      *     <li>A file "<code>mockito-extensions/org.mockito.plugins.InstantiatorProvider</code>".
      *         The content of this file is exactly a <strong>one</strong> line with the qualified
      *         name: <code>org.awesome.mockito.AwesomeInstantiatorProvider</code>.</li>
      * </ol></p>
      *
      * <p>
      *     Note that if several <code>mockito-extensions/org.mockito.plugins.InstantiatorProvider</code>
      *     files exists in the classpath, Mockito will only use the first returned by the standard
      *     {@link ClassLoader#getResource} mechanism.
      * <p>
      *     So just create a custom implementation of {@link InstantiatorProvider} and place the
      *     qualified name in the following file
      *     <code>mockito-extensions/org.mockito.plugins.InstantiatorProvider</code>.
      * </p>
      *
      * @since 21.10.15
      

     ----------------------




Annotation Mock  (Mock.java)
     Class MockitoAnnotations  (MockitoAnnotations.java)

Annotation Mock    (Mock.java)


 * Mark a field as a mock.
 *
 * <ul>
 * <li>Allows shorthand mock creation.</li>
 * <li>Minimizes repetitive mock creation code.</li>
 * <li>Makes the test class more readable.</li>
 * <li>Makes the verification error easier to read because the <b>field name</b> is used to identify the mock.</li>
 * </ul>
 *
 * <pre class="code"><code class="java">
 *   public class ArticleManagerTest extends SampleBaseTestCase {
 *
 *       &#064;Mock private ArticleCalculator calculator;
 *       &#064;Mock(name = "database") private ArticleDatabase dbMock;
 *       &#064;Mock(answer = RETURNS_MOCKS) private UserProvider userProvider;
 *       &#064;Mock(extraInterfaces = {Queue.class, Observer.class}) private  articleMonitor;
 *
 *       private ArticleManager manager;
 *
 *       &#064;Before public void setup() {
 *           manager = new ArticleManager(userProvider, database, calculator, articleMonitor);
 *       }
 *   }
 *
 *   public class SampleBaseTestCase {
 *
 *       &#064;Before public void initMocks() {
 *           MockitoAnnotations.initMocks(this);
 *       }
 *   }
 * </code></pre>
 *
 * <p>
 * <strong><code>MockitoAnnotations.initMocks(this)</code></strong> method has to be called to initialize annotated objects.
 * In above example, <code>initMocks()</code> is called in &#064;Before (JUnit4) method of test's base class.
 * For JUnit3 <code>initMocks()</code> can go to <code>setup()</code> method of a base class.
 * <strong>Instead</strong> you can also put initMocks() in your JUnit runner (&#064;RunWith) or use the built-in
 * {@link org.mockito.runners.MockitoJUnitRunner}.
 * </p>
 *
 * @see Mockito#mock(Class)
 * @see Spy
 * @see InjectMocks
 * @see MockitoAnnotations#initMocks(Object)
 * @see org.mockito.runners.MockitoJUnitRunner
 

----------------------


     Class MockitoAnnotations    (MockitoAnnotations.java)

     
      * MockitoAnnotations.initMocks(this); initializes fields annotated with Mockito annotations.
      * <p>  
      * <ul>
      * <li>Allows shorthand creation of objects required for testing.</li> 
      * <li>Minimizes repetitive mock creation code.</li> 
      * <li>Makes the test class more readable.</li>
      * <li>Makes the verification error easier to read because <b>field name</b> is used to identify the mock.</li>
      * </ul>
      * 
      * <pre class="code"><code class="java">
      *   public class ArticleManagerTest extends SampleBaseTestCase { 
      *     
      *       &#064;Mock private ArticleCalculator calculator;
      *       &#064;Mock private ArticleDatabase database;
      *       &#064;Mock private UserProvider userProvider;
      *     
      *       private ArticleManager manager;
      *     
      *       &#064;Before public void setup() {
      *           manager = new ArticleManager(userProvider, database, calculator);
      *       }
      *   }
      *   
      *   public class SampleBaseTestCase {
      *   
      *       &#064;Before public void initMocks() {
      *           MockitoAnnotations.initMocks(this);
      *       }
      *   }
      * </code></pre>
      * <p>
      * Read also about other annotations &#064;{@link Spy}, &#064;{@link Captor}, &#064;{@link InjectMocks}
      * <p>
      * <b><code>MockitoAnnotations.initMocks(this)</code></b> method has to called to initialize annotated fields.
      * <p>
      * In above example, <code>initMocks()</code> is called in &#064;Before (JUnit4) method of test's base class. 
      * For JUnit3 <code>initMocks()</code> can go to <code>setup()</code> method of a base class.
      * You can also put initMocks() in your JUnit runner (&#064;RunWith) or use built-in runner: {@link MockitoJUnitRunner}
      

     ----------------------




Field CALLS_REAL_METHODS  (Mockito.java)
     Class CallsRealMethods  (CallsRealMethods.java)

Field CALLS_REAL_METHODS    (Mockito.java)


     * Optional <code>Answer</code> to be used with {@link Mockito#mock(Class, Answer)}
     * <p>
     * {@link Answer} can be used to define the return values of unstubbed invocations.
     * <p>
     * This implementation can be helpful when working with legacy code.
     * When this implementation is used, unstubbed methods will delegate to the real implementation.
     * This is a way to create a partial mock object that calls real methods by default.
     * <p>
     * As usual you are going to read <b>the partial mock warning</b>:
     * Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
     * How does partial mock fit into this paradigm? Well, it just doesn't...
     * Partial mock usually means that the complexity has been moved to a different method on the same object.
     * In most cases, this is not the way you want to design your application.
     * <p>
     * However, there are rare cases when partial mocks come handy:
     * dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
     * However, I wouldn't use partial mocks for new, test-driven & well-designed code.
     * <p>
     * Example:
     * <pre class="code"><code class="java">
     * Foo mock = mock(Foo.class, CALLS_REAL_METHODS);
     *
     * // this calls the real implementation of Foo.getSomething()
     * value = mock.getSomething();
     *
     * when(mock.getSomething()).thenReturn(fakeValue);
     *
     * // now fakeValue is returned
     * value = mock.getSomething();
     * </code></pre>
     

----------------------


     Class CallsRealMethods    (CallsRealMethods.java)

     
      * Optional Answer that adds partial mocking support
      * <p>
      * {@link Answer} can be used to define the return values of unstubbed invocations.
      * <p>
      * This implementation can be helpful when working with legacy code.
      * When this implementation is used, unstubbed methods will delegate to the real implementation.
      * This is a way to create a partial mock object that calls real methods by default.
      * <p>
      * As usual you are going to read <b>the partial mock warning</b>:
      * Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
      * How does partial mock fit into this paradigm? Well, it just doesn't... 
      * Partial mock usually means that the complexity has been moved to a different method on the same object.
      * In most cases, this is not the way you want to design your application.
      * <p>
      * However, there are rare cases when partial mocks come handy: 
      * dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
      * However, I wouldn't use partial mocks for new, test-driven & well-designed code.
      * <p>
      

     ----------------------




Field RETURNS_SMART_NULLS  (Mockito.java)
     Class ReturnsSmartNulls  (ReturnsSmartNulls.java)

Field RETURNS_SMART_NULLS    (Mockito.java)


     * Optional <code>Answer</code> to be used with {@link Mockito#mock(Class, Answer)}.
     * <p>
     * {@link Answer} can be used to define the return values of unstubbed invocations.
     * <p>
     * This implementation can be helpful when working with legacy code.
     * Unstubbed methods often return null. If your code uses the object returned by an unstubbed call you get a NullPointerException.
     * This implementation of Answer <b>returns SmartNull instead of null</b>.
     * <code>SmartNull</code> gives nicer exception message than NPE because it points out the line where unstubbed method was called. You just click on the stack trace.
     * <p>
     * <code>ReturnsSmartNulls</code> first tries to return ordinary return values (see {@link ReturnsMoreEmptyValues})
     * then it tries to return SmartNull. If the return type is final then plain null is returned.
     * <p>
     * <code>ReturnsSmartNulls</code> will be probably the default return values strategy in Mockito 2.0.
     * <p>
     * Example:
     * <pre class="code"><code class="java">
     *   Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);
     *
     *   //calling unstubbed method here:
     *   Stuff stuff = mock.getStuff();
     *
     *   //using object returned by unstubbed call:
     *   stuff.doSomething();
     *
     *   //Above doesn't yield NullPointerException this time!
     *   //Instead, SmartNullPointerException is thrown.
     *   //Exception's cause links to unstubbed <i>mock.getStuff()</i> - just click on the stack trace.
     * </code></pre>
     

----------------------


     Class ReturnsSmartNulls    (ReturnsSmartNulls.java)

     
      * Optional Answer that can be used with
      * {@link Mockito#mock(Class, Answer)}
      * <p>
      * This implementation can be helpful when working with legacy code. Unstubbed
      * methods often return null. If your code uses the object returned by an
      * unstubbed call you get a NullPointerException. This implementation of
      * Answer returns SmartNulls instead of nulls.
      * SmartNull gives nicer exception message than NPE because it points out the
      * line where unstubbed method was called. You just click on the stack trace.
      * <p>
      * ReturnsSmartNulls first tries to return ordinary return values (see
      * {@link ReturnsMoreEmptyValues}) then it tries to return SmartNull. If the
      * return type is not mockable (e.g. final) then ordinary null is returned.
      * <p>
      * ReturnsSmartNulls will be probably the default return values strategy in
      * Mockito 2.0
      

     ----------------------




Method public static MockSettings withSettings()  (Mockito.java)
     Interface MockSettings  (MockSettings.java)

Method public static MockSettings withSettings()    (Mockito.java)


     * Allows mock creation with additional mock settings.
     * <p>
     * Don't use it too often.
     * Consider writing simple tests that use simple mocks.
     * Repeat after me: simple tests push simple, KISSy, readable & maintainable code.
     * If you cannot write a test in a simple way - refactor the code under test.
     * <p>
     * Examples of mock settings:
     * <pre class="code"><code class="java">
     *   //Creates mock with different default answer & name
     *   Foo mock = mock(Foo.class, withSettings()
     *       .defaultAnswer(RETURNS_SMART_NULLS)
     *       .name("cool mockie"));
     *
     *   //Creates mock with different default answer, descriptive name and extra interfaces
     *   Foo mock = mock(Foo.class, withSettings()
     *       .defaultAnswer(RETURNS_SMART_NULLS)
     *       .name("cool mockie")
     *       .extraInterfaces(Bar.class));
     * </code></pre>
     * {@link MockSettings} has been introduced for two reasons.
     * Firstly, to make it easy to add another mock settings when the demand comes.
     * Secondly, to enable combining different mock settings without introducing zillions of overloaded mock() methods.
     * <p>
     * See javadoc for {@link MockSettings} to learn about possible mock settings.
     * <p>
     *
     * @return mock settings instance with defaults.
     

----------------------


     Interface MockSettings    (MockSettings.java)

     
      * Allows mock creation with additional mock settings.
      * <p/>
      * Don't use it too often.
      * Consider writing simple tests that use simple mocks.
      * Repeat after me: simple tests push simple, KISSy, readable & maintainable code.
      * If you cannot write a test in a simple way - refactor the code under test.
      * <p/>
      * Examples of mock settings:
      * <pre class="code"><code class="java">
      *   //Creates mock with different default answer & name
      *   Foo mock = mock(Foo.class, withSettings()
      *                                .defaultAnswer(RETURNS_SMART_NULLS)
      *                                .name("cool mockie")
      *                                );
      *
      *   //Creates mock with different default answer, descriptive name and extra interfaces
      *   Foo mock = mock(Foo.class, withSettings()
      *                                .defaultAnswer(RETURNS_SMART_NULLS)
      *                                .name("cool mockie")
      *                                .extraInterfaces(Bar.class));
      * </code></pre>
      * {@link MockSettings} has been introduced for two reasons.
      * Firstly, to make it easy to add another mock setting when the demand comes.
      * Secondly, to enable combining together different mock settings without introducing zillions of overloaded mock() methods.
      

     ----------------------




Method public static T spy(Class<T> classToSpy)  (Mockito.java)
     Method MockSettings useConstructor()  (MockSettings.java)

Method public static T spy(Class<T> classToSpy)    (Mockito.java)


     * Please refer to the documentation of {@link #spy(Object)}.
     * Overusing spies hints at code design smells.
     * <p>
     * This method, in contrast to the original {@link #spy(Object)}, creates a spy based on class instead of an object.
     * Sometimes it is more convenient to create spy based on the class and avoid providing an instance of a spied object.
     * This is particularly useful for spying on abstract classes because they cannot be instantiated.
     * See also {@link MockSettings#useConstructor()}.
     * <p>
     * Examples:
     * <pre class="code"><code class="java">
     *   SomeAbstract spy = spy(SomeAbstract.class);
     *
     *   //Robust API, via settings builder:
     *   OtherAbstract spy = mock(OtherAbstract.class, withSettings()
     *      .useConstructor().defaultAnswer(CALLS_REAL_METHODS));
     *
     *   //Mocking a non-static inner abstract class:
     *   InnerAbstract spy = mock(InnerAbstract.class, withSettings()
     *      .useConstructor().outerInstance(outerInstance).defaultAnswer(CALLS_REAL_METHODS));
     * </code></pre>
     *
     * @param classToSpy the class to spy
     * @param <T> type of the spy
     * @return a spy of the provided class
     * @since 1.10.12
     

----------------------


     Method MockSettings useConstructor()    (MockSettings.java)

     
          * Mockito attempts to use constructor when creating instance of the mock.
          * This is particularly useful for spying on abstract classes. See also {@link Mockito#spy(Class)}.
          * <p>
          * Example:
          * <pre class="code"><code class="java">
          * //Robust API, via settings builder:
          * OtherAbstract spy = mock(OtherAbstract.class, withSettings()
          *   .useConstructor().defaultAnswer(CALLS_REAL_METHODS));
          *
          * //Mocking a non-static inner abstract class:
          * InnerAbstract spy = mock(InnerAbstract.class, withSettings()
          *   .useConstructor().outerInstance(outerInstance).defaultAnswer(CALLS_REAL_METHODS));
          * </code></pre>
          *
          * @return settings instance so that you can fluently specify other settings
          * @since 1.10.12
          

     ----------------------




Class MockitoJUnit44Runner  (MockitoJUnit44Runner.java)
     Class MockitoJUnitRunner  (MockitoJUnitRunner.java)

Class MockitoJUnit44Runner    (MockitoJUnit44Runner.java)


 * <b>Deprecated: Simply use {@link MockitoJUnitRunner}</b>
 * <p>
 * Compatible only with <b>JUnit 4.4</b>, this runner adds following behavior:
 * <ul>
 *   <li>
 *      Initializes mocks annotated with {@link Mock},
 *      so that explicit usage of {@link MockitoAnnotations#initMocks(Object)} is not necessary. 
 *      Mocks are initialized before each test method.
 *   <li>
 *      validates framework usage after each test method. See javadoc for {@link Mockito#validateMockitoUsage()}.
 * </ul>
 * 
 * Runner is completely optional - there are other ways you can get &#064;Mock working, for example by writing a base class.
 * Explicitly validating framework usage is also optional because it is triggered automatically by Mockito every time you use the framework.
 * See javadoc for {@link Mockito#validateMockitoUsage()}.
 * <p>
 * Read more about &#064;Mock annotation in javadoc for {@link MockitoAnnotations}
 * <p>
 * Example:
 * <pre class="code"><code class="java">
 * &#064;RunWith(MockitoJUnitRunner.class)
 * public class ExampleTest {
 * 
 *     &#064;Mock
 *     private List list;
 * 
 *     &#064;Test
 *     public void shouldDoSomething() {
 *         list.add(100);
 *     }
 * }
 * <p>
 * 
 * </code></pre>
 

----------------------


     Class MockitoJUnitRunner    (MockitoJUnitRunner.java)

     
      * Compatible with <b>JUnit 4.4 and higher</b>, this runner adds following behavior:
      * <ul>
      *   <li>
      *      Initializes mocks annotated with {@link Mock},
      *      so that explicit usage of {@link MockitoAnnotations#initMocks(Object)} is not necessary. 
      *      Mocks are initialized before each test method.
      *   <li>
      *      validates framework usage after each test method. See javadoc for {@link Mockito#validateMockitoUsage()}.
      * </ul>
      * 
      * Runner is completely optional - there are other ways you can get &#064;Mock working, for example by writing a base class.
      * Explicitly validating framework usage is also optional because it is triggered automatically by Mockito every time you use the framework.
      * See javadoc for {@link Mockito#validateMockitoUsage()}.
      * <p>
      * Read more about &#064;Mock annotation in javadoc for {@link MockitoAnnotations}
      * <pre class="code"><code class="java">
      * <b>&#064;RunWith(MockitoJUnitRunner.class)</b>
      * public class ExampleTest {
      * 
      *     &#064;Mock
      *     private List list;
      * 
      *     &#064;Test
      *     public void shouldDoSomething() {
      *         list.add(100);
      *     }
      * }
      * </code></pre>
      

     ----------------------




Method public static VoidMethodStubbable<T> stubVoid(T mock)  (Mockito.java)
     Interface VoidMethodStubbable  (VoidMethodStubbable.java)

Method public static VoidMethodStubbable<T> stubVoid(T mock)    (Mockito.java)


     * <pre class="code"><code class="java">
     *   //Instead of:
     *   stubVoid(mock).toThrow(e).on().someVoidMethod();
     *
     *   //Please do:
     *   doThrow(e).when(mock).someVoidMethod();
     * </code></pre>
     *
     * doThrow() replaces stubVoid() because of improved readability and consistency with the family of doAnswer() methods.
     * <p>
     * Originally, <code>stubVoid()</code> was used for stubbing void methods with exceptions. E.g:
     *
     * <pre class="code"><code class="java">
     * stubVoid(mock).toThrow(new RuntimeException()).on().someMethod();
     *
     * //you can stub with different behavior for consecutive calls.
     * //Last stubbing (e.g. toReturn()) determines the behavior for further consecutive calls.
     * stubVoid(mock)
     *   .toThrow(new RuntimeException())
     *   .toReturn()
     *   .on().someMethod();
     * </code></pre>
     *
     * See examples in javadoc for {@link Mockito} class
     *
     * @deprecated Use {@link Mockito#doThrow(Throwable...)} method for stubbing voids
     *
     * @param mock
     *            to stub
     * @return stubbable object that allows stubbing with throwable
     

----------------------


     Interface VoidMethodStubbable    (VoidMethodStubbable.java)

     
      * Stubs void method with an exception. E.g:
      *
      * <pre class="code"><code class="java">
      * stubVoid(mock).toThrow(new RuntimeException()).on().someMethod();
      *
      * //you can stub with different behavior for consecutive method calls.
      * //Last stubbing (e.g: toReturn()) determines the behavior for further consecutive calls.
      * stubVoid(mock)
      *  .toThrow(new RuntimeException())
      *  .toReturn()
      *  .on().someMethod();
      * </code></pre>
      *
      * See examples in javadoc for {@link Mockito#stubVoid}
      

     ----------------------




Class ReturnsMoreEmptyValues  (ReturnsMoreEmptyValues.java)
     Class ReturnsEmptyValues  (ReturnsEmptyValues.java)

Class ReturnsMoreEmptyValues    (ReturnsMoreEmptyValues.java)


 * It's likely this implementation will be used by default by every Mockito 2.0 mock.
 * <p>
 * Currently <b>used only</b> by {@link Mockito#RETURNS_SMART_NULLS}
 * <p>
 * Current version of Mockito mocks by deafult use {@link ReturnsEmptyValues}  
 * <ul>
 * <li>
 *  Returns appropriate primitive for primitive-returning methods
 * </li>
 * <li>
 *  Returns consistent values for primitive wrapper classes (e.g. int-returning method retuns 0 <b>and</b> Integer-returning method returns 0, too)
 * </li>
 * <li>
 *  Returns empty collection for collection-returning methods (works for most commonly used collection types)
 * </li>
 * <li>
 *  Returns empty array for array-returning methods
 * </li>
 * <li>
 *  Returns "" for String-returning method
 * </li>
 * <li>
 *  Returns description of mock for toString() method
 * </li>
 * <li>
 *  Returns non-zero for Comparable#compareTo(T other) method (see issue 184)
 * </li>
 * <li>
 *  Returns null for everything else
 * </li>
 * </ul>
 

----------------------


     Class ReturnsEmptyValues    (ReturnsEmptyValues.java)

     
      * Default answer of every Mockito mock.
      * <ul>
      * <li>
      *  Returns appropriate primitive for primitive-returning methods
      * </li>
      * <li>
      *  Returns consistent values for primitive wrapper classes (e.g. int-returning method returns 0 <b>and</b> Integer-returning method returns 0, too)
      * </li>
      * <li>
      *  Returns empty collection for collection-returning methods (works for most commonly used collection types)
      * </li>
      * <li>
      *  Returns description of mock for toString() method
      * </li>
      * <li>
      *  Returns zero if references are equals otherwise non-zero for Comparable#compareTo(T other) method (see issue 184)
      * </li>
      * <li>
      *  Returns null for everything else
      * </li>
      * </ul>
      

     ----------------------




Method public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients)  (EqualsBuilder.java)
     Method public static boolean reflectionEquals(Object lhs, Object rhs)  (EqualsBuilder.java)

Method public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients)    (EqualsBuilder.java)


     * <p>This method uses reflection to determine if the two <code>Object</code>s
     * are equal.</p>
     *
     * <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private
     * fields. This means that it will throw a security exception if run under
     * a security manager, if the permissions are not set up correctly. It is also
     * not as efficient as testing explicitly.</p>
     *
     * <p>If the TestTransients parameter is set to <code>true</code>, transient
     * members will be tested, otherwise they are ignored, as they are likely
     * derived fields, and not part of the value of the <code>Object</code>.</p>
     *
     * <p>Static fields will not be tested. Superclass fields will be included.</p>
     *
     * @param lhs  <code>this</code> object
     * @param rhs  the other object
     * @param testTransients  whether to include transient fields
     * @return <code>true</code> if the two Objects have tested equals.
     

----------------------


     Method public static boolean reflectionEquals(Object lhs, Object rhs)    (EqualsBuilder.java)

     
          * <p>This method uses reflection to determine if the two <code>Object</code>s
          * are equal.</p>
          *
          * <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private
          * fields. This means that it will throw a security exception if run under
          * a security manager, if the permissions are not set up correctly. It is also
          * not as efficient as testing explicitly.</p>
          *
          * <p>Transient members will be not be tested, as they are likely derived
          * fields, and not part of the value of the Object.</p>
          *
          * <p>Static fields will not be tested. Superclass fields will be included.</p>
          *
          * @param lhs  <code>this</code> object
          * @param rhs  the other object
          * @return <code>true</code> if the two Objects have tested equals.
          

     ----------------------




Method public static boolean reflectionEquals(Object lhs, Object rhs, String[] excludeFields)  (EqualsBuilder.java)
     Method public static boolean reflectionEquals(Object lhs, Object rhs)  (EqualsBuilder.java)

Method public static boolean reflectionEquals(Object lhs, Object rhs, String[] excludeFields)    (EqualsBuilder.java)


     * <p>This method uses reflection to determine if the two <code>Object</code>s
     * are equal.</p>
     *
     * <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private
     * fields. This means that it will throw a security exception if run under
     * a security manager, if the permissions are not set up correctly. It is also
     * not as efficient as testing explicitly.</p>
     *
     * <p>Transient members will be not be tested, as they are likely derived
     * fields, and not part of the value of the Object.</p>
     *
     * <p>Static fields will not be tested. Superclass fields will be included.</p>
     *
     * @param lhs  <code>this</code> object
     * @param rhs  the other object
     * @param excludeFields  array of field names to exclude from testing
     * @return <code>true</code> if the two Objects have tested equals.
     

----------------------


     Method public static boolean reflectionEquals(Object lhs, Object rhs)    (EqualsBuilder.java)

     
          * <p>This method uses reflection to determine if the two <code>Object</code>s
          * are equal.</p>
          *
          * <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private
          * fields. This means that it will throw a security exception if run under
          * a security manager, if the permissions are not set up correctly. It is also
          * not as efficient as testing explicitly.</p>
          *
          * <p>Transient members will be not be tested, as they are likely derived
          * fields, and not part of the value of the Object.</p>
          *
          * <p>Static fields will not be tested. Superclass fields will be included.</p>
          *
          * @param lhs  <code>this</code> object
          * @param rhs  the other object
          * @return <code>true</code> if the two Objects have tested equals.
          

     ----------------------




Method MockSettings defaultAnswer(Answer defaultAnswer)  (MockSettings.java)
     Method public static T mock(Class<T> classToMock, Answer defaultAnswer)  (Mockito.java)

Method MockSettings defaultAnswer(Answer defaultAnswer)    (MockSettings.java)


     * Specifies default answers to interactions.
     * It's quite advanced feature and typically you don't need it to write decent tests.
     * However it can be helpful when working with legacy systems.
     * <p>
     * It is the default answer so it will be used <b>only when you don't</b> stub the method call.
     *
     * <pre class="code"><code class="java">
     *   Foo mock = mock(Foo.class, withSettings().defaultAnswer(RETURNS_SMART_NULLS));
     *   Foo mockTwo = mock(Foo.class, withSettings().defaultAnswer(new YourOwnAnswer()));
     *
     *   //Below does exactly the same:
     *   Foo mockTwo = mock(Foo.class, new YourOwnAnswer());
     * </code></pre>
     *
     * @param defaultAnswer default answer to be used by mock when not stubbed
     * @return settings instance so that you can fluently specify other settings
     

----------------------


     Method public static T mock(Class<T> classToMock, Answer defaultAnswer)    (Mockito.java)

     
          * Creates mock with a specified strategy for its answers to interactions.
          * It's quite an advanced feature and typically you don't need it to write decent tests.
          * However it can be helpful when working with legacy systems.
          * <p>
          * It is the default answer so it will be used <b>only when you don't</b> stub the method call.
          *
          * <pre class="code"><code class="java">
          *   Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);
          *   Foo mockTwo = mock(Foo.class, new YourOwnAnswer());
          * </code></pre>
          *
          * <p>See examples in javadoc for {@link Mockito} class</p>
          *
          * @param classToMock class or interface to mock
          * @param defaultAnswer default answer for unstubbed methods
          *
          * @return mock object
          

     ----------------------




Method public VerificationOverTimeImpl(long pollingPeriodMillis, long durationMillis, VerificationMode delegate, boolean returnOnSuccess)  (VerificationOverTimeImpl.java)
     Method public VerificationOverTimeImpl(long pollingPeriodMillis, VerificationMode delegate, boolean returnOnSuccess, Timer timer)  (VerificationOverTimeImpl.java)

Method public VerificationOverTimeImpl(long pollingPeriodMillis, long durationMillis, VerificationMode delegate, boolean returnOnSuccess)    (VerificationOverTimeImpl.java)


     * Create this verification mode, to be used to verify invocation ongoing data later.
     *
     * @param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
     * @param durationMillis The max time to wait (in millis) for the delegate verification mode to be satisfied
     * @param delegate The verification mode to delegate overall success or failure to
     * @param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
     *                        {@link org.mockito.verification.VerificationWithTimeout}, or to only return once
     *                        the delegate is satisfied and the full duration has passed (as in
     *                        {@link org.mockito.verification.VerificationAfterDelay}).
     

----------------------


     Method public VerificationOverTimeImpl(long pollingPeriodMillis, VerificationMode delegate, boolean returnOnSuccess, Timer timer)    (VerificationOverTimeImpl.java)

     
          * Create this verification mode, to be used to verify invocation ongoing data later.
          *
          * @param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied
          * @param delegate The verification mode to delegate overall success or failure to
          * @param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in
          *                        {@link org.mockito.verification.VerificationWithTimeout}, or to only return once
          *                        the delegate is satisfied and the full duration has passed (as in
          *                        {@link org.mockito.verification.VerificationAfterDelay}).
          * @param timer Checker of whether the duration of the verification is still acceptable
          

     ----------------------




Interface Stubber  (Stubber.java)
     Method T when(T mock)  (Stubber.java)

Interface Stubber    (Stubber.java)


 * Allows to choose a method when stubbing in doThrow()|doAnswer()|doNothing()|doReturn() style
 * <p> 
 * Example:
 * <pre class="code"><code class="java">
 *   doThrow(new RuntimeException()).when(mockedList).clear();
 *   
 *   //following throws RuntimeException:
 *   mockedList.clear();
 * </code></pre>
 * 
 * Also useful when stubbing consecutive calls:
 * 
 * <pre class="code"><code class="java">
 *   doThrow(new RuntimeException("one")).
 *   doThrow(new RuntimeException("two"))
 *   .when(mock).someVoidMethod();
 * </code></pre>
 * 
 * Read more about those methods:
 * <p>
 * {@link Mockito#doThrow(Throwable[])}
 * <p>
 * {@link Mockito#doAnswer(Answer)}
 * <p>
 * {@link Mockito#doNothing()}
 * <p>
 * {@link Mockito#doReturn(Object)}
 * <p>
 * 
 * See examples in javadoc for {@link Mockito}
 

----------------------


     Method T when(T mock)    (Stubber.java)

     
          * Allows to choose a method when stubbing in doThrow()|doAnswer()|doNothing()|doReturn() style
          * <p> 
          * Example:
          * <pre class="code"><code class="java">
          *   doThrow(new RuntimeException())
          *   .when(mockedList).clear();
          *   
          *   //following throws RuntimeException:
          *   mockedList.clear();
          * </code></pre>
          * 
          * Read more about those methods:
          * <p>
          * {@link Mockito#doThrow(Throwable[])}
          * <p>
          * {@link Mockito#doAnswer(Answer)}
          * <p>
          * {@link Mockito#doNothing()}
          * <p>
          * {@link Mockito#doReturn(Object)}
          * <p>
          * 
          * See examples in javadoc for {@link Mockito}
          * 
          * @param mock The mock
          * @return select method for stubbing
          

     ----------------------




Method MockSettings serializable()  (MockSettings.java)
     Method MockSettings stubOnly()  (MockSettings.java)
     Method MockSettings verboseLogging()  (MockSettings.java)

Method MockSettings serializable()    (MockSettings.java)


     * Configures the mock to be serializable. With this feature you can use a mock in a place that requires dependencies to be serializable.
     * <p>
     * WARNING: This should be rarely used in unit testing.
     * <p>
     * The behaviour was implemented for a specific use case of a BDD spec that had an unreliable external dependency.  This
     * was in a web environment and the objects from the external dependency were being serialized to pass between layers.
     * <p>
     * Example:
     * <pre class="code"><code class="java">
     *   List serializableMock = mock(List.class, withSettings().serializable());
     * </code></pre>
     *
     * @return settings instance so that you can fluently specify other settings
     * @since 1.8.1
     

----------------------


     Method MockSettings stubOnly()    (MockSettings.java)

     
          * A stub-only mock does not record method
          * invocations, thus saving memory but
          * disallowing verification of invocations.
          * <p>
          * Example:
          * <pre class="code"><code class="java">
          * List stubOnly = mock(List.class, withSettings().stubOnly());
          * </code></pre>
          *
          * @return settings instance so that you can fluently specify other settings
          

     ----------------------


     Method MockSettings verboseLogging()    (MockSettings.java)

     
          * Enables real-time logging of method invocations on this mock. Can be used
          * during test debugging in order to find wrong interactions with this mock.
          * <p>
          * Invocations are logged as they happen to the standard output stream.
          * <p>
          * Calling this method multiple times makes no difference.
          * <p>
          * Example:
          * <pre class="code"><code class="java">
          * List mockWithLogger = mock(List.class, withSettings().verboseLogging());
          * </code></pre>
          *
          * @return settings instance so that you can fluently specify other settings
          

     ----------------------




Method public static T mock(Class<T> classToMock, String name)  (Mockito.java)
     Method public static T mock(Class<T> classToMock)  (Mockito.java)

Method public static T mock(Class<T> classToMock, String name)    (Mockito.java)


     * Specifies mock name. Naming mocks can be helpful for debugging - the name is used in all verification errors.
     * <p>
     * Beware that naming mocks is not a solution for complex code which uses too many mocks or collaborators.
     * <b>If you have too many mocks then refactor the code</b> so that it's easy to test/debug without necessity of naming mocks.
     * <p>
     * <b>If you use <code>&#064;Mock</code> annotation then you've got naming mocks for free!</b> <code>&#064;Mock</code> uses field name as mock name. {@link Mock Read more.}
     * <p>
     *
     * See examples in javadoc for {@link Mockito} class
     *
     * @param classToMock class or interface to mock
     * @param name of the mock
     * @return mock object
     

----------------------


     Method public static T mock(Class<T> classToMock)    (Mockito.java)

     
          * Creates mock object of given class or interface.
          * <p>
          * See examples in javadoc for {@link Mockito} class
          *
          * @param classToMock class or interface to mock
          * @return mock object
          

     ----------------------




Method public VerificationMode atMost(int maxNumberOfInvocations)  (VerificationWithTimeout.java)
     Method public VerificationMode never()  (VerificationWithTimeout.java)

Method public VerificationMode atMost(int maxNumberOfInvocations)    (VerificationWithTimeout.java)


     * @deprecated
     *
     * <b>Deprecated</b>
     * Validation with timeout combined with never simply does not make sense, as atMost() will typically immediately pass,
     * and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().atMost(). 
     * <p>
     * To avoid compilation errors upon upgrade the method is deprecated and it throws a "friendly reminder" exception.
     * <p>
     * In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.
     * <p>
     * Do you want to find out more? See <a href="http://code.google.com/p/mockito/issues/detail?id=235">issue 235</a>
     *
     * @return verification mode
     

----------------------


     Method public VerificationMode never()    (VerificationWithTimeout.java)

     
          * @deprecated
          * Validation with timeout combined with never simply does not make sense, as never() will typically immediately pass,
          * and therefore not wait the timeout. The behaviour you may be looking for is actually provided by after().never(). 
          * <p>
          * To avoid compilation errors upon upgrade the method is deprecated and it throws a "friendly reminder" exception.
          * <p>
          * In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.
          * <p>
          * Do you want to find out more? See <a href="http://code.google.com/p/mockito/issues/detail?id=235">issue 235</a>
          * 
          * @return verification mode
          

     ----------------------




Interface DeprecatedOngoingStubbing  (DeprecatedOngoingStubbing.java)
     Interface VoidMethodStubbable  (VoidMethodStubbable.java)

Interface DeprecatedOngoingStubbing    (DeprecatedOngoingStubbing.java)


 * Stubs a method call with return value or an exception. E.g:
 *
 * <pre class="code"><code class="java">
 * stub(mock.someMethod()).toReturn(10);
 *
 * //you can use flexible argument matchers, e.g:
 * stub(mock.someMethod(<b>anyString()</b>)).toReturn(10);
 *
 * //setting exception to be thrown:
 * stub(mock.someMethod("some arg")).toThrow(new RuntimeException());
 *
 * //you can stub with different behavior for consecutive method calls.
 * //Last stubbing (e.g: toReturn("foo")) determines the behavior for further consecutive calls.
 * stub(mock.someMethod("some arg"))
 *  .toThrow(new RuntimeException())
 *  .toReturn("foo");
 *
 * </code></pre>
 *
 * See examples in javadoc for {@link Mockito#stub}
 

----------------------


     Interface VoidMethodStubbable    (VoidMethodStubbable.java)

     
      * Stubs void method with an exception. E.g:
      *
      * <pre class="code"><code class="java">
      * stubVoid(mock).toThrow(new RuntimeException()).on().someMethod();
      *
      * //you can stub with different behavior for consecutive method calls.
      * //Last stubbing (e.g: toReturn()) determines the behavior for further consecutive calls.
      * stubVoid(mock)
      *  .toThrow(new RuntimeException())
      *  .toReturn()
      *  .on().someMethod();
      * </code></pre>
      *
      * See examples in javadoc for {@link Mockito#stubVoid}
      

     ----------------------




Method OngoingStubbing<T> thenThrow(Class<? extends Throwable> throwableType)  (OngoingStubbing.java)
     Method DeprecatedOngoingStubbing<T> toThrow(Throwable throwable)  (DeprecatedOngoingStubbing.java)

Method OngoingStubbing<T> thenThrow(Class<? extends Throwable> throwableType)    (OngoingStubbing.java)


     * Sets a Throwable type to be thrown when the method is called. E.g:
     * <pre class="code"><code class="java">
     * when(mock.someMethod()).thenThrow(RuntimeException.class);
     * </code></pre>
     *
     * <p>
     * If the throwable class is a checked exception then it has to
     * match one of the checked exceptions of the stubbed method signature.
     * <p>
     * If throwable is null then exception will be thrown.
     * <p>
     * See examples in javadoc for {@link Mockito#when}
     *
     * @param throwableType to be thrown on method invocation
     *
     * @return iOngoingStubbing object that allows stubbing consecutive calls
     * @since 2.0.0
     

----------------------


     Method DeprecatedOngoingStubbing<T> toThrow(Throwable throwable)    (DeprecatedOngoingStubbing.java)

     
          * Set a Throwable to be thrown when the stubbed method is called. E.g:
          * <pre class="code"><code class="java">
          * stub(mock.someMethod()).toThrow(new RuntimeException());
          * </code></pre>
          *
          * If throwable is a checked exception then it has to
          * match one of the checked exceptions of method signature.
          *
          * See examples in javadoc for {@link Mockito#stub}
          *
          * @param throwable to be thrown on method invocation
          *
          * @return iOngoingStubbing object that allows stubbing consecutive calls
          

     ----------------------




Method public static Answer<T> returnsSecondArg()  (AdditionalAnswers.java)
     Method public static Answer<T> returnsFirstArg()  (AdditionalAnswers.java)

Method public static Answer<T> returnsSecondArg()    (AdditionalAnswers.java)


     * Returns the second parameter of an invocation.
     *
     * <p>
     *     This additional answer could be used at stub time using the
     *     <code>then|do|will{@link org.mockito.stubbing.Answer}</code> methods. For example :
     * </p>
     *
     * <pre class="code"><code class="java">given(trader.apply(leesFormula, onCreditDefaultSwap)).will(returnsSecondArg());
     * doAnswer(returnsSecondArg()).when(trader).apply(leesFormula, onCreditDefaultSwap)</code></pre>
     *
     * @param <T> Return type of the invocation.
     * @return Answer that will return the second argument of the invocation.
     *
     * @since 1.9.5
     

----------------------


     Method public static Answer<T> returnsFirstArg()    (AdditionalAnswers.java)

     
          * Returns the first parameter of an invocation.
          *
          * <p>
          *     This additional answer could be used at stub time using the
          *     <code>then|do|will{@link org.mockito.stubbing.Answer}</code> methods. For example :
          * </p>
          *
          * <pre class="code"><code class="java">given(carKeyFob.authenticate(carKey)).will(returnsFirstArg());
          * doAnswer(returnsFirstArg()).when(carKeyFob).authenticate(carKey)</code></pre>
          *
          * @param <T> Return type of the invocation.
          * @return Answer that will return the first argument of the invocation.
          *
          * @since 1.9.5
          

     ----------------------




Method public static Answer<T> returnsLastArg()  (AdditionalAnswers.java)
     Method public static Answer<T> returnsFirstArg()  (AdditionalAnswers.java)

Method public static Answer<T> returnsLastArg()    (AdditionalAnswers.java)


     * Returns the last parameter of an invocation.
     *
     * <p>
     *     This additional answer could be used at stub time using the
     *     <code>then|do|will{@link org.mockito.stubbing.Answer}</code> methods. For example :
     * </p>
     *
     * <pre class="code"><code class="java">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsLastArg());
     * doAnswer(returnsLastArg()).when(person).remember(dream1, dream2, dream3, dream4)</code></pre>
     *
     * @param <T> Return type of the invocation.
     * @return Answer that will return the last argument of the invocation.
     *
     * @since 1.9.5
     

----------------------


     Method public static Answer<T> returnsFirstArg()    (AdditionalAnswers.java)

     
          * Returns the first parameter of an invocation.
          *
          * <p>
          *     This additional answer could be used at stub time using the
          *     <code>then|do|will{@link org.mockito.stubbing.Answer}</code> methods. For example :
          * </p>
          *
          * <pre class="code"><code class="java">given(carKeyFob.authenticate(carKey)).will(returnsFirstArg());
          * doAnswer(returnsFirstArg()).when(carKeyFob).authenticate(carKey)</code></pre>
          *
          * @param <T> Return type of the invocation.
          * @return Answer that will return the first argument of the invocation.
          *
          * @since 1.9.5
          

     ----------------------




Method public static Set<T> anySetOf(Class<T> clazz)  (Matchers.java)
     Method public static T any(Class<T> clazz)  (Matchers.java)

Method public static Set<T> anySetOf(Class<T> clazz)    (Matchers.java)


     * Generic friendly alias to {@link Matchers#anySet()}.
     * It's an alternative to &#064;SuppressWarnings("unchecked") to keep code clean of compiler warnings.
     * <p>
     * Any non-null <code>Set</code>.
     * <p>
     * This method doesn't do type checks with the given parameter, it is only there
     * to avoid casting in your code. This might however change (type checks could
     * be added) in a future major release.
     * <p>
     * See examples in javadoc for {@link Matchers} class
     *
     * @param clazz Type owned by the Set to avoid casting
     * @return empty Set
     

----------------------


     Method public static T any(Class<T> clazz)    (Matchers.java)

     
          * Matches any object, including nulls
          * <p>
          * This method doesn't do type checks with the given parameter, it is only there
          * to avoid casting in your code. This might however change (type checks could
          * be added) in a future major release.
          * <p>
          * See examples in javadoc for {@link Matchers} class
          * <p>
          * This is an alias of: {@link #any()} and {@link #anyObject()}
          * <p>
          * @return <code>null</code>.
          

     ----------------------




Class ReturnsElementsOf  (ReturnsElementsOf.java)
     Class ReturnsElementsOf  (ReturnsElementsOf.java)

Class ReturnsElementsOf    (ReturnsElementsOf.java)


 * Returns elements of the collection. Keeps returning the last element forever.
 * Might be useful on occasion when you have a collection of elements to return.
 * <p>
 * <pre class="code"><code class="java">
 *   //this:
 *   when(mock.foo()).thenReturn(1, 2, 3);
 *   //is equivalent to:
 *   when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));
 * </code></pre>
 * </p>
 *
 * <p>
 * Also you might better want to use the static factory there
 * {@link org.mockito.AdditionalAnswers#returnsElementsOf(java.util.Collection)}
 * </p>
 *
 * @see org.mockito.AdditionalAnswers
 

----------------------


     Class ReturnsElementsOf    (ReturnsElementsOf.java)

     
      * Returns elements of the collection. Keeps returning the last element forever.
      * Might be useful on occasion when you have a collection of elements to return.
      * <p>
      * <pre class="code"><code class="java">
      *   //this:
      *   when(mock.foo()).thenReturn(1, 2, 3);
      *   //is equivalent to:
      *   when(mock.foo()).thenReturn(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));
      * </code></pre>
      *
      * @deprecated Use {@link org.mockito.AdditionalAnswers#returnsElementsOf}
      

     ----------------------




Method T verify(T mock)  (InOrder.java)
     Interface InOrder  (InOrder.java)

Method T verify(T mock)    (InOrder.java)


     * Verifies interaction <b>happened once</b> in order.
     * <p>
     * Alias to <code>inOrder.verify(mock, times(1))</code>
     * <p>
     * Example:
     * <pre class="code"><code class="java">
     * InOrder inOrder = inOrder(firstMock, secondMock);
     * 
     * inOrder.verify(firstMock).someMethod("was called first");
     * inOrder.verify(secondMock).someMethod("was called second");
     * </code></pre>
     * 
     * See examples in javadoc for {@link Mockito} class
     * 
     * @param mock to be verified
     * 
     * @return mock object itself
     

----------------------


     Interface InOrder    (InOrder.java)

     
      * Allows verification in order. E.g:
      * 
      * <pre class="code"><code class="java">
      * InOrder inOrder = inOrder(firstMock, secondMock);
      * 
      * inOrder.verify(firstMock).add("was called first");
      * inOrder.verify(secondMock).add("was called second");
      * </code></pre>
      * 
      * As of Mockito 1.8.4 you can verifyNoMoreInvocations() in order-sensitive way. Read more: {@link InOrder#verifyNoMoreInteractions()}
      * <p>
      * 
      * See examples in javadoc for {@link Mockito} class
      

     ----------------------




Method public static Answer<T> returnsElementsOf(Collection<?> elements)  (AdditionalAnswers.java)
     Class ReturnsElementsOf  (ReturnsElementsOf.java)

Method public static Answer<T> returnsElementsOf(Collection<?> elements)    (AdditionalAnswers.java)


     * Returns elements of the collection. Keeps returning the last element forever.
     * Might be useful on occasion when you have a collection of elements to return.
     * <p>
     * <pre class="code"><code class="java">
     *   //this:
     *   when(mock.foo()).thenReturn(1, 2, 3);
     *
     *   //is equivalent to:
     *   when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));
     * </code></pre>
     *
     * @param elements The collection of elements to return.
     * @return the answer
     *
     * @since 1.9.5
     

----------------------


     Class ReturnsElementsOf    (ReturnsElementsOf.java)

     
      * Returns elements of the collection. Keeps returning the last element forever.
      * Might be useful on occasion when you have a collection of elements to return.
      * <p>
      * <pre class="code"><code class="java">
      *   //this:
      *   when(mock.foo()).thenReturn(1, 2, 3);
      *   //is equivalent to:
      *   when(mock.foo()).thenReturn(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));
      * </code></pre>
      *
      * @deprecated Use {@link org.mockito.AdditionalAnswers#returnsElementsOf}
      

     ----------------------




Method VoidMethodStubbable<T> toThrow(Throwable throwable)  (VoidMethodStubbable.java)
     Method DeprecatedOngoingStubbing<T> toThrow(Throwable throwable)  (DeprecatedOngoingStubbing.java)

Method VoidMethodStubbable<T> toThrow(Throwable throwable)    (VoidMethodStubbable.java)


     * Stubs void method with an exception. E.g:
     *
     * <pre class="code"><code class="java">
     * stubVoid(mock).toThrow(new RuntimeException()).on().someMethod();
     * </code></pre>
     *
     * If throwable is a checked exception then it has to
     * match one of the checked exceptions of method signature.
     *
     * See examples in javadoc for {@link Mockito#stubVoid}
     *
     * @param throwable to be thrown on method invocation
     *
     * @return VoidMethodStubbable - typically to choose void method and finish stubbing
     

----------------------


     Method DeprecatedOngoingStubbing<T> toThrow(Throwable throwable)    (DeprecatedOngoingStubbing.java)

     
          * Set a Throwable to be thrown when the stubbed method is called. E.g:
          * <pre class="code"><code class="java">
          * stub(mock.someMethod()).toThrow(new RuntimeException());
          * </code></pre>
          *
          * If throwable is a checked exception then it has to
          * match one of the checked exceptions of method signature.
          *
          * See examples in javadoc for {@link Mockito#stub}
          *
          * @param throwable to be thrown on method invocation
          *
          * @return iOngoingStubbing object that allows stubbing consecutive calls
          

     ----------------------




Method public static VerificationMode only()  (Mockito.java)
     Method public static VerificationMode atLeastOnce()  (Mockito.java)

Method public static VerificationMode only()    (Mockito.java)


     * Allows checking if given method was the only one invoked. E.g:
     * <pre class="code"><code class="java">
     *   verify(mock, only()).someMethod();
     *   //above is a shorthand for following 2 lines of code:
     *   verify(mock).someMethod();
     *   verifyNoMoreInvocations(mock);
     * </code></pre>
     *
     * <p>
     * See also {@link Mockito#verifyNoMoreInteractions(Object...)}
     * <p>
     * See examples in javadoc for {@link Mockito} class
     *
     * @return verification mode
     

----------------------


     Method public static VerificationMode atLeastOnce()    (Mockito.java)

     
          * Allows at-least-once verification. E.g:
          * <pre class="code"><code class="java">
          *   verify(mock, atLeastOnce()).someMethod("some arg");
          * </code></pre>
          * Alias to <code>atLeast(1)</code>.
          * <p>
          * See examples in javadoc for {@link Mockito} class
          *
          * @return verification mode
          

     ----------------------




Method DeprecatedOngoingStubbing<T> toAnswer(Answer<?> answer)  (DeprecatedOngoingStubbing.java)
     Method OngoingStubbing<T> thenAnswer(Answer<?> answer)  (OngoingStubbing.java)

Method DeprecatedOngoingStubbing<T> toAnswer(Answer<?> answer)    (DeprecatedOngoingStubbing.java)


     * Set a generic Answer for the stubbed method. E.g:
     * <pre class="code"><code class="java">
     * stub(mock.someMethod(10)).toAnswer(new Answer&lt;Integer&gt;() {
     *     public Integer answer(InvocationOnMock invocation) throws Throwable {
     *         return (Integer) invocation.getArguments()[0];
     *     }
     * }
     * </code></pre>
     *
     * @param answer the custom answer to execute.
     *
     * @return iOngoingStubbing object that allows stubbing consecutive calls
     

----------------------


     Method OngoingStubbing<T> thenAnswer(Answer<?> answer)    (OngoingStubbing.java)

     
          * Sets a generic Answer for the method. E.g:
          * <pre class="code"><code class="java">
          * when(mock.someMethod(10)).thenAnswer(new Answer&lt;Integer&gt;() {
          *     public Integer answer(InvocationOnMock invocation) throws Throwable {
          *         return (Integer) invocation.getArguments()[0];
          *     }
          * }
          * </code></pre>
          *
          * @param answer the custom answer to execute.
          *
          * @return iOngoingStubbing object that allows stubbing consecutive calls
          

     ----------------------




Method public static ArgumentCaptor<U> forClass(Class<S> clazz)  (ArgumentCaptor.java)
     Method public static T any(Class<T> clazz)  (Matchers.java)

Method public static ArgumentCaptor<U> forClass(Class<S> clazz)    (ArgumentCaptor.java)


     * Build a new <code>ArgumentCaptor</code>.
     * <p>
     * Note that an <code>ArgumentCaptor</code> <b>*don't do any type checks*</b>, it is only there to avoid casting
     * in your code. This might however change (type checks could be added) in a
     * future major release.
     *
     * @param clazz Type matching the parameter to be captured.
     * @param <S> Type of clazz
     * @param <U> Type of object captured by the newly built ArgumentCaptor
     * @return A new ArgumentCaptor
     

----------------------


     Method public static T any(Class<T> clazz)    (Matchers.java)

     
          * Matches any object, including nulls
          * <p>
          * This method doesn't do type checks with the given parameter, it is only there
          * to avoid casting in your code. This might however change (type checks could
          * be added) in a future major release.
          * <p>
          * See examples in javadoc for {@link Matchers} class
          * <p>
          * This is an alias of: {@link #any()} and {@link #anyObject()}
          * <p>
          * @return <code>null</code>.
          

     ----------------------




Method public EqualsBuilder append(float lhs, float rhs)  (EqualsBuilder.java)
     Method public EqualsBuilder append(int lhs, int rhs)  (EqualsBuilder.java)

Method public EqualsBuilder append(float lhs, float rhs)    (EqualsBuilder.java)


     * <p>Test if two <code>float</code>s are equal byt testing that the
     * pattern of bits returned by doubleToLong are equal.</p>
     *
     * <p>This handles NaNs, Infinities, and <code>-0.0</code>.</p>
     *
     * <p>It is compatible with the hash code generated by
     * <code>HashCodeBuilder</code>.</p>
     *
     * @param lhs  the left hand <code>float</code>
     * @param rhs  the right hand <code>float</code>
     * @return EqualsBuilder - used to chain calls.
     

----------------------


     Method public EqualsBuilder append(int lhs, int rhs)    (EqualsBuilder.java)

     
          * <p>Test if two <code>int</code>s are equal.</p>
          *
          * @param lhs  the left hand <code>int</code>
          * @param rhs  the right hand <code>int</code>
          * @return EqualsBuilder - used to chain calls.
          

     ----------------------




Class MockitoSerializationIssue  (MockitoSerializationIssue.java)
     Class MockitoException  (MockitoException.java)

Class MockitoSerializationIssue    (MockitoSerializationIssue.java)


 * Raised by mockito to emit an error either due to Mockito, or due to the User.
 *
 * <p>
 *     The stack trace is filtered from mockito calls if you are using {@link #getStackTrace()}.
 *     For debugging purpose though you can still access the full stacktrace using {@link #getUnfilteredStackTrace()}.
 *     However note that other calls related to the stackTrace will refer to the filter stacktrace.
 * </p>
 *
 * @since 1.10.0
 

----------------------


     Class MockitoException    (MockitoException.java)

     
      * Raised by mockito to emit an error either due to Mockito, or due to the User.
      *
      * <p>
      *     The stack trace is filtered from mockito calls if you are using {@link #getStackTrace()}.
      *     For debugging purpose though you can still access the full stacktrace using {@link #getUnfilteredStackTrace()}.
      *     However note that other calls related to the stackTrace will refer to the filter stacktrace.
      * </p>
      *
      

     ----------------------




Method private static void reflectionAppend(Object lhs, Object rhs, Class clazz, EqualsBuilder builder, boolean useTransients, String[] excludeFields)  (EqualsBuilder.java)
     Method public EqualsBuilder append(Object lhs, Object rhs)  (EqualsBuilder.java)

Method private static void reflectionAppend(Object lhs, Object rhs, Class clazz, EqualsBuilder builder, boolean useTransients, String[] excludeFields)    (EqualsBuilder.java)


     * <p>Appends the fields and values defined by the given object of the
     * given Class.</p>
     * 
     * @param lhs  the left hand object
     * @param rhs  the right hand object
     * @param clazz  the class to append details of
     * @param builder  the builder to append to
     * @param useTransients  whether to test transient fields
     * @param excludeFields  array of field names to exclude from testing
     

----------------------


     Method public EqualsBuilder append(Object lhs, Object rhs)    (EqualsBuilder.java)

     
          * <p>Test if two <code>Object</code>s are equal using their
          * <code>equals</code> method.</p>
          *
          * @param lhs  the left hand object
          * @param rhs  the right hand object
          * @return EqualsBuilder - used to chain calls.
          

     ----------------------




Method public static char charThat(Matcher<Character> matcher)  (MockitoHamcrest.java)
     Method public static int intThat(ArgumentMatcher<Integer> matcher)  (Matchers.java)

Method public static char charThat(Matcher<Character> matcher)    (MockitoHamcrest.java)


     * Enables integrating hamcrest matchers that match primitive <code>char</code> arguments.
     * Note that {@link #argThat} will not work with primitive <code>char</code> matchers due to <code>NullPointerException</code> auto-unboxing caveat.
     * <p/>
     * See examples in javadoc for {@link MockitoHamcrest} class
     *
     * @param matcher decides whether argument matches
     * @return <code>0</code>.
     

----------------------


     Method public static int intThat(ArgumentMatcher<Integer> matcher)    (Matchers.java)

     
          * Allows creating custom <code>int</code> argument matchers.
          * Note that {@link #argThat} will not work with primitive <code>int</code> matchers due to <code>NullPointerException</code> auto-unboxing caveat.
          * <p>
          * See examples in javadoc for {@link Matchers} class
          * 
          * @param matcher decides whether argument matches
          * @return <code>0</code>.
          

     ----------------------




Method Stubber doReturn(Object toBeReturned, Object... nextToBeReturned)  (Stubber.java)
     Method Stubber doReturn(Object toBeReturned)  (Stubber.java)

Method Stubber doReturn(Object toBeReturned, Object... nextToBeReturned)    (Stubber.java)


     * Use it for stubbing consecutive calls in {@link Mockito#doReturn(Object)} style.
     * <p>
     * See javadoc for {@link Mockito#doReturn(Object, Object...)}
     *
     * @param toBeReturned to be returned when the stubbed method is called
     * @param nextToBeReturned to be returned in consecutive calls when the stubbed method is called
     * @return stubber - to select a method for stubbing
     

----------------------


     Method Stubber doReturn(Object toBeReturned)    (Stubber.java)

     
          * Use it for stubbing consecutive calls in {@link Mockito#doReturn(Object)} style.
          * <p>
          * See javadoc for {@link Mockito#doReturn(Object)}
          * 
          * @param toBeReturned to be returned when the stubbed method is called
          * @return stubber - to select a method for stubbing
          

     ----------------------




Method public static boolean booleanThat(ArgumentMatcher<Boolean> matcher)  (Matchers.java)
     Method public static int intThat(ArgumentMatcher<Integer> matcher)  (Matchers.java)

Method public static boolean booleanThat(ArgumentMatcher<Boolean> matcher)    (Matchers.java)


     * Allows creating custom <code>boolean</code> argument matchers.
     * Note that {@link #argThat} will not work with primitive <code>boolean</code> matchers due to <code>NullPointerException</code> auto-unboxing caveat.
     * <p>
     * See examples in javadoc for {@link Matchers} class
     * 
     * @param matcher decides whether argument matches
     * @return <code>false</code>.
     

----------------------


     Method public static int intThat(ArgumentMatcher<Integer> matcher)    (Matchers.java)

     
          * Allows creating custom <code>int</code> argument matchers.
          * Note that {@link #argThat} will not work with primitive <code>int</code> matchers due to <code>NullPointerException</code> auto-unboxing caveat.
          * <p>
          * See examples in javadoc for {@link Matchers} class
          * 
          * @param matcher decides whether argument matches
          * @return <code>0</code>.
          

     ----------------------




Method public static double doubleThat(ArgumentMatcher<Double> matcher)  (Matchers.java)
     Method public static int intThat(ArgumentMatcher<Integer> matcher)  (Matchers.java)

Method public static double doubleThat(ArgumentMatcher<Double> matcher)    (Matchers.java)


     * Allows creating custom <code>double</code> argument matchers.
     * Note that {@link #argThat} will not work with primitive <code>double</code> matchers due to <code>NullPointerException</code> auto-unboxing caveat.
     * <p>
     * See examples in javadoc for {@link Matchers} class
     * 
     * @param matcher decides whether argument matches
     * @return <code>0</code>.
     

----------------------


     Method public static int intThat(ArgumentMatcher<Integer> matcher)    (Matchers.java)

     
          * Allows creating custom <code>int</code> argument matchers.
          * Note that {@link #argThat} will not work with primitive <code>int</code> matchers due to <code>NullPointerException</code> auto-unboxing caveat.
          * <p>
          * See examples in javadoc for {@link Matchers} class
          * 
          * @param matcher decides whether argument matches
          * @return <code>0</code>.
          

     ----------------------




Method public static short shortThat(ArgumentMatcher<Short> matcher)  (Matchers.java)
     Method public static int intThat(ArgumentMatcher<Integer> matcher)  (Matchers.java)

Method public static short shortThat(ArgumentMatcher<Short> matcher)    (Matchers.java)


     * Allows creating custom <code>short</code> argument matchers.
     * Note that {@link #argThat} will not work with primitive <code>short</code> matchers due to <code>NullPointerException</code> auto-unboxing caveat.
     * <p>
     * See examples in javadoc for {@link Matchers} class
     * 
     * @param matcher decides whether argument matches
     * @return <code>0</code>.
     

----------------------


     Method public static int intThat(ArgumentMatcher<Integer> matcher)    (Matchers.java)

     
          * Allows creating custom <code>int</code> argument matchers.
          * Note that {@link #argThat} will not work with primitive <code>int</code> matchers due to <code>NullPointerException</code> auto-unboxing caveat.
          * <p>
          * See examples in javadoc for {@link Matchers} class
          * 
          * @param matcher decides whether argument matches
          * @return <code>0</code>.
          

     ----------------------




Method public static float floatThat(ArgumentMatcher<Float> matcher)  (Matchers.java)
     Method public static int intThat(ArgumentMatcher<Integer> matcher)  (Matchers.java)

Method public static float floatThat(ArgumentMatcher<Float> matcher)    (Matchers.java)


     * Allows creating custom <code>float</code> argument matchers.
     * Note that {@link #argThat} will not work with primitive <code>float</code> matchers due to <code>NullPointerException</code> auto-unboxing caveat.
     * <p>
     * See examples in javadoc for {@link Matchers} class
     * 
     * @param matcher decides whether argument matches
     * @return <code>0</code>.
     

----------------------


     Method public static int intThat(ArgumentMatcher<Integer> matcher)    (Matchers.java)

     
          * Allows creating custom <code>int</code> argument matchers.
          * Note that {@link #argThat} will not work with primitive <code>int</code> matchers due to <code>NullPointerException</code> auto-unboxing caveat.
          * <p>
          * See examples in javadoc for {@link Matchers} class
          * 
          * @param matcher decides whether argument matches
          * @return <code>0</code>.
          

     ----------------------




Method public static char charThat(ArgumentMatcher<Character> matcher)  (Matchers.java)
     Method public static int intThat(ArgumentMatcher<Integer> matcher)  (Matchers.java)

Method public static char charThat(ArgumentMatcher<Character> matcher)    (Matchers.java)


     * Allows creating custom <code>char</code> argument matchers.
     * Note that {@link #argThat} will not work with primitive <code>char</code> matchers due to <code>NullPointerException</code> auto-unboxing caveat.
     * <p>
     * See examples in javadoc for {@link Matchers} class
     * 
     * @param matcher decides whether argument matches
     * @return <code>0</code>.
     

----------------------


     Method public static int intThat(ArgumentMatcher<Integer> matcher)    (Matchers.java)

     
          * Allows creating custom <code>int</code> argument matchers.
          * Note that {@link #argThat} will not work with primitive <code>int</code> matchers due to <code>NullPointerException</code> auto-unboxing caveat.
          * <p>
          * See examples in javadoc for {@link Matchers} class
          * 
          * @param matcher decides whether argument matches
          * @return <code>0</code>.
          

     ----------------------




Method public static byte byteThat(ArgumentMatcher<Byte> matcher)  (Matchers.java)
     Method public static int intThat(ArgumentMatcher<Integer> matcher)  (Matchers.java)

Method public static byte byteThat(ArgumentMatcher<Byte> matcher)    (Matchers.java)


     * Allows creating custom <code>byte</code> argument matchers.
     * Note that {@link #argThat} will not work with primitive <code>byte</code> matchers due to <code>NullPointerException</code> auto-unboxing caveat.
     * <p>
     * See examples in javadoc for {@link Matchers} class
     * 
     * @param matcher decides whether argument matches
     * @return <code>0</code>.
     

----------------------


     Method public static int intThat(ArgumentMatcher<Integer> matcher)    (Matchers.java)

     
          * Allows creating custom <code>int</code> argument matchers.
          * Note that {@link #argThat} will not work with primitive <code>int</code> matchers due to <code>NullPointerException</code> auto-unboxing caveat.
          * <p>
          * See examples in javadoc for {@link Matchers} class
          * 
          * @param matcher decides whether argument matches
          * @return <code>0</code>.
          

     ----------------------




Method public static long longThat(ArgumentMatcher<Long> matcher)  (Matchers.java)
     Method public static int intThat(ArgumentMatcher<Integer> matcher)  (Matchers.java)

Method public static long longThat(ArgumentMatcher<Long> matcher)    (Matchers.java)


     * Allows creating custom <code>long</code> argument matchers.
     * Note that {@link #argThat} will not work with primitive <code>long</code> matchers due to <code>NullPointerException</code> auto-unboxing caveat.
     * <p>
     * See examples in javadoc for {@link Matchers} class
     * 
     * @param matcher decides whether argument matches
     * @return <code>0</code>.
     

----------------------


     Method public static int intThat(ArgumentMatcher<Integer> matcher)    (Matchers.java)

     
          * Allows creating custom <code>int</code> argument matchers.
          * Note that {@link #argThat} will not work with primitive <code>int</code> matchers due to <code>NullPointerException</code> auto-unboxing caveat.
          * <p>
          * See examples in javadoc for {@link Matchers} class
          * 
          * @param matcher decides whether argument matches
          * @return <code>0</code>.
          

     ----------------------




Method Stubber doNothing()  (Stubber.java)
     Method Stubber doCallRealMethod()  (Stubber.java)

Method Stubber doNothing()    (Stubber.java)


     * Use it for stubbing consecutive calls in {@link Mockito#doNothing()} style:
     * <pre class="code"><code class="java">
     *   doNothing().
     *   doThrow(new RuntimeException("two"))
     *       .when(mock).someVoidMethod();
     * </code></pre>
     * See javadoc for {@link Mockito#doNothing()}
     * 
     * @return stubber - to select a method for stubbing
     

----------------------


     Method Stubber doCallRealMethod()    (Stubber.java)

     
          * Use it for stubbing consecutive calls in {@link Mockito#doCallRealMethod()} style.
          * <p>
          * See javadoc for {@link Mockito#doCallRealMethod()}
          *
          * @return stubber - to select a method for stubbing
          

     ----------------------




Method OngoingStubbing<T> thenReturn(T value)  (OngoingStubbing.java)
     Method DeprecatedOngoingStubbing<T> toReturn(T value)  (DeprecatedOngoingStubbing.java)

Method OngoingStubbing<T> thenReturn(T value)    (OngoingStubbing.java)


     * Sets a return value to be returned when the method is called. E.g:
     * <pre class="code"><code class="java">
     * when(mock.someMethod()).thenReturn(10);
     * </code></pre>
     *
     * See examples in javadoc for {@link Mockito#when}
     *
     * @param value return value
     *
     * @return iOngoingStubbing object that allows stubbing consecutive calls
     

----------------------


     Method DeprecatedOngoingStubbing<T> toReturn(T value)    (DeprecatedOngoingStubbing.java)

     
          * Set a return value for the stubbed method. E.g:
          * <pre class="code"><code class="java">
          * stub(mock.someMethod()).toReturn(10);
          * </code></pre>
          *
          * See examples in javadoc for {@link Mockito#stub}
          *
          * @param value return value
          *
          * @return iOngoingStubbing object that allows stubbing consecutive calls
          

     ----------------------




Method public EqualsBuilder append(Object[] lhs, Object[] rhs)  (EqualsBuilder.java)
     Method public EqualsBuilder append(int lhs, int rhs)  (EqualsBuilder.java)

Method public EqualsBuilder append(Object[] lhs, Object[] rhs)    (EqualsBuilder.java)


     * <p>Performs a deep comparison of two <code>Object</code> arrays.</p>
     *
     * <p>This also will be called for the top level of
     * multi-dimensional, ragged, and multi-typed arrays.</p>
     *
     * @param lhs  the left hand <code>Object[]</code>
     * @param rhs  the right hand <code>Object[]</code>
     * @return EqualsBuilder - used to chain calls.
     

----------------------


     Method public EqualsBuilder append(int lhs, int rhs)    (EqualsBuilder.java)

     
          * <p>Test if two <code>int</code>s are equal.</p>
          *
          * @param lhs  the left hand <code>int</code>
          * @param rhs  the right hand <code>int</code>
          * @return EqualsBuilder - used to chain calls.
          

     ----------------------




Method public static T not(T first)  (AdditionalMatchers.java)
     Method public static int not(int first)  (AdditionalMatchers.java)

Method public static T not(T first)    (AdditionalMatchers.java)


     * Object argument that does not match the given argument matcher.
     * <p>
     * See examples in javadoc for {@link AdditionalMatchers} class
     * 
     * @param <T>
     *            the type of the object, it is passed through to prevent casts.
     * @param first
     *            placeholder for the argument matcher.
     * @return <code>null</code>.
     

----------------------


     Method public static int not(int first)    (AdditionalMatchers.java)

     
          * int argument that does not match the given argument matcher.
          * <p>
          * See examples in javadoc for {@link AdditionalMatchers} class
          * 
          * @param first
          *            placeholder for the argument matcher.
          * @return <code>0</code>.
          

     ----------------------




Method public VerificationMode atLeastOnce()  (VerificationWithTimeout.java)
     Method public static VerificationMode atLeastOnce()  (Mockito.java)

Method public VerificationMode atLeastOnce()    (VerificationWithTimeout.java)


     * Allows at-least-once verification within given timeout. E.g:
     * <pre class="code"><code class="java">
     *   verify(mock, timeout(100).atLeastOnce()).someMethod("some arg");
     * </code></pre>
     * Alias to atLeast(1)
     * <p>
     * See examples in javadoc for {@link Mockito} class
     * 
     * @return verification mode
     

----------------------


     Method public static VerificationMode atLeastOnce()    (Mockito.java)

     
          * Allows at-least-once verification. E.g:
          * <pre class="code"><code class="java">
          *   verify(mock, atLeastOnce()).someMethod("some arg");
          * </code></pre>
          * Alias to <code>atLeast(1)</code>.
          * <p>
          * See examples in javadoc for {@link Mockito} class
          *
          * @return verification mode
          

     ----------------------




Method public static T isNotNull(Class<T> clazz)  (Matchers.java)
     Method public static T isNull(Class<T> clazz)  (Matchers.java)

Method public static T isNotNull(Class<T> clazz)    (Matchers.java)


     * Not <code>null</code> argument, not necessary of the given class.
     * The class argument is provided to avoid casting.
     * <p>
     * alias to {@link Matchers#notNull(Class)}
     * <p>
     * See examples in javadoc for {@link Matchers} class
     *
     * @param clazz Type to avoid casting
     * @return <code>null</code>.
     

----------------------


     Method public static T isNull(Class<T> clazz)    (Matchers.java)

     
          * <code>null</code> argument.
          * The class argument is provided to avoid casting.
          * <p>
          * See examples in javadoc for {@link Matchers} class
          *
          * @param clazz Type to avoid casting
          * @return <code>null</code>.
          

     ----------------------




Method public static VerificationMode atMost(int maxNumberOfInvocations)  (Mockito.java)
     Method public static VerificationMode atLeastOnce()  (Mockito.java)

Method public static VerificationMode atMost(int maxNumberOfInvocations)    (Mockito.java)


     * Allows at-most-x verification. E.g:
     * <pre class="code"><code class="java">
     *   verify(mock, atMost(3)).someMethod("some arg");
     * </code></pre>
     *
     * See examples in javadoc for {@link Mockito} class
     *
     * @param maxNumberOfInvocations max number of invocations
     *
     * @return verification mode
     

----------------------


     Method public static VerificationMode atLeastOnce()    (Mockito.java)

     
          * Allows at-least-once verification. E.g:
          * <pre class="code"><code class="java">
          *   verify(mock, atLeastOnce()).someMethod("some arg");
          * </code></pre>
          * Alias to <code>atLeast(1)</code>.
          * <p>
          * See examples in javadoc for {@link Mockito} class
          *
          * @return verification mode
          

     ----------------------




Method T verify(T mock, VerificationMode mode)  (VerificationCollector.java)
     Method T verify(T mock)  (VerificationCollector.java)

Method T verify(T mock, VerificationMode mode)    (VerificationCollector.java)


     * Lazily verify certain behaviour happened at least once / exact number of times / never.
     *
     * @see org.mockito.Mockito#verify(Object, VerificationMode)
     *
     * @param mock to be verified
     * @param mode times(x), atLeastOnce() or never()
     * @param <T> The type of the mock
     * @return mock object itself
     

----------------------


     Method T verify(T mock)    (VerificationCollector.java)

     
          * Lazily verify certain behaviour happened once.
          *
          * @see org.mockito.Mockito#verify(Object)
          *
          * @param <T> The type of the mock
          * @param mock to be verified
          * @return mock object itself
          

     ----------------------




Method public EqualsBuilder append(int[] lhs, int[] rhs)  (EqualsBuilder.java)
     Method public EqualsBuilder append(int lhs, int rhs)  (EqualsBuilder.java)

Method public EqualsBuilder append(int[] lhs, int[] rhs)    (EqualsBuilder.java)


     * <p>Deep comparison of array of <code>int</code>. Length and all
     * values are compared.</p>
     *
     * <p>The method {@link #append(int, int)} is used.</p>
     *
     * @param lhs  the left hand <code>int[]</code>
     * @param rhs  the right hand <code>int[]</code>
     * @return EqualsBuilder - used to chain calls.
     

----------------------


     Method public EqualsBuilder append(int lhs, int rhs)    (EqualsBuilder.java)

     
          * <p>Test if two <code>int</code>s are equal.</p>
          *
          * @param lhs  the left hand <code>int</code>
          * @param rhs  the right hand <code>int</code>
          * @return EqualsBuilder - used to chain calls.
          

     ----------------------




Method public FieldInitializer(Object fieldOwner, Field field, ConstructorArgumentResolver argResolver)  (FieldInitializer.java)
     Method public FieldInitializer(Object fieldOwner, Field field)  (FieldInitializer.java)

Method public FieldInitializer(Object fieldOwner, Field field, ConstructorArgumentResolver argResolver)    (FieldInitializer.java)


     * Prepare initializer with the given field on the given instance.
     *
     * <p>
     * This constructor fail fast if the field type cannot be handled.
     * </p>
     *
     * @param fieldOwner Instance of the test.
     * @param field Field to be initialize.
     * @param argResolver Constructor parameters resolver
     

----------------------


     Method public FieldInitializer(Object fieldOwner, Field field)    (FieldInitializer.java)

     
          * Prepare initializer with the given field on the given instance.
          *
          * <p>
          * This constructor fail fast if the field type cannot be handled.
          * </p>
          *
          * @param fieldOwner Instance of the test.
          * @param field Field to be initialize.
          

     ----------------------




Class Discrepancy  (Discrepancy.java)
     Class JUnitTool  (JUnitTool.java)

Class Discrepancy    (Discrepancy.java)


 * @Deprecated. This class has been moved to internal packages because it was never meant to be public.
 * If you need it for extending Mockito please let us know. You can still use {@link org.mockito.internal.reporting.Discrepancy}.
 * However, the package clearly states that the class in a part of a public API so it can change.
 

----------------------


     Class JUnitTool    (JUnitTool.java)

     
      * @Deprecated. This class has been moved to internal packages because it was never meant to be public.
      * If you need it for extending Mockito please let us know. You can still use {@link org.mockito.internal.junit.JUnitTool}.
      * However, the package clearly states that the class in a part of a public API so it can change.
      

     ----------------------




Class Pluralizer  (Pluralizer.java)
     Class JUnitTool  (JUnitTool.java)

Class Pluralizer    (Pluralizer.java)


 * @Deprecated. This class has been moved to internal packages because it was never meant to be public.
 * If you need it for extending Mockito please let us know. You can still use {@link org.mockito.internal.reporting.Pluralizer}.
 * However, the package clearly states that the class in a part of a public API so it can change.
 

----------------------


     Class JUnitTool    (JUnitTool.java)

     
      * @Deprecated. This class has been moved to internal packages because it was never meant to be public.
      * If you need it for extending Mockito please let us know. You can still use {@link org.mockito.internal.junit.JUnitTool}.
      * However, the package clearly states that the class in a part of a public API so it can change.
      

     ----------------------




Method public static T same(T value)  (Matchers.java)
     Method public static int lt(int value)  (AdditionalMatchers.java)

Method public static T same(T value)    (Matchers.java)


     * Object argument that is the same as the given value.
     * <p>
     * See examples in javadoc for {@link Matchers} class
     * 
     * @param <T>
     *            the type of the object, it is passed through to prevent casts.
     * @param value
     *            the given value.
     * @return <code>null</code>.
     

----------------------


     Method public static int lt(int value)    (AdditionalMatchers.java)

     
          * int argument less than the given value.
          * <p>
          * See examples in javadoc for {@link AdditionalMatchers} class
          * 
          * @param value
          *            the given value.
          * @return <code>0</code>.
          

     ----------------------




Method public static boolean[] aryEq(boolean[] value)  (AdditionalMatchers.java)
     Method public static int[] aryEq(int[] value)  (AdditionalMatchers.java)

Method public static boolean[] aryEq(boolean[] value)    (AdditionalMatchers.java)


     * boolean array argument that is equal to the given array, i.e. it has to
     * have the same length, and each element has to be equal.
     * <p>
     * See examples in javadoc for {@link AdditionalMatchers} class
     * 
     * @param value
     *            the given array.
     * @return <code>null</code>.
     

----------------------


     Method public static int[] aryEq(int[] value)    (AdditionalMatchers.java)

     
          * int array argument that is equal to the given array, i.e. it has to have
          * the same length, and each element has to be equal.
          * <p>
          * See examples in javadoc for {@link AdditionalMatchers} class
          * 
          * @param value
          *            the given array.
          * @return <code>null</code>.
          

     ----------------------




Method public static double[] aryEq(double[] value)  (AdditionalMatchers.java)
     Method public static int[] aryEq(int[] value)  (AdditionalMatchers.java)

Method public static double[] aryEq(double[] value)    (AdditionalMatchers.java)


     * double array argument that is equal to the given array, i.e. it has to
     * have the same length, and each element has to be equal.
     * <p>
     * See examples in javadoc for {@link AdditionalMatchers} class
     * 
     * @param value
     *            the given array.
     * @return <code>null</code>.
     

----------------------


     Method public static int[] aryEq(int[] value)    (AdditionalMatchers.java)

     
          * int array argument that is equal to the given array, i.e. it has to have
          * the same length, and each element has to be equal.
          * <p>
          * See examples in javadoc for {@link AdditionalMatchers} class
          * 
          * @param value
          *            the given array.
          * @return <code>null</code>.
          

     ----------------------




Method public static short[] aryEq(short[] value)  (AdditionalMatchers.java)
     Method public static int[] aryEq(int[] value)  (AdditionalMatchers.java)

Method public static short[] aryEq(short[] value)    (AdditionalMatchers.java)


     * short array argument that is equal to the given array, i.e. it has to
     * have the same length, and each element has to be equal.
     * <p>
     * See examples in javadoc for {@link AdditionalMatchers} class
     * 
     * @param value
     *            the given array.
     * @return <code>null</code>.
     

----------------------


     Method public static int[] aryEq(int[] value)    (AdditionalMatchers.java)

     
          * int array argument that is equal to the given array, i.e. it has to have
          * the same length, and each element has to be equal.
          * <p>
          * See examples in javadoc for {@link AdditionalMatchers} class
          * 
          * @param value
          *            the given array.
          * @return <code>null</code>.
          

     ----------------------




Method public static float[] aryEq(float[] value)  (AdditionalMatchers.java)
     Method public static int[] aryEq(int[] value)  (AdditionalMatchers.java)

Method public static float[] aryEq(float[] value)    (AdditionalMatchers.java)


     * float array argument that is equal to the given array, i.e. it has to
     * have the same length, and each element has to be equal.
     * <p>
     * See examples in javadoc for {@link AdditionalMatchers} class
     * 
     * @param value
     *            the given array.
     * @return <code>null</code>.
     

----------------------


     Method public static int[] aryEq(int[] value)    (AdditionalMatchers.java)

     
          * int array argument that is equal to the given array, i.e. it has to have
          * the same length, and each element has to be equal.
          * <p>
          * See examples in javadoc for {@link AdditionalMatchers} class
          * 
          * @param value
          *            the given array.
          * @return <code>null</code>.
          

     ----------------------




Method public static long[] aryEq(long[] value)  (AdditionalMatchers.java)
     Method public static int[] aryEq(int[] value)  (AdditionalMatchers.java)

Method public static long[] aryEq(long[] value)    (AdditionalMatchers.java)


     * long array argument that is equal to the given array, i.e. it has to have
     * the same length, and each element has to be equal.
     * <p>
     * See examples in javadoc for {@link AdditionalMatchers} class
     * 
     * @param value
     *            the given array.
     * @return <code>null</code>.
     

----------------------


     Method public static int[] aryEq(int[] value)    (AdditionalMatchers.java)

     
          * int array argument that is equal to the given array, i.e. it has to have
          * the same length, and each element has to be equal.
          * <p>
          * See examples in javadoc for {@link AdditionalMatchers} class
          * 
          * @param value
          *            the given array.
          * @return <code>null</code>.
          

     ----------------------




Method public static char[] aryEq(char[] value)  (AdditionalMatchers.java)
     Method public static int[] aryEq(int[] value)  (AdditionalMatchers.java)

Method public static char[] aryEq(char[] value)    (AdditionalMatchers.java)


     * char array argument that is equal to the given array, i.e. it has to have
     * the same length, and each element has to be equal.
     * <p>
     * See examples in javadoc for {@link AdditionalMatchers} class
     * 
     * @param value
     *            the given array.
     * @return <code>null</code>.
     

----------------------


     Method public static int[] aryEq(int[] value)    (AdditionalMatchers.java)

     
          * int array argument that is equal to the given array, i.e. it has to have
          * the same length, and each element has to be equal.
          * <p>
          * See examples in javadoc for {@link AdditionalMatchers} class
          * 
          * @param value
          *            the given array.
          * @return <code>null</code>.
          

     ----------------------




Method public static byte[] aryEq(byte[] value)  (AdditionalMatchers.java)
     Method public static int[] aryEq(int[] value)  (AdditionalMatchers.java)

Method public static byte[] aryEq(byte[] value)    (AdditionalMatchers.java)


     * byte array argument that is equal to the given array, i.e. it has to have
     * the same length, and each element has to be equal.
     * <p>
     * See examples in javadoc for {@link AdditionalMatchers} class
     * 
     * @param value
     *            the given array.
     * @return <code>null</code>.
     

----------------------


     Method public static int[] aryEq(int[] value)    (AdditionalMatchers.java)

     
          * int array argument that is equal to the given array, i.e. it has to have
          * the same length, and each element has to be equal.
          * <p>
          * See examples in javadoc for {@link AdditionalMatchers} class
          * 
          * @param value
          *            the given array.
          * @return <code>null</code>.
          

     ----------------------




Method MockMaker getMockMaker()  (PluginRegistry.java)
     Method public static MockMaker getMockMaker()  (Plugins.java)

Method MockMaker getMockMaker()    (PluginRegistry.java)


     * Returns the implementation of the mock maker available for the current runtime.
     *
     * <p>Returns {@link org.mockito.internal.creation.cglib.CglibMockMaker} if no
     * {@link org.mockito.plugins.MockMaker} extension exists or is visible in the current classpath.</p>
     

----------------------


     Method public static MockMaker getMockMaker()    (Plugins.java)

     
          * Returns the implementation of the mock maker available for the current runtime.
          *
          * <p>Returns default mock maker if no
          * {@link org.mockito.plugins.MockMaker} extension exists or is visible in the current classpath.</p>
          

     ----------------------




Method public EqualsBuilder append(long lhs, long rhs)  (EqualsBuilder.java)
     Method public EqualsBuilder append(int lhs, int rhs)  (EqualsBuilder.java)

Method public EqualsBuilder append(long lhs, long rhs)    (EqualsBuilder.java)


     * <p>
     * Test if two <code>long</code> s are equal.
     * </p>
     * 
     * @param lhs
     *                  the left hand <code>long</code>
     * @param rhs
     *                  the right hand <code>long</code>
     * @return EqualsBuilder - used to chain calls.
     

----------------------


     Method public EqualsBuilder append(int lhs, int rhs)    (EqualsBuilder.java)

     
          * <p>Test if two <code>int</code>s are equal.</p>
          *
          * @param lhs  the left hand <code>int</code>
          * @param rhs  the right hand <code>int</code>
          * @return EqualsBuilder - used to chain calls.
          

     ----------------------




Method public static boolean not(boolean first)  (AdditionalMatchers.java)
     Method public static int not(int first)  (AdditionalMatchers.java)

Method public static boolean not(boolean first)    (AdditionalMatchers.java)


     * boolean argument that does not match the given argument matcher.
     * <p>
     * See examples in javadoc for {@link AdditionalMatchers} class
     * 
     * @param first
     *            placeholder for the argument matcher.
     * @return <code>false</code>.
     

----------------------


     Method public static int not(int first)    (AdditionalMatchers.java)

     
          * int argument that does not match the given argument matcher.
          * <p>
          * See examples in javadoc for {@link AdditionalMatchers} class
          * 
          * @param first
          *            placeholder for the argument matcher.
          * @return <code>0</code>.
          

     ----------------------




Method public static double not(double first)  (AdditionalMatchers.java)
     Method public static int not(int first)  (AdditionalMatchers.java)

Method public static double not(double first)    (AdditionalMatchers.java)


     * double argument that does not match the given argument matcher.
     * <p>
     * See examples in javadoc for {@link AdditionalMatchers} class
     * 
     * @param first
     *            placeholder for the argument matcher.
     * @return <code>0</code>.
     

----------------------


     Method public static int not(int first)    (AdditionalMatchers.java)

     
          * int argument that does not match the given argument matcher.
          * <p>
          * See examples in javadoc for {@link AdditionalMatchers} class
          * 
          * @param first
          *            placeholder for the argument matcher.
          * @return <code>0</code>.
          

     ----------------------




Method public static short not(short first)  (AdditionalMatchers.java)
     Method public static int not(int first)  (AdditionalMatchers.java)

Method public static short not(short first)    (AdditionalMatchers.java)


     * short argument that does not match the given argument matcher.
     * <p>
     * See examples in javadoc for {@link AdditionalMatchers} class
     * 
     * @param first
     *            placeholder for the argument matcher.
     * @return <code>0</code>.
     

----------------------


     Method public static int not(int first)    (AdditionalMatchers.java)

     
          * int argument that does not match the given argument matcher.
          * <p>
          * See examples in javadoc for {@link AdditionalMatchers} class
          * 
          * @param first
          *            placeholder for the argument matcher.
          * @return <code>0</code>.
          

     ----------------------




Method public static float not(float first)  (AdditionalMatchers.java)
     Method public static int not(int first)  (AdditionalMatchers.java)

Method public static float not(float first)    (AdditionalMatchers.java)


     * float argument that does not match the given argument matcher.
     * <p>
     * See examples in javadoc for {@link AdditionalMatchers} class
     * 
     * @param first
     *            placeholder for the argument matcher.
     * @return <code>0</code>.
     

----------------------


     Method public static int not(int first)    (AdditionalMatchers.java)

     
          * int argument that does not match the given argument matcher.
          * <p>
          * See examples in javadoc for {@link AdditionalMatchers} class
          * 
          * @param first
          *            placeholder for the argument matcher.
          * @return <code>0</code>.
          

     ----------------------




Method public static long not(long first)  (AdditionalMatchers.java)
     Method public static int not(int first)  (AdditionalMatchers.java)

Method public static long not(long first)    (AdditionalMatchers.java)


     * long argument that does not match the given argument matcher.
     * <p>
     * See examples in javadoc for {@link AdditionalMatchers} class
     * 
     * @param first
     *            placeholder for the argument matcher.
     * @return <code>0</code>.
     

----------------------


     Method public static int not(int first)    (AdditionalMatchers.java)

     
          * int argument that does not match the given argument matcher.
          * <p>
          * See examples in javadoc for {@link AdditionalMatchers} class
          * 
          * @param first
          *            placeholder for the argument matcher.
          * @return <code>0</code>.
          

     ----------------------




Method public static char not(char first)  (AdditionalMatchers.java)
     Method public static int not(int first)  (AdditionalMatchers.java)

Method public static char not(char first)    (AdditionalMatchers.java)


     * char argument that does not match the given argument matcher.
     * <p>
     * See examples in javadoc for {@link AdditionalMatchers} class
     * 
     * @param first
     *            placeholder for the argument matcher.
     * @return <code>0</code>.
     

----------------------


     Method public static int not(int first)    (AdditionalMatchers.java)

     
          * int argument that does not match the given argument matcher.
          * <p>
          * See examples in javadoc for {@link AdditionalMatchers} class
          * 
          * @param first
          *            placeholder for the argument matcher.
          * @return <code>0</code>.
          

     ----------------------




Method public static byte not(byte first)  (AdditionalMatchers.java)
     Method public static int not(int first)  (AdditionalMatchers.java)

Method public static byte not(byte first)    (AdditionalMatchers.java)


     * byte argument that does not match the given argument matcher.
     * <p>
     * See examples in javadoc for {@link AdditionalMatchers} class
     * 
     * @param first
     *            placeholder for the argument matcher.
     * @return <code>0</code>.
     

----------------------


     Method public static int not(int first)    (AdditionalMatchers.java)

     
          * int argument that does not match the given argument matcher.
          * <p>
          * See examples in javadoc for {@link AdditionalMatchers} class
          * 
          * @param first
          *            placeholder for the argument matcher.
          * @return <code>0</code>.
          

     ----------------------




Method public NotifiedMethodInvocationReport(Invocation invocation, Object returnedValue)  (NotifiedMethodInvocationReport.java)
     Method public NotifiedMethodInvocationReport(Invocation invocation, Throwable throwable)  (NotifiedMethodInvocationReport.java)

Method public NotifiedMethodInvocationReport(Invocation invocation, Object returnedValue)    (NotifiedMethodInvocationReport.java)


     * Build a new {@link org.mockito.listeners.MethodInvocationReport} with a return value.
     *
     *
     * @param invocation Information on the method call
     * @param returnedValue The value returned by the method invocation
     

----------------------


     Method public NotifiedMethodInvocationReport(Invocation invocation, Throwable throwable)    (NotifiedMethodInvocationReport.java)

     
          * Build a new {@link org.mockito.listeners.MethodInvocationReport} with a return value.
          *
          *
          * @param invocation Information on the method call
          * @param throwable Tha throwable raised by the method invocation
          

     ----------------------




Method public static T lt(Comparable<T> value)  (AdditionalMatchers.java)
     Method public static int lt(int value)  (AdditionalMatchers.java)

Method public static T lt(Comparable<T> value)    (AdditionalMatchers.java)


     * comparable argument less than the given value.
     * <p>
     * See examples in javadoc for {@link AdditionalMatchers} class
     * 
     * @param value
     *            the given value.
     * @return <code>null</code>.
     

----------------------


     Method public static int lt(int value)    (AdditionalMatchers.java)

     
          * int argument less than the given value.
          * <p>
          * See examples in javadoc for {@link AdditionalMatchers} class
          * 
          * @param value
          *            the given value.
          * @return <code>0</code>.
          

     ----------------------




Method public EqualsBuilder append(boolean lhs, boolean rhs)  (EqualsBuilder.java)
     Method public EqualsBuilder append(int lhs, int rhs)  (EqualsBuilder.java)

Method public EqualsBuilder append(boolean lhs, boolean rhs)    (EqualsBuilder.java)


     * <p>Test if two <code>booleans</code>s are equal.</p>
     *
     * @param lhs  the left hand <code>boolean</code>
     * @param rhs  the right hand <code>boolean</code>
     * @return EqualsBuilder - used to chain calls.
      

----------------------


     Method public EqualsBuilder append(int lhs, int rhs)    (EqualsBuilder.java)

     
          * <p>Test if two <code>int</code>s are equal.</p>
          *
          * @param lhs  the left hand <code>int</code>
          * @param rhs  the right hand <code>int</code>
          * @return EqualsBuilder - used to chain calls.
          

     ----------------------




Method Class getRawReturnType()  (Invocation.java)
     Method Object[] getRawArguments()  (Invocation.java)

Method Class getRawReturnType()    (Invocation.java)


     * Returns unprocessed arguments whereas {@link #getArguments()} returns
     * arguments already processed (e.g. varargs expended, etc.).
     *
     * @return unprocessed arguments, exactly as provided to this invocation.
     

----------------------


     Method Object[] getRawArguments()    (Invocation.java)

     
          * Returns unprocessed arguments whereas {@link #getArguments()} returns
          * arguments already processed (e.g. varargs expended, etc.).
          *
          * @return unprocessed arguments, exactly as provided to this invocation.
          

     ----------------------




Method public Timeout(long millis, VerificationMode delegate)  (Timeout.java)
     Class After  (After.java)

Method public Timeout(long millis, VerificationMode delegate)    (Timeout.java)


     * See the javadoc for {@link VerificationWithTimeout}
     * <p>
     * Typically, you won't use this class explicitly. Instead use timeout() method on Mockito class.
     * See javadoc for {@link VerificationWithTimeout}
     

----------------------


     Class After    (After.java)

     
      * See the javadoc for {@link VerificationAfterDelay}
      * <p>
      * Typically, you won't use this class explicitly. Instead use timeout() method on Mockito class.
      * See javadoc for {@link VerificationWithTimeout}
      

     ----------------------




Method public After(long delayMillis, VerificationMode verificationMode)  (After.java)
     Class After  (After.java)

Method public After(long delayMillis, VerificationMode verificationMode)    (After.java)


     * See the javadoc for {@link VerificationAfterDelay}
     * <p>
     * Typically, you won't use this class explicitly. Instead use timeout() method on Mockito class.
     * See javadoc for {@link VerificationWithTimeout}
     

----------------------


     Class After    (After.java)

     
      * See the javadoc for {@link VerificationAfterDelay}
      * <p>
      * Typically, you won't use this class explicitly. Instead use timeout() method on Mockito class.
      * See javadoc for {@link VerificationWithTimeout}
      

     ----------------------




Method public static InstanceFields allDeclaredFieldsOf(Object instance)  (Fields.java)
     Method public static InstanceFields declaredFieldsOf(Object instance)  (Fields.java)

Method public static InstanceFields allDeclaredFieldsOf(Object instance)    (Fields.java)


     * Instance fields declared in the class and superclasses of the given instance.
     *
     * @param instance Instance from which declared fields will be retrieved.
     * @return InstanceFields of this object instance.
     

----------------------


     Method public static InstanceFields declaredFieldsOf(Object instance)    (Fields.java)

     
          * Instance fields declared in the class of the given instance.
          *
          * @param instance Instance from which declared fields will be retrieved.
          * @return InstanceFields of this object instance.
          

     ----------------------




Method public static T eq(T value)  (Matchers.java)
     Method public static int lt(int value)  (AdditionalMatchers.java)

Method public static T eq(T value)    (Matchers.java)


     * Object argument that is equal to the given value.
     * <p>
     * See examples in javadoc for {@link Matchers} class
     * 
     * @param value
     *            the given value.
     * @return <code>null</code>.
     

----------------------


     Method public static int lt(int value)    (AdditionalMatchers.java)

     
          * int argument less than the given value.
          * <p>
          * See examples in javadoc for {@link AdditionalMatchers} class
          * 
          * @param value
          *            the given value.
          * @return <code>0</code>.
          

     ----------------------




Method public static int gt(int value)  (AdditionalMatchers.java)
     Method public static int lt(int value)  (AdditionalMatchers.java)

Method public static int gt(int value)    (AdditionalMatchers.java)


     * int argument greater than the given value.
     * <p>
     * See examples in javadoc for {@link AdditionalMatchers} class
     * 
     * @param value
     *            the given value.
     * @return <code>0</code>.
     

----------------------


     Method public static int lt(int value)    (AdditionalMatchers.java)

     
          * int argument less than the given value.
          * <p>
          * See examples in javadoc for {@link AdditionalMatchers} class
          * 
          * @param value
          *            the given value.
          * @return <code>0</code>.
          

     ----------------------




Method public static double lt(double value)  (AdditionalMatchers.java)
     Method public static int lt(int value)  (AdditionalMatchers.java)

Method public static double lt(double value)    (AdditionalMatchers.java)


     * double argument less than the given value.
     * <p>
     * See examples in javadoc for {@link AdditionalMatchers} class
     * 
     * @param value
     *            the given value.
     * @return <code>0</code>.
     

----------------------


     Method public static int lt(int value)    (AdditionalMatchers.java)

     
          * int argument less than the given value.
          * <p>
          * See examples in javadoc for {@link AdditionalMatchers} class
          * 
          * @param value
          *            the given value.
          * @return <code>0</code>.
          

     ----------------------




Method public static float lt(float value)  (AdditionalMatchers.java)
     Method public static int lt(int value)  (AdditionalMatchers.java)

Method public static float lt(float value)    (AdditionalMatchers.java)


     * float argument less than the given value.
     * <p>
     * See examples in javadoc for {@link AdditionalMatchers} class
     * 
     * @param value
     *            the given value.
     * @return <code>0</code>.
     

----------------------


     Method public static int lt(int value)    (AdditionalMatchers.java)

     
          * int argument less than the given value.
          * <p>
          * See examples in javadoc for {@link AdditionalMatchers} class
          * 
          * @param value
          *            the given value.
          * @return <code>0</code>.
          

     ----------------------




Method public static short lt(short value)  (AdditionalMatchers.java)
     Method public static int lt(int value)  (AdditionalMatchers.java)

Method public static short lt(short value)    (AdditionalMatchers.java)


     * short argument less than the given value.
     * <p>
     * See examples in javadoc for {@link AdditionalMatchers} class
     * 
     * @param value
     *            the given value.
     * @return <code>0</code>.
     

----------------------


     Method public static int lt(int value)    (AdditionalMatchers.java)

     
          * int argument less than the given value.
          * <p>
          * See examples in javadoc for {@link AdditionalMatchers} class
          * 
          * @param value
          *            the given value.
          * @return <code>0</code>.
          

     ----------------------




Method public static OngoingMockInjection onFields(Set<Field> fields, Object ofInstance)  (MockInjection.java)
     Method public static OngoingMockInjection onField(Field field, Object ofInstance)  (MockInjection.java)

Method public static OngoingMockInjection onFields(Set<Field> fields, Object ofInstance)    (MockInjection.java)


     * Create a new configuration setup for fields
     *
     *
     * @param fields Fields needing mock injection
     * @param ofInstance Instance owning the <code>field</code>
     * @return New configuration builder
     

----------------------


     Method public static OngoingMockInjection onField(Field field, Object ofInstance)    (MockInjection.java)

     
          * Create a new configuration setup for a field
          *
          *
          * @param field Field needing mock injection
          * @param ofInstance Instance owning the <code>field</code>
          * @return New configuration builder
          

     ----------------------




Method public static byte lt(byte value)  (AdditionalMatchers.java)
     Method public static int lt(int value)  (AdditionalMatchers.java)

Method public static byte lt(byte value)    (AdditionalMatchers.java)


     * byte argument less than the given value.
     * <p>
     * See examples in javadoc for {@link AdditionalMatchers} class
     * 
     * @param value
     *            the given value.
     * @return <code>0</code>.
     

----------------------


     Method public static int lt(int value)    (AdditionalMatchers.java)

     
          * int argument less than the given value.
          * <p>
          * See examples in javadoc for {@link AdditionalMatchers} class
          * 
          * @param value
          *            the given value.
          * @return <code>0</code>.
          

     ----------------------




Method public static long lt(long value)  (AdditionalMatchers.java)
     Method public static int lt(int value)  (AdditionalMatchers.java)

Method public static long lt(long value)    (AdditionalMatchers.java)


     * long argument less than the given value.
     * <p>
     * See examples in javadoc for {@link AdditionalMatchers} class
     * 
     * @param value
     *            the given value.
     * @return <code>0</code>.
     

----------------------


     Method public static int lt(int value)    (AdditionalMatchers.java)

     
          * int argument less than the given value.
          * <p>
          * See examples in javadoc for {@link AdditionalMatchers} class
          * 
          * @param value
          *            the given value.
          * @return <code>0</code>.
          

     ----------------------




Method public EqualsBuilder append(short lhs, short rhs)  (EqualsBuilder.java)
     Method public EqualsBuilder append(int lhs, int rhs)  (EqualsBuilder.java)

Method public EqualsBuilder append(short lhs, short rhs)    (EqualsBuilder.java)


     * <p>Test if two <code>short</code>s are equal.</p>
     *
     * @param lhs  the left hand <code>short</code>
     * @param rhs  the right hand <code>short</code>
     * @return EqualsBuilder - used to chain calls.
     

----------------------


     Method public EqualsBuilder append(int lhs, int rhs)    (EqualsBuilder.java)

     
          * <p>Test if two <code>int</code>s are equal.</p>
          *
          * @param lhs  the left hand <code>int</code>
          * @param rhs  the right hand <code>int</code>
          * @return EqualsBuilder - used to chain calls.
          

     ----------------------




Method public EqualsBuilder append(char lhs, char rhs)  (EqualsBuilder.java)
     Method public EqualsBuilder append(int lhs, int rhs)  (EqualsBuilder.java)

Method public EqualsBuilder append(char lhs, char rhs)    (EqualsBuilder.java)


     * <p>Test if two <code>char</code>s are equal.</p>
     *
     * @param lhs  the left hand <code>char</code>
     * @param rhs  the right hand <code>char</code>
     * @return EqualsBuilder - used to chain calls.
     

----------------------


     Method public EqualsBuilder append(int lhs, int rhs)    (EqualsBuilder.java)

     
          * <p>Test if two <code>int</code>s are equal.</p>
          *
          * @param lhs  the left hand <code>int</code>
          * @param rhs  the right hand <code>int</code>
          * @return EqualsBuilder - used to chain calls.
          

     ----------------------




Method public EqualsBuilder append(byte lhs, byte rhs)  (EqualsBuilder.java)
     Method public EqualsBuilder append(int lhs, int rhs)  (EqualsBuilder.java)

Method public EqualsBuilder append(byte lhs, byte rhs)    (EqualsBuilder.java)


     * <p>Test if two <code>byte</code>s are equal.</p>
     *
     * @param lhs  the left hand <code>byte</code>
     * @param rhs  the right hand <code>byte</code>
     * @return EqualsBuilder - used to chain calls.
     

----------------------


     Method public EqualsBuilder append(int lhs, int rhs)    (EqualsBuilder.java)

     
          * <p>Test if two <code>int</code>s are equal.</p>
          *
          * @param lhs  the left hand <code>int</code>
          * @param rhs  the right hand <code>int</code>
          * @return EqualsBuilder - used to chain calls.
          

     ----------------------




Method private BoundedType boundsOf(TypeVariable typeParameter)  (GenericMetadataSupport.java)
     Method private BoundedType boundsOf(WildcardType wildCard)  (GenericMetadataSupport.java)

Method private BoundedType boundsOf(TypeVariable typeParameter)    (GenericMetadataSupport.java)


     * @param typeParameter The TypeVariable parameter
     * @return A {@link BoundedType} for easy bound information, if first bound is a TypeVariable
     *         then retrieve BoundedType of this TypeVariable
     

----------------------


     Method private BoundedType boundsOf(WildcardType wildCard)    (GenericMetadataSupport.java)

     
          * @param wildCard The WildCard type
          * @return A {@link BoundedType} for easy bound information, if first bound is a TypeVariable
          *         then retrieve BoundedType of this TypeVariable
          

     ----------------------




Method public VerificationMode atMost(int maxNumberOfInvocations)  (VerificationAfterDelay.java)
     Method public VerificationMode atLeast(int minNumberOfInvocations)  (VerificationAfterDelay.java)

Method public VerificationMode atMost(int maxNumberOfInvocations)    (VerificationAfterDelay.java)


     * Verifies that there is are most N invocations during the given period. This will wait the full period given,
     * unless too many invocations occur (in which case there will be an immediate failure)
     

----------------------


     Method public VerificationMode atLeast(int minNumberOfInvocations)    (VerificationAfterDelay.java)

     
          * Verifies that there is are least N invocations during the given period. This will wait the full period given.
          

     ----------------------




Class Timeout  (Timeout.java)
     Class After  (After.java)

Class Timeout    (Timeout.java)


 * See the javadoc for {@link VerificationWithTimeout}
 * <p>
 * Typically, you won't use this class explicitly. Instead use timeout() method on Mockito class.
 * See javadoc for {@link VerificationWithTimeout}
 

----------------------


     Class After    (After.java)

     
      * See the javadoc for {@link VerificationAfterDelay}
      * <p>
      * Typically, you won't use this class explicitly. Instead use timeout() method on Mockito class.
      * See javadoc for {@link VerificationWithTimeout}
      

     ----------------------




Class MockitoJUnitRule  (MockitoJUnitRule.java)
     Method public MockitoJUnitRule()  (MockitoJUnitRule.java)

Class MockitoJUnitRule    (MockitoJUnitRule.java)


 * Please use {@link MockitoJUnit#rule()} instead of direct use.
 * The reason of the deprecation is that we want to avoid concrete classes in the public api.
 *
 * @see MockitoJUnit
 * @since 1.10.6
 

----------------------


     Method public MockitoJUnitRule()    (MockitoJUnitRule.java)

     
          * Please use {@link MockitoJUnit#rule()}.
          * The reason of the deprecation is that we want to avoid concrete classes in the public api.
          

     ----------------------




Method public static void close(Closeable closeable)  (IOUtil.java)
     Method public static void closeQuietly(Closeable closeable)  (IOUtil.java)

Method public static void close(Closeable closeable)    (IOUtil.java)


     * Closes the target. Does nothing when target is null. Is not silent and exceptions are rethrown.
     *
     * @param closeable the target, may be null
     

----------------------


     Method public static void closeQuietly(Closeable closeable)    (IOUtil.java)

     
          * Closes the target. Does nothing when target is null. Is silent.
          *
          * @param closeable the target, may be null
          

     ----------------------




Method public MockitoJUnitRule(Object targetTest)  (MockitoJUnitRule.java)
     Method public MockitoJUnitRule()  (MockitoJUnitRule.java)

Method public MockitoJUnitRule(Object targetTest)    (MockitoJUnitRule.java)


     * Please use {@link MockitoJUnit#rule()}.
     * The reason of the deprecation is that we want to avoid concrete classes in the public api.
     

----------------------


     Method public MockitoJUnitRule()    (MockitoJUnitRule.java)

     
          * Please use {@link MockitoJUnit#rule()}.
          * The reason of the deprecation is that we want to avoid concrete classes in the public api.
          

     ----------------------




